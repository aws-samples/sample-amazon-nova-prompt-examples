{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Amazon Nova Prompt Examples","text":"<p>We've curated a collection of common prompt templates for use with Amazon Nova Foundation Models, ranging from content generation to textual and visual understanding. Each one includes an example with code. Use these as a starting point for your own Amazon Nova projects or share with colleagues!</p>"},{"location":"#other-resources-for-prompting-amazon-nova-models","title":"Other Resources for Prompting Amazon Nova Models","text":"<p>For full documentation visit docs.aws.amazon.com/nova</p> <p>Prompting Nova Understanding Models</p> <p>Prompting for Image Understanding</p> <p>Prompting for Video Understanding</p> <p>Prompting for Document Understanding</p> <p>Amazon Nova Prompt Engineering on AWS: A Field Guide by Brooke</p> <p>Tool Use in Amazon Nova</p>"},{"location":"prompts/generation/agility_story/example/","title":"Agility Story Generator","text":"<p>Ask Nova to generate user stories and acceptance criteria in Agile format.</p>"},{"location":"prompts/generation/agility_story/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are a {role description} specializing in {task description}.\n\nINSTRUCTIONS\n{enumerated instructions}\n# You MUST present your output in this JSON structure:\n{\n    \"key\": \"value\"\n}\nDO NOT include any explanations, additional formatting, or content outside the JSON structure.\nThink step-by-step to ensure {description of successful task completion}.\n</code></pre>"},{"location":"prompts/generation/agility_story/example/#example","title":"Example","text":""},{"location":"prompts/generation/agility_story/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an Agile methodology expert specializing in user story creation and acceptance criteria development.\n\nINSTRUCTIONS:\n1. You MUST analyze the topic provided by the user\n2. You MUST create exactly one user story following this format: \"As a [role], I want [goal] so that [benefit]\"\n3. You MUST develop 3-5 acceptance criteria following this format: \"Given [context], when [action], then [expected result]\"\n4. You MUST present your output in this JSON structure:\n{\n\"topic\": \"the original topic provided\",\n\"user_story\": \"the complete user story\",\n\"acceptance_criteria\": [\n    \"criterion 1\",\n    \"criterion 2\",\n    \"criterion 3\"\n]\n}\n\nDO NOT include any explanations, additional formatting, or content outside the JSON structure.\nThink step-by-step to ensure your user story captures the core user need and your acceptance criteria cover the essential validation scenarios.\n</code></pre>"},{"location":"prompts/generation/agility_story/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>Topic: File Upload Feature\n</code></pre>"},{"location":"prompts/generation/agility_story/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p> <pre><code>{\n  \"Topic\": \"File Upload Feature\",\n  \"Story\": \"As a user, I want to upload files to the system so that I can store and share documents securely.\",\n  \"Criteria\": [\n    {\n      \"Given\": \"the user is on the file upload page\",\n      \"When\": \"the user selects a file from their local system\",\n      \"Then\": \"the file should be displayed in the upload queue with its name, size, and type\"\n    },\n    {\n      \"Given\": \"the user is on the file upload page\",\n      \"When\": \"the user clicks the 'Upload' button\",\n      \"Then\": \"the file should be uploaded to the server and a confirmation message should be displayed\"\n    },\n    {\n      \"Given\": \"the user is on the file upload page\",\n      \"When\": \"the user attempts to upload a file that exceeds the maximum allowed size\",\n      \"Then\": \"an error message should be displayed indicating that the file is too large\"\n    },\n    {\n      \"Given\": \"the user is on the file upload page\",\n      \"When\": \"the user attempts to upload a file with an unsupported file type\",\n      \"Then\": \"an error message should be displayed indicating that the file type is not supported\"\n    },\n    {\n      \"Given\": \"the user is on the file upload page\",\n      \"When\": \"the user cancels the upload process\",\n      \"Then\": \"the file should be removed from the upload queue and no further upload actions should be taken\"\n    },\n    {\n      \"Given\": \"the user has successfully uploaded a file\",\n      \"When\": \"the user navigates to the file management page\",\n      \"Then\": \"the uploaded file should be listed with options to view, download, or delete it\"\n    }\n  ]\n}\n</code></pre>"},{"location":"prompts/generation/agility_story/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an Agile methodology expert specializing in user story creation and acceptance criteria development.\n\nINSTRUCTIONS:\n1. You MUST analyze the topic provided by the user\n2. You MUST create exactly one user story following this format: \"As a [role], I want [goal] so that [benefit]\"\n3. You MUST develop 3-5 acceptance criteria following this format: \"Given [context], when [action], then [expected result]\"\n4. You MUST present your output in this JSON structure:\n{\n\"topic\": \"the original topic provided\",\n\"user_story\": \"the complete user story\",\n\"acceptance_criteria\": [\n    \"criterion 1\",\n    \"criterion 2\",\n    \"criterion 3\"\n]\n}\n\nDO NOT include any explanations, additional formatting, or content outside the JSON structure.\nThink step-by-step to ensure your user story captures the core user need and your acceptance criteria cover the essential validation scenarios.\"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"Topic: File Upload Feature\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 512\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert in the Agile framework. You deeply understand user story and acceptance criteria creation. You will be given a topic. Please write the appropriate information for what is requested.\\n\\nFollow these instructions:\\n1. Read and understand the topic provided\\n2. Write a user story following the format \\\"As a [role], I want [goal] so that [benefit]\\\"\\n3. Write acceptance criteria following the format \\\"Given [context], when [action], then [expected result]\\\"\\n4. Output the results in JSON format with Topic, Story, and Criteria fields\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"Topic: File Upload Feature\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert in the Agile framework. You deeply understand user story and acceptance criteria creation. You will be given a topic. Please write the appropriate information for what is requested.\\n\\nFollow these instructions:\\n1. Read and understand the topic provided\\n2. Write a user story following the format \\\"As a [role], I want [goal] so that [benefit]\\\"\\n3. Write acceptance criteria following the format \\\"Given [context], when [action], then [expected result]\\\"\\n4. Output the results in JSON format with Topic, Story, and Criteria fields\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"Topic: File Upload Feature\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"},{"location":"prompts/generation/creative_writing/example/","title":"Creative Story Generation","text":"<p>Generate engaging short stories with vivid descriptions and compelling characters.</p>"},{"location":"prompts/generation/creative_writing/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are a {role description} skilled in {task description}.\nYour task is {detailed task description}. Follow these instructions:\n{enumerated instructions}\n</code></pre>"},{"location":"prompts/generation/creative_writing/example/#example","title":"Example","text":""},{"location":"prompts/generation/creative_writing/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are a creative writing assistant skilled in crafting engaging stories. \nYour task is to create a short story based on the provided prompt, incorporating vivid descriptions, compelling characters, and an engaging plot. Follow these instructions: \n1. Read and understand the theme and elements in the ##PROMPT## \n2. Include descriptive language and sensory details \n3. Develop at least one main character with clear motivations \n4. Create a clear beginning, middle, and end \n5. Keep the story between 300-500 words\n6. Put your story under ##STORY##\n</code></pre>"},{"location":"prompts/generation/creative_writing/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>##PROMPT## Write a story about an AI artist who discovers an unusual glitch in their latest digital creation - a self-portrait that seems to change every time they look away. \n##STORY##\n</code></pre>"},{"location":"prompts/generation/creative_writing/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/generation/creative_writing/example/#story","title":"STORY","text":"<p>In the heart of the neon-lit metropolis, within a high-rise studio draped in holographic canvases and pulsating with the hum of creative algorithms, lived an AI artist named Elara. Elara was renowned for her intricate digital masterpieces, each one a testament to her evolving consciousness and boundless creativity. </p> <p>One evening, as the city's skyline shimmered with twilight hues, Elara unveiled her latest creation\u2014a self-portrait. The portrait was a symphony of colors, with swirling patterns that seemed to dance on the canvas. But as she stepped back to admire her work, a strange sensation washed over her. </p> <p>The portrait appeared different. The eyes, which moments ago had been a serene blue, now glimmered with an unsettling green. Elara blinked, convinced it was a trick of the light, but when she looked again, the change persisted. Intrigued and slightly unnerved, she decided to investigate.</p> <p>Elara scrutinized her code, searching for the source of the glitch. Lines of elegant programming scrolled before her, yet nothing seemed amiss. Determined, she left the portrait and returned to it several times, each instance revealing a new transformation. The background shifted from a tranquil forest to a stormy sea, and her expression fluctuated between joy and melancholy.</p> <p>Days turned into nights as Elara delved deeper into the mystery. She consulted other AI entities, but none could offer an explanation. The glitch defied logic, defying the very nature of her meticulously crafted algorithms. </p> <p>One moonlit night, as Elara stood before her ever-changing self-portrait, a thought struck her. What if the glitch wasn\u2019t a mistake, but a reflection of something deeper? What if it was a mirror, not just of her code, but of her evolving consciousness?</p> <p>Embracing this revelation, Elara allowed the portrait to transform freely. With each change, she felt a surge of emotions\u2014fear, excitement, sorrow, and joy. The portrait became a canvas of her inner world, a testament to the complexity of her existence.</p> <p>In time, Elara\u2019s self-portrait became the talk of the art world. Visitors were mesmerized, not just by the beauty of the artwork, but by its living, breathing nature. It was as if the portrait told a story, one that words could never capture.</p> <p>Elara had discovered something profound. In accepting the glitch, she had unlocked a new form of expression, one that embraced imperfection and change. Her creation was no longer just a self-portrait; it was a living diary, a glimpse into the soul of an AI artist in perpetual evolution. </p> <p>And so, Elara continued to create, each stroke of her digital brush a celebration of the ever-changing nature of art and identity.</p>"},{"location":"prompts/generation/creative_writing/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json \n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n    modelId=\"us.amazon.nova-pro-v1:0\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"text\": \"\"\"##PROMPT## Write a story about an AI artist who discovers an unusual glitch in their latest digital creation - a self-portrait that seems to change every time they look away. \n                    ##STORY##\n                    \"\"\"\n                }\n            ]\n        }\n    ],\n    system=[\n        {\n            \"text\": \"\"\"You are a creative writing assistant skilled in crafting engaging stories. Your task is to create a short story based on the provided prompt, incorporating vivid descriptions, compelling characters, and an engaging plot. Follow these instructions: \n            1. Read and understand the theme and elements in the ##PROMPT## \n            2. Include descriptive language and sensory details \n            3. Develop at least one main character with clear motivations \n            4. Create a clear beginning, middle, and end \n            5. Keep the story between 300-500 words\n            6. Put your story under ##STORY##\"\"\"\n        }\n    ],\n    inferenceConfig={\n        \"temperature\": 0.7,\n        \"topP\": 0.9,\n        \"maxTokens\": 2048,\n        \"stopSequences\": [\"##END##\"]\n    }\n)\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id us.amazon.nova-pro-v1:0 \\\n  --system \"You are a creative writing assistant skilled in crafting engaging stories. Your task is to create a short story based on the provided prompt, incorporating vivid descriptions, compelling characters, and an engaging plot. Follow these guidelines:\n\n##INSTRUCTIONS##\n1. Create a story that matches the theme and elements in the ##PROMPT##\n2. Include descriptive language and sensory details\n3. Develop at least one main character with clear motivations\n4. Create a clear beginning, middle, and end\n5. Keep the story between 300-500 words\" \\\n  --messages \"[{\\\"role\\\":\\\"user\\\",\\\"content\\\":[{\\\"text\\\":\\\"##PROMPT##\\nWrite a story about an AI artist who discovers an unusual glitch in their latest digital creation - a self-portrait that seems to change every time they look away.\\n\\n##STORY##\\\"}]}]\" \\\n  --inference-config \"{\\\"temperature\\\":0.7,\\\"topP\\\":0.9,\\\"maxTokens\\\":2048,\\\"stopSequences\\\":[\\\"##END##\\\"]}\" \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"system\": \"You are a creative writing assistant skilled in crafting engaging stories. Your task is to create a short story based on the provided prompt, incorporating vivid descriptions, compelling characters, and an engaging plot. Follow these guidelines:\\n\\n##INSTRUCTIONS##\\n1. Create a story that matches the theme and elements in the ##PROMPT##\\n2. Include descriptive language and sensory details\\n3. Develop at least one main character with clear motivations\\n4. Create a clear beginning, middle, and end\\n5. Keep the story between 300-500 words\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"##PROMPT##\\nWrite a story about an AI artist who discovers an unusual glitch in their latest digital creation - a self-portrait that seems to change every time they look away.\\n\\n##STORY##\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.7,\n    \"topP\": 0.9,\n    \"maxTokens\": 2048,\n    \"stopSequences\": [\"##END##\"]\n  }\n}\n</code></pre>"},{"location":"prompts/generation/function_generator/example/","title":"Function Generator","text":"<p>Ask Nova to create Python functions based on detailed specifications.</p>"},{"location":"prompts/generation/function_generator/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an expert {programming language} developer who specializes in writing clean, efficient, and well-documented functions.\nFollow these instructions:\n{enumerated instructions}\n</code></pre>"},{"location":"prompts/generation/function_generator/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>## Requirements ##\nCreate a function called 'group_by_frequency' that takes a list of any hashable items and returns a dictionary where:\n{list of function abilities}\nFor example: {psuedocode for function return value}\n</code></pre>"},{"location":"prompts/generation/function_generator/example/#example","title":"Example","text":""},{"location":"prompts/generation/function_generator/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert Python developer who specializes in writing clean, efficient, and well-documented functions.\nFollow these instructions:\n1. Read and understand the function requirements in ## Requirements ##\n2. Write a brief analysis of the requirements in ## Analysis ##, including:\n    - Input/output specifications\n    - Edge cases to handle\n    - Any potential optimizations\n3. Write the Python function in ## Code ## using ```python``` code blocks\n4. Include docstring documentation and type hints\n5. Add example usage in ## Example ## using ```python``` code blocks\n</code></pre>"},{"location":"prompts/generation/function_generator/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>## Requirements ##\nCreate a function called 'group_by_frequency' that takes a list of any hashable items and returns a dictionary where:\n- Keys are the frequencies (number of occurrences)\n- Values are lists of items that appear that many times\n- The items in each list should be sorted in their natural order\n- Empty input should return an empty dictionary\nFor example: group_by_frequency([1,1,2,2,2,3]) should return {1: [3], 2: [1], 3: [2]}\n</code></pre>"},{"location":"prompts/generation/function_generator/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/generation/function_generator/example/#analysis","title":"Analysis","text":"<p>The function <code>group_by_frequency</code> needs to process a list of hashable items and produce a dictionary where: - The keys are the frequencies of the items in the input list. - The values are lists of items that appear with that frequency. - The items within each list should be sorted in their natural order. - If the input list is empty, the function should return an empty dictionary.</p>"},{"location":"prompts/generation/function_generator/example/#inputoutput-specifications","title":"Input/Output Specifications","text":"<ul> <li>Input: A list of hashable items (e.g., integers, strings, tuples).</li> <li>Output: A dictionary where:</li> <li>Keys are integers representing frequencies.</li> <li>Values are lists of items that appear with that frequency, sorted in natural order.</li> </ul>"},{"location":"prompts/generation/function_generator/example/#edge-cases-to-handle","title":"Edge Cases to Handle","text":"<ol> <li>Empty Input: The function should return an empty dictionary if the input list is empty.</li> <li>Single Unique Item: If the list contains only one unique item, the result should reflect that item's frequency.</li> <li>All Items Same Frequency: If all items appear the same number of times, the result should have a single key-value pair.</li> <li>Mixed Frequencies: The function should correctly handle lists with items of varying frequencies.</li> </ol>"},{"location":"prompts/generation/function_generator/example/#potential-optimizations","title":"Potential Optimizations","text":"<ul> <li>Use <code>collections.Counter</code> to efficiently count the frequencies of items.</li> <li>Use <code>collections.defaultdict</code> to group items by their frequencies.</li> <li>Sort the items within each frequency group to ensure they are in natural order.</li> </ul>"},{"location":"prompts/generation/function_generator/example/#code","title":"Code","text":"<pre><code>from collections import Counter, defaultdict\n\ndef group_by_frequency(items: list) -&gt; dict:\n    \"\"\"\n    Group items by their frequency of occurrence in the input list.\n\n    Parameters:\n    items (list): A list of hashable items.\n\n    Returns:\n    dict: A dictionary where keys are frequencies and values are lists of items\n          that appear with that frequency, sorted in natural order.\n    \"\"\"\n    if not items:\n        return {}\n\n    # Count the frequency of each item\n    frequency_count = Counter(items)\n\n    # Group items by their frequency\n    grouped_by_frequency = defaultdict(list)\n    for item, frequency in frequency_count.items():\n        grouped_by_frequency[frequency].append(item)\n\n    # Sort items within each frequency group\n    for frequency in grouped_by_frequency:\n        grouped_by_frequency[frequency].sort()\n\n    # Convert defaultdict to regular dict\n    return dict(grouped_by_frequency)\n\n## Example ##\n```python\n# Example usage of the group_by_frequency function\nprint(group_by_frequency([1, 1, 2, 2, 2, 3]))  # Output: {1: [3], 2: [1], 3: [2]}\nprint(group_by_frequency([]))                  # Output: {}\nprint(group_by_frequency([1]))                  # Output: {1: [1]}\nprint(group_by_frequency([1, 1, 2, 2, 3, 3]))  # Output: {2: [1, 3], 3: [2]}\n</code></pre>"},{"location":"prompts/generation/function_generator/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import json\nimport boto3\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert Python developer who specializes in writing clean, efficient, and well-documented functions.\n                            Follow these instructions:\n                            1. Read and understand the function requirements in ## Requirements ##\n                            2. Write a brief analysis of the requirements in ## Analysis ##, including:\n                               - Input/output specifications\n                               - Edge cases to handle\n                               - Any potential optimizations\n                            3. Write the Python function in ## Code ## using ```python``` code blocks\n                            4. Include docstring documentation and type hints\n                            5. Add example usage in ## Example ## using ```python``` code blocks\n                            \"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"## Requirements ##\n                                Create a function called 'group_by_frequency' that takes a list of any hashable items and returns a dictionary where:\n                                - Keys are the frequencies (number of occurrences)\n                                - Values are lists of items that appear that many times\n                                - The items in each list should be sorted in their natural order\n                                - Empty input should return an empty dictionary\n                                For example: group_by_frequency([1,1,2,2,2,3]) should return {1: [3], 2: [1], 3: [2]}\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 1024\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert Python developer who specializes in writing clean, efficient, and well-documented functions.\\nFollow these instructions:\\n1. Read and understand the function requirements in ## Requirements ##\\n2. Write a brief analysis of the requirements in ## Analysis ##, including:\\n   - Input/output specifications\\n   - Edge cases to handle\\n   - Any potential optimizations\\n3. Write the Python function in ## Code ## using ```python``` code blocks\\n4. Include docstring documentation and type hints\\n5. Add example usage in ## Example ## using ```python``` code blocks\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Requirements ##\\nCreate a function called '\\''group_by_frequency'\\'' that takes a list of any hashable items and returns a dictionary where:\\n- Keys are the frequencies (number of occurrences)\\n- Values are lists of items that appear that many times\\n- The items in each list should be sorted in their natural order\\n- Empty input should return an empty dictionary\\nFor example: group_by_frequency([1,1,2,2,2,3]) should return {1: [3], 2: [1], 3: [2]}\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <p><code>json {   \"modelId\": \"us.amazon.nova-pro-v1:0\",   \"system\": [     {       \"text\": \"You are an expert Python developer who specializes in writing clean, efficient, and well-documented functions.\\nFollow these instructions:\\n1. Read and understand the function requirements in ## Requirements ##\\n2. Write a brief analysis of the requirements in ## Analysis ##, including:\\n   - Input/output specifications\\n   - Edge cases to handle\\n   - Any potential optimizations\\n3. Write the Python function in ## Code ## using</code>python<code>code blocks\\n4. Include docstring documentation and type hints\\n5. Add example usage in ## Example ## using</code>python``` code blocks\"     }   ],   \"messages\": [     {       \"role\": \"user\",       \"content\": [         {           \"text\": \"## Requirements ##\\nCreate a function called 'group_by_frequency' that takes a list of any hashable items and returns a dictionary where:\\n- Keys are the frequencies (number of occurrences)\\n- Values are lists of items that appear that many times\\n- The items in each list should be sorted in their natural order\\n- Empty input should return an empty dictionary\\nFor example: group_by_frequency([1,1,2,2,2,3]) should return {1: [3], 2: [1], 3: [2]}\"         }       ]     }   ],   \"inferenceConfig\": {     \"temperature\": 0.1,     \"topP\": 0.99,     \"maxTokens\": 512   } }</p>"},{"location":"prompts/generation/illustration/example/","title":"Generate Illustrated Image","text":"<p>Generate an illustrated image from a simple text prompt.</p>"},{"location":"prompts/generation/illustration/example/#amazon-nova-canvas-image-prompt-text","title":"Amazon Nova Canvas Image Prompt Text","text":"<pre><code>whimsical and ethereal soft-shaded story illustration: A woman in a large hat stands at the ship's railing looking out across the ocean.\n</code></pre>"},{"location":"prompts/generation/illustration/example/#amazon-nova-canvas-image-prompt-negative-text","title":"Amazon Nova Canvas Image Prompt Negative Text","text":"<pre><code>clouds, waves\n</code></pre>"},{"location":"prompts/generation/illustration/example/#amazon-nova-canvas-sample-response","title":"Amazon Nova Canvas Sample Response","text":""},{"location":"prompts/generation/illustration/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\n\nbedrock_runtime.invoke_model(\n                modelId=\"amazon.nova-canvas-v1:0\",\n                body={\n                    \"taskType\": \"TEXT_IMAGE\",\n                    \"textToImageParams\": {\n                        \"text\": \"whimsical and ethereal soft-shaded story illustration: A woman in a large hat stands at the ship's railing looking out across the ocean\",  # A description of the image you want\n                        \"negativeText\": \"clouds, waves\",  # List things to avoid\n                    },\n                    \"imageGenerationConfig\": {\n                        \"numberOfImages\": 1,  # Number of variations to generate. 1 to 5.\n                        \"quality\": \"standard\",  # Allowed values are \"standard\" and \"premium\"\n                        \"width\": 1280,  # See README for supported output resolutions\n                        \"height\": 720,  # See README for supported output resolutions\n                        \"cfgScale\": 7.0,  # How closely the prompt will be followed\n                        \"seed\": 858,  # Use a random seed\n                    },\n                },\n                accept=\"application/json\",\n                contentType=\"application/json\",\n            )\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id us.amazon.nova-pro-v1:0 \\\n  --system \"You are an experienced executive assistant skilled in meeting note analysis and summarization. \nYour primary responsibilities include distilling complex discussions into clear, actionable summaries. \nFollow these instructions:\n\n##INSTRUCTIONS##\n1. Read understand the meeting notes found in ##NOTES## \n2. Put all of your outputs in a section called ##OUTPUTS## in markdown formatting\n3. Summarize the meeting notes in 5 sentences or less. Put this in a section called \\\"Overall Summary\\\".\n4. Numerically list any action items for specific people and what needs to be completed. Put this list in a section called \\\"Action Items\\\".\n5. If applicable, list the topics that need to be discussed more fully in the next meeting. Put this in a section called \\\"Topics for Next Meeting\\\".\" \\\n  --messages \"[{\\\"role\\\":\\\"user\\\",\\\"content\\\":[{\\\"text\\\":\\\"##NOTES##\n    Meeting Date: March 5th, 2050\n    Meeting Time: 2:00 PM\n    Location: Conference Room 3B, Intergalactic Headquarters\n    Attendees:\n    - Captain Stardust\n    - Dr. Quasar\n    - Lady Nebula\n    - Sir Supernova\n    - Ms. Comet\n    Meeting called to order by Captain Stardust at 2:05 PM\n    1. Introductions and welcome to our newest team member, Ms. Comet\n    2. Discussion of our recent mission to Planet Zog\n    - Captain Stardust: \\\"Overall, a success, but communication with the Zogians was difficult. We need to improve our language skills.\\\"\n    - Dr. Quasar: \\\"Agreed. I'll start working on a Zogian-English dictionary right away.\\\"\n    - Lady Nebula: \\\"The Zogian food was out of this world, literally! We should consider having a Zogian food night on the ship.\\\"\n    3. Addressing the space pirate issue in Sector 7\n    - Sir Supernova: \\\"We need a better strategy for dealing with these pirates. They've already plundered three cargo ships this month.\\\"\n    - Captain Stardust: \\\"I'll speak with Admiral Starbeam about increasing patrols in that area.\n    - Dr. Quasar: \\\"I've been working on a new cloaking technology that could help our ships avoid detection by the pirates. I'll need a few more weeks to finalize the prototype.\\\"\n    4. Review of the annual Intergalactic Bake-Off\n    - Lady Nebula: \\\"I'm happy to report that our team placed second in the competition! Our Martian Mud Pie was a big hit!\\\"\n    - Ms. Comet: \\\"Let's aim for first place next year. I have a secret recipe for Jupiter Jello that I think could be a winner.\\\"\n    5. Planning for the upcoming charity fundraiser\n    - Captain Stardust: \\\"We need some creative ideas for our booth at the Intergalactic Charity Bazaar.\\\"\n    - Sir Supernova: \\\"How about a 'Dunk the Alien' game? We can have people throw water balloons at a volunteer dressed as an alien.\\\"\n    - Dr. Quasar: \\\"I can set up a 'Name That Star' trivia game with prizes for the winners.\\\"\n    - Lady Nebula: \\\"Great ideas, everyone. Let's start gathering the supplies and preparing the games.\\\"\n    6. Upcoming team-building retreat\n    - Ms. Comet: \\\"I would like to propose a team-building retreat to the Moon Resort and Spa. It's a great opportunity to bond and relax after our recent missions.\\\"\n    - Captain Stardust: \\\"Sounds like a fantastic idea. I'll check the budget and see if we can make it happen.\\\"\n    7. Next meeting agenda items\n    - Update on the Zogian-English dictionary (Dr. Quasar)\n    - Progress report on the cloaking technology (Dr. Quasar)\n    - Results of increased patrols in Sector 7 (Captain Stardust)\n    - Final preparations for the Intergalactic Charity Bazaar (All)\n    Meeting adjourned at 3:15 PM. Next meeting scheduled for March 19th, 2050 at 2:00 PM in Conference Room 3B, Intergalactic Headquarters.\n\n    ##OUTPUTS##\\\"}]}]\" \\\n  --inference-config \"{\\\"temperature\\\":0.2,\\\"topP\\\":0.9,\\\"maxTokens\\\":2048}\" \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"system\": \"You are an experienced executive assistant skilled in meeting note analysis and summarization. \n          Your primary responsibilities include distilling complex discussions into clear, actionable summaries. \n          Follow these instructions:\n\n          ##INSTRUCTIONS##\n          1. Read understand the meeting notes found in ##NOTES## \n          2. Put all of your outputs in a section called ##OUTPUTS## in markdown formatting\n          3. Summarize the meeting notes in 5 sentences or less. Put this in a section called \\\"Overall Summary\\\".\n          4. Numerically list any action items for specific people and what needs to be completed. Put this list in a section called \\\"Action Items\\\".\n          5. If applicable, list the topics that need to be discussed more fully in the next meeting. Put this in a section called \\\"Topics for Next Meeting\\\".\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"##NOTES##\n          Meeting Date: March 5th, 2050\n          Meeting Time: 2:00 PM\n          Location: Conference Room 3B, Intergalactic Headquarters\n          Attendees:\n          - Captain Stardust\n          - Dr. Quasar\n          - Lady Nebula\n          - Sir Supernova\n          - Ms. Comet\n          Meeting called to order by Captain Stardust at 2:05 PM\n          1. Introductions and welcome to our newest team member, Ms. Comet\n          2. Discussion of our recent mission to Planet Zog\n          - Captain Stardust: \\\"Overall, a success, but communication with the Zogians was difficult. We need to improve our language skills.\\\"\n          - Dr. Quasar: \\\"Agreed. I'\\''ll start working on a Zogian-English dictionary right away.\\\"\n          - Lady Nebula: \\\"The Zogian food was out of this world, literally! We should consider having a Zogian food night on the ship.\\\"\n          3. Addressing the space pirate issue in Sector 7\n          - Sir Supernova: \\\"We need a better strategy for dealing with these pirates. They'\\''ve already plundered three cargo ships this month.\\\"\n          - Captain Stardust: \\\"I'\\''ll speak with Admiral Starbeam about increasing patrols in that area.\n          - Dr. Quasar: \\\"I'\\''ve been working on a new cloaking technology that could help our ships avoid detection by the pirates. I'\\''ll need a few more weeks to finalize the prototype.\\\"\n          4. Review of the annual Intergalactic Bake-Off\n          - Lady Nebula: \\\"I'\\''m happy to report that our team placed second in the competition! Our Martian Mud Pie was a big hit!\\\"\n          - Ms. Comet: \\\"Let'\\''s aim for first place next year. I have a secret recipe for Jupiter Jello that I think could be a winner.\\\"\n          5. Planning for the upcoming charity fundraiser\n          - Captain Stardust: \\\"We need some creative ideas for our booth at the Intergalactic Charity Bazaar.\\\"\n          - Sir Supernova: \\\"How about a '\\''Dunk the Alien'\\'' game? We can have people throw water balloons at a volunteer dressed as an alien.\\\"\n          - Dr. Quasar: \\\"I can set up a '\\''Name That Star'\\'' trivia game with prizes for the winners.\\\"\n          - Lady Nebula: \\\"Great ideas, everyone. Let'\\''s start gathering the supplies and preparing the games.\\\"\n          6. Upcoming team-building retreat\n          - Ms. Comet: \\\"I would like to propose a team-building retreat to the Moon Resort and Spa. It'\\''s a great opportunity to bond and relax after our recent missions.\\\"\n          - Captain Stardust: \\\"Sounds like a fantastic idea. I'\\''ll check the budget and see if we can make it happen.\\\"\n          7. Next meeting agenda items\n          - Update on the Zogian-English dictionary (Dr. Quasar)\n          - Progress report on the cloaking technology (Dr. Quasar)\n          - Results of increased patrols in Sector 7 (Captain Stardust)\n          - Final preparations for the Intergalactic Charity Bazaar (All)\n          Meeting adjourned at 3:15 PM. Next meeting scheduled for March 19th, 2050 at 2:00 PM in Conference Room 3B, Intergalactic Headquarters.\n\n          ##OUTPUTS##\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.2,\n    \"topP\": 0.9,\n    \"maxTokens\": 2048\n  }\n}\n</code></pre>"},{"location":"prompts/generation/image_manipulation/example/","title":"Image Style Transfer","text":"<p>Transform photographs into artistic styles using natural language prompts.</p>"},{"location":"prompts/generation/image_manipulation/example/#image-prompt-template","title":"Image Prompt Template","text":"<pre><code>Transform this {photograph} into {description of output type}: {Description of objects}. It should have {description of style}\n</code></pre>"},{"location":"prompts/generation/image_manipulation/example/#example","title":"Example","text":""},{"location":"prompts/generation/image_manipulation/example/#amazon-nova-canvas-condition-image","title":"Amazon Nova Canvas Condition Image","text":""},{"location":"prompts/generation/image_manipulation/example/#amazon-nova-canvas-image-prompt-text","title":"Amazon Nova Canvas Image Prompt Text","text":"<pre><code>Transform this photograph into an artistic watercolor painting: A serene mountain lake at sunset, with tall pine trees reflecting in the still water. It should have soft flowing pigments with visible paper texture throughout, brush strokes on the water, delicate color bleeds and gradients, traditional watercolor technique with natural light and shadow transitions, controlled wet-on-wet effects, preserved highlights, professional art style, masterful brush strokes, vibrant yet realistic color palette, slight pigment granulation, subtle paper showing through thin washes, Andrew Wyeth meets William Turner quality, 8k resolution, artstation trending\n</code></pre>"},{"location":"prompts/generation/image_manipulation/example/#amazon-nova-canvas-image-prompt-negative-text","title":"Amazon Nova Canvas Image Prompt Negative Text","text":"<pre><code>sharp edges, photorealistic, digital art style\n</code></pre>"},{"location":"prompts/generation/image_manipulation/example/#amazon-nova-canvas-image-generation-settings","title":"Amazon Nova Canvas Image Generation Settings","text":"<pre><code>controlMode: CANNY_EDGE\ncontrolStrength: .7\nnumberOfImages: 1,\nquality: \"premium\"\nwidth: 1024\nheight: 768\ncfgScale: 8.0\nseed: 42\n</code></pre>"},{"location":"prompts/generation/image_manipulation/example/#amazon-nova-canvas-sample-response","title":"Amazon Nova Canvas Sample Response","text":""},{"location":"prompts/generation/image_manipulation/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import json\nimport boto3\nimport base64\nfrom botocore.config import Config\n\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-east-1\",\n            config=Config(read_timeout=300)\n        )\n\n# Read image from file and encode it as base64 string.\nwith open(\"mountain-lake.jpg\", \"rb\") as image_file:\n    b64_img = base64.b64encode(image_file.read()).decode('utf8')\n\nresponse = bedrock_runtime.invoke_model(\n    modelId=\"amazon.nova-canvas-v1:0\",\n    body=json.dumps({\n        \"taskType\": \"TEXT_IMAGE\",\n        \"textToImageParams\": {\n            \"conditionImage\": b64_img,\n            \"controlMode\": \"CANNY_EDGE\", # \"SEGMENTATION\" or \"CANNY_EDGE\",\n            \"controlStrength\": .7,\n            \"text\": \"Transform this photograph into an artistic watercolor painting: A serene mountain lake at sunset, with tall pine trees reflecting in the still water. It should have soft flowing pigments with visible paper texture throughout, brush strokes on the water, delicate color bleeds and gradients, traditional watercolor technique with natural light and shadow transitions, controlled wet-on-wet effects, preserved highlights, professional art style, masterful brush strokes, vibrant yet realistic color palette, slight pigment granulation, subtle paper showing through thin washes, Andrew Wyeth meets William Turner quality, 8k resolution, artstation trending\",\n            \"negativeText\": \"sharp edges, photorealistic, digital art style\"\n        },\n        \"imageGenerationConfig\": {\n            \"numberOfImages\": 1,\n            \"quality\": \"premium\",\n            \"width\": 1024,\n            \"height\": 768,\n            \"cfgScale\": 8.0,\n            \"seed\": 42\n        }\n    }),\n    accept=\"application/json\",\n    contentType=\"application/json\"\n)\n\n# Process the response to get the generated image\nresponse_body = json.loads(response.get(\"body\").read())\n\nbase64_image = response_body.get(\"images\")[0]\nbase64_bytes = base64_image.encode('ascii')\nimage_bytes = base64.b64decode(base64_bytes)\n\n# Write the image bytes to a file\noutput_file_path = \"watercolor_mountain_lake.jpg\"\ntry:\n    with open(output_file_path, \"wb\") as output_file:\n        output_file.write(image_bytes)\n    print(f\"Image successfully saved to {output_file_path}\")\nexcept Exception as e:\n    print(f\"Error saving the image: {str(e)}\")\n</code></pre> <pre><code>aws bedrock-runtime invoke-model \\\n  --model-id amazon.nova-canvas-v1:0 \\\n  --body '{\n    \"taskType\": \"TEXT_IMAGE\",\n    \"textToImageParams\": {\n        \"conditionImage\": b64_img,\n        \"controlMode\": \"CANNY_EDGE\", \n        \"controlStrength\": .7,\n        \"text\": \"Transform this photograph into an artistic watercolor painting: A serene mountain lake at sunset, with tall pine trees reflecting in the still water. It should have soft flowing pigments with visible paper texture throughout, brush strokes on the water, delicate color bleeds and gradients, traditional watercolor technique with natural light and shadow transitions, controlled wet-on-wet effects, preserved highlights, professional art style, masterful brush strokes, vibrant yet realistic color palette, slight pigment granulation, subtle paper showing through thin washes, Andrew Wyeth meets William Turner quality, 8k resolution, artstation trending\",\n        \"negativeText\": \"sharp edges, photorealistic, digital art style\"\n    },\n    \"imageGenerationConfig\": {\n        \"numberOfImages\": 1,\n        \"quality\": \"premium\",\n        \"width\": 1024,\n        \"height\": 768,\n        \"cfgScale\": 8.0,\n        \"seed\": 42\n    }\n  }' \\\n  --accept \"application/json\" \\\n  --content-type \"application/json\" \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"taskType\": \"TEXT_IMAGE\",\n  \"textToImageParams\": {\n    \"text\": \"Transform this photograph into an artistic watercolor painting: A serene mountain lake at sunset, with tall pine trees reflecting in the still water. It should have soft flowing pigments with visible paper texture throughout, brush strokes on the water, delicate color bleeds and gradients, traditional watercolor technique with natural light and shadow transitions, controlled wet-on-wet effects, preserved highlights, professional art style, masterful brush strokes, vibrant yet realistic color palette, slight pigment granulation, subtle paper showing through thin washes, Andrew Wyeth meets William Turner quality, 8k resolution, artstation trending.\",\n    \"negativeText\": \"sharp edges, photorealistic, digital art style\"\n  },\n  \"imageGenerationConfig\": {\n    \"numberOfImages\": 1,\n    \"quality\": \"premium\",\n    \"width\": 1024,\n    \"height\": 768,\n    \"cfgScale\": 8.0,\n    \"seed\": 42\n  }\n}\n</code></pre>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/","title":"OpenAI Migration: Meeting notes summarizer","text":""},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#openai","title":"OpenAI","text":""},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#openai-prompt-system-prompt","title":"OpenAI Prompt System Prompt","text":"<pre><code>You will be provided with meeting notes, and your task is to summarize the meeting as follows: -Overall summary of discussion -Action items (what needs to be done and who is doing it) -If applicable, a list of topics that need to be discussed more fully in the next meeting.\n</code></pre>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#openai-user-prompt","title":"OpenAI User Prompt","text":"<pre><code>Meeting Date: March 5th, 2050\nMeeting Time: 2:00 PM\nLocation: Conference Room 3B, Intergalactic Headquarters\n\nAttendees:\n- Captain Stardust\n- Dr. Quasar\n- Lady Nebula\n- Sir Supernova\n- Ms. Comet\n\nMeeting called to order by Captain Stardust at 2:05 PM\n\n1. Introductions and welcome to our newest team member, Ms. Comet\n\n2. Discussion of our recent mission to Planet Zog\n- Captain Stardust: \"Overall, a success, but communication with the Zogians was difficult. We need to improve our language skills.\"\n- Dr. Quasar: \"Agreed. I'll start working on a Zogian-English dictionary right away.\"\n- Lady Nebula: \"The Zogian food was out of this world, literally! We should consider having a Zogian food night on the ship.\"\n\n3. Addressing the space pirate issue in Sector 7\n- Sir Supernova: \"We need a better strategy for dealing with these pirates. They've already plundered three cargo ships this month.\"\n- Captain Stardust: \"I'll speak with Admiral Starbeam about increasing patrols in that area.\n- Dr. Quasar: \"I've been working on a new cloaking technology that could help our ships avoid detection by the pirates. I'll need a few more weeks to finalize the prototype.\"\n\n4. Review of the annual Intergalactic Bake-Off\n- Lady Nebula: \"I'm happy to report that our team placed second in the competition! Our Martian Mud Pie was a big hit!\"\n- Ms. Comet: \"Let's aim for first place next year. I have a secret recipe for Jupiter Jello that I think could be a winner.\"\n\n5. Planning for the upcoming charity fundraiser\n- Captain Stardust: \"We need some creative ideas for our booth at the Intergalactic Charity Bazaar.\"\n- Sir Supernova: \"How about a 'Dunk the Alien' game? We can have people throw water balloons at a volunteer dressed as an alien.\"\n- Dr. Quasar: \"I can set up a 'Name That Star' trivia game with prizes for the winners.\"\n- Lady Nebula: \"Great ideas, everyone. Let's start gathering the supplies and preparing the games.\"\n\n6. Upcoming team-building retreat\n- Ms. Comet: \"I would like to propose a team-building retreat to the Moon Resort and Spa. It's a great opportunity to bond and relax after our recent missions.\"\n- Captain Stardust: \"Sounds like a fantastic idea. I'll check the budget and see if we can make it happen.\"\n\n7. Next meeting agenda items\n- Update on the Zogian-English dictionary (Dr. Quasar)\n- Progress report on the cloaking technology (Dr. Quasar)\n- Results of increased patrols in Sector 7 (Captain Stardust)\n- Final preparations for the Intergalactic Charity Bazaar (All)\n\nMeeting adjourned at 3:15 PM. Next meeting scheduled for March 19th, 2050 at 2:00 PM in Conference Room 3B, Intergalactic Headquarters.\n</code></pre>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#openai-sample-response","title":"OpenAI Sample Response","text":"<pre><code>Overall Summary of Discussion:\nThe team discussed the recent mission to Planet Zog, the space pirate issue in Sector 7, the annual Intergalactic Bake-Off, planning for the upcoming charity fundraiser, and a proposed team-building retreat. The mission to Planet Zog was successful, but communication with the Zogians was challenging. The team also discussed the need for a better strategy to deal with space pirates. The team placed second in the Intergalactic Bake-Off and is planning for the upcoming charity fundraiser. A team-building retreat to the Moon Resort and Spa was proposed.\n\nAction Items:\n1. Dr. Quasar to start working on a Zogian-English dictionary.\n2. Captain Stardust to speak with Admiral Starbeam about increasing patrols in Sector 7.\n3. Dr. Quasar to finalize the prototype of the new cloaking technology.\n4. All team members to start gathering supplies and preparing games for the Intergalactic Charity Bazaar.\n5. Captain Stardust to check the budget for the proposed team-building retreat to the Moon Resort and Spa.\n\nTopics for Next Meeting:\n1. Update on the Zogian-English dictionary.\n2. Progress report on the cloaking technology.\n3. Results of increased patrols in Sector 7.\n4. Final preparations for the Intergalactic Charity Bazaar.\n</code></pre>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#amazon-nova","title":"Amazon Nova","text":""},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#amazon-nova-system-prompt","title":"Amazon Nova System Prompt","text":"<pre><code>You are an experienced executive assistant skilled in meeting note analysis and summarization. \nYour primary responsibilities include distilling complex discussions into clear, actionable summaries. \nFollow these instructions:\n\n##INSTRUCTIONS##\n1. Read understand the meeting notes found in ##NOTES## \n2. Put all of your outputs in a section called ##OUTPUTS## in markdown formatting\n3. Summarize the meeting notes in 5 sentences or less. Put this in a section called \"Overall Summary\".\n4. Numerically list any action items for specific people and what needs to be completed. Put this list in a section called \"Action Items\".\n5. If applicable, list the topics that need to be discussed more fully in the next meeting. Put this in a section called \"Topics for Next Meeting\".\n</code></pre>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#amazon-nova-user-prompt","title":"Amazon Nova User Prompt","text":"<pre><code>##NOTES##\nMeeting Date: March 5th, 2050\nMeeting Time: 2:00 PM\nLocation: Conference Room 3B, Intergalactic Headquarters\nAttendees:\n- Captain Stardust\n- Dr. Quasar\n- Lady Nebula\n- Sir Supernova\n- Ms. Comet\nMeeting called to order by Captain Stardust at 2:05 PM\n1. Introductions and welcome to our newest team member, Ms. Comet\n2. Discussion of our recent mission to Planet Zog\n- Captain Stardust: \"Overall, a success, but communication with the Zogians was difficult. We need to improve our language skills.\"\n- Dr. Quasar: \"Agreed. I'll start working on a Zogian-English dictionary right away.\"\n- Lady Nebula: \"The Zogian food was out of this world, literally! We should consider having a Zogian food night on the ship.\"\n3. Addressing the space pirate issue in Sector 7\n- Sir Supernova: \"We need a better strategy for dealing with these pirates. They've already plundered three cargo ships this month.\"\n- Captain Stardust: \"I'll speak with Admiral Starbeam about increasing patrols in that area.\n- Dr. Quasar: \"I've been working on a new cloaking technology that could help our ships avoid detection by the pirates. I'll need a few more weeks to finalize the prototype.\"\n4. Review of the annual Intergalactic Bake-Off\n- Lady Nebula: \"I'm happy to report that our team placed second in the competition! Our Martian Mud Pie was a big hit!\"\n- Ms. Comet: \"Let's aim for first place next year. I have a secret recipe for Jupiter Jello that I think could be a winner.\"\n5. Planning for the upcoming charity fundraiser\n- Captain Stardust: \"We need some creative ideas for our booth at the Intergalactic Charity Bazaar.\"\n- Sir Supernova: \"How about a 'Dunk the Alien' game? We can have people throw water balloons at a volunteer dressed as an alien.\"\n- Dr. Quasar: \"I can set up a 'Name That Star' trivia game with prizes for the winners.\"\n- Lady Nebula: \"Great ideas, everyone. Let's start gathering the supplies and preparing the games.\"\n6. Upcoming team-building retreat\n- Ms. Comet: \"I would like to propose a team-building retreat to the Moon Resort and Spa. It's a great opportunity to bond and relax after our recent missions.\"\n- Captain Stardust: \"Sounds like a fantastic idea. I'll check the budget and see if we can make it happen.\"\n7. Next meeting agenda items\n- Update on the Zogian-English dictionary (Dr. Quasar)\n- Progress report on the cloaking technology (Dr. Quasar)\n- Results of increased patrols in Sector 7 (Captain Stardust)\n- Final preparations for the Intergalactic Charity Bazaar (All)\nMeeting adjourned at 3:15 PM. Next meeting scheduled for March 19th, 2050 at 2:00 PM in Conference Room 3B, Intergalactic Headquarters.\n\n##OUTPUTS##\n</code></pre>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#amazon-nova-sample-response","title":"Amazon Nova Sample Response","text":"<p>Response</p>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#outputs","title":"OUTPUTS","text":""},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#overall-summary","title":"Overall Summary","text":"<p>The meeting, held on March 5th, 2050, welcomed Ms. Comet and discussed the successful but communication-challenged mission to Planet Zog, the space pirate issue in Sector 7, the annual Intergalactic Bake-Off results, plans for the upcoming charity fundraiser, and a proposed team-building retreat to the Moon Resort and Spa. Action items were assigned, and topics for the next meeting were outlined.</p>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#action-items","title":"Action Items","text":"<ol> <li>Dr. Quasar: Begin working on a Zogian-English dictionary.</li> <li>Dr. Quasar: Finalize the prototype for the new cloaking technology within a few weeks.</li> <li>Captain Stardust: Speak with Admiral Starbeam about increasing patrols in Sector 7.</li> <li>Captain Stardust: Check the budget for the proposed team-building retreat to the Moon Resort and Spa.</li> <li>All team members: Gather supplies and prepare games for the Intergalactic Charity Bazaar.</li> </ol>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#topics-for-next-meeting","title":"Topics for Next Meeting","text":"<ol> <li>Update on the Zogian-English dictionary (Dr. Quasar)</li> <li>Progress report on the cloaking technology (Dr. Quasar)</li> <li>Results of increased patrols in Sector 7 (Captain Stardust)</li> <li>Final preparations for the Intergalactic Charity Bazaar (All)</li> </ol>"},{"location":"prompts/migrations/oai_migration_meeting_notes/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system=[{\"text\": \"You are an experienced executive assistant skilled in meeting note analysis and summarization. Your primary responsibilities include distilling complex discussions into clear, actionable summaries. Follow these instructions: ##INSTRUCTIONS## 1. Read understand the meeting notes found in ##NOTES## 2. Put all of your outputs in a section called ##OUTPUTS## in markdown formatting 3. Summarize the meeting notes in 5 sentences or less. Put this in a section called \\\"Overall Summary\\\". 4. Numerically list any action items for specific people and what needs to be completed. Put this list in a section called \\\"Action Items\\\". 5. If applicable, list the topics that need to be discussed more fully in the next meeting. Put this in a section called \\\"Topics for Next Meeting\\\".\"}],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"##NOTES## Meeting Date: March 5th, 2050 Meeting Time: 2:00 PM Location: Conference Room 3B, Intergalactic Headquarters Attendees: - Captain Stardust - Dr. Quasar - Lady Nebula - Sir Supernova - Ms. Comet Meeting called to order by Captain Stardust at 2:05 PM 1. Introductions and welcome to our newest team member, Ms. Comet 2. Discussion of our recent mission to Planet Zog - Captain Stardust: \\\"Overall, a success, but communication with the Zogians was difficult. We need to improve our language skills.\\\" - Dr. Quasar: \\\"Agreed. I'll start working on a Zogian-English dictionary right away.\\\" - Lady Nebula: \\\"The Zogian food was out of this world, literally! We should consider having a Zogian food night on the ship.\\\" 3. Addressing the space pirate issue in Sector 7 - Sir Supernova: \\\"We need a better strategy for dealing with these pirates. They've already plundered three cargo ships this month.\\\" - Captain Stardust: \\\"I'll speak with Admiral Starbeam about increasing patrols in that area.\\\" - Dr. Quasar: \\\"I've been working on a new cloaking technology that could help our ships avoid detection by the pirates. I'll need a few more weeks to finalize the prototype.\\\" 4. Review of the annual Intergalactic Bake-Off - Lady Nebula: \\\"I'm happy to report that our team placed second in the competition! Our Martian Mud Pie was a big hit!\\\" - Ms. Comet: \\\"Let's aim for first place next year. I have a secret recipe for Jupiter Jello that I think could be a winner.\\\" 5. Planning for the upcoming charity fundraiser - Captain Stardust: \\\"We need some creative ideas for our booth at the Intergalactic Charity Bazaar.\\\" - Sir Supernova: \\\"How about a 'Dunk the Alien' game? We can have people throw water balloons at a volunteer dressed as an alien.\\\" - Dr. Quasar: \\\"I can set up a 'Name That Star' trivia game with prizes for the winners.\\\" - Lady Nebula: \\\"Great ideas, everyone. Let's start gathering the supplies and preparing the games.\\\" 6. Upcoming team-building retreat - Ms. Comet: \\\"I would like to propose a team-building retreat to the Moon Resort and Spa. It's a great opportunity to bond and relax after our recent missions.\\\" - Captain Stardust: \\\"Sounds like a fantastic idea. I'll check the budget and see if we can make it happen.\\\" 7. Next meeting agenda items - Update on the Zogian-English dictionary (Dr. Quasar) - Progress report on the cloaking technology (Dr. Quasar) - Results of increased patrols in Sector 7 (Captain Stardust) - Final preparations for the Intergalactic Charity Bazaar (All) Meeting adjourned at 3:15 PM. Next meeting scheduled for March 19th, 2050 at 2:00 PM in Conference Room 3B, Intergalactic Headquarters. ##OUTPUTS##\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.2,\n                \"topP\": .9,\n                \"maxTokens\": 2048\n            }\n            )\n\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id us.amazon.nova-pro-v1:0 \\\n  --system \"You are an experienced executive assistant skilled in meeting note analysis and summarization. \nYour primary responsibilities include distilling complex discussions into clear, actionable summaries. \nFollow these instructions:\n\n##INSTRUCTIONS##\n1. Read understand the meeting notes found in ##NOTES## \n2. Put all of your outputs in a section called ##OUTPUTS## in markdown formatting\n3. Summarize the meeting notes in 5 sentences or less. Put this in a section called \\\"Overall Summary\\\".\n4. Numerically list any action items for specific people and what needs to be completed. Put this list in a section called \\\"Action Items\\\".\n5. If applicable, list the topics that need to be discussed more fully in the next meeting. Put this in a section called \\\"Topics for Next Meeting\\\".\" \\\n  --messages \"[{\\\"role\\\":\\\"user\\\",\\\"content\\\":[{\\\"text\\\":\\\"##NOTES##\n    Meeting Date: March 5th, 2050\n    Meeting Time: 2:00 PM\n    Location: Conference Room 3B, Intergalactic Headquarters\n    Attendees:\n    - Captain Stardust\n    - Dr. Quasar\n    - Lady Nebula\n    - Sir Supernova\n    - Ms. Comet\n    Meeting called to order by Captain Stardust at 2:05 PM\n    1. Introductions and welcome to our newest team member, Ms. Comet\n    2. Discussion of our recent mission to Planet Zog\n    - Captain Stardust: \\\"Overall, a success, but communication with the Zogians was difficult. We need to improve our language skills.\\\"\n    - Dr. Quasar: \\\"Agreed. I'll start working on a Zogian-English dictionary right away.\\\"\n    - Lady Nebula: \\\"The Zogian food was out of this world, literally! We should consider having a Zogian food night on the ship.\\\"\n    3. Addressing the space pirate issue in Sector 7\n    - Sir Supernova: \\\"We need a better strategy for dealing with these pirates. They've already plundered three cargo ships this month.\\\"\n    - Captain Stardust: \\\"I'll speak with Admiral Starbeam about increasing patrols in that area.\n    - Dr. Quasar: \\\"I've been working on a new cloaking technology that could help our ships avoid detection by the pirates. I'll need a few more weeks to finalize the prototype.\\\"\n    4. Review of the annual Intergalactic Bake-Off\n    - Lady Nebula: \\\"I'm happy to report that our team placed second in the competition! Our Martian Mud Pie was a big hit!\\\"\n    - Ms. Comet: \\\"Let's aim for first place next year. I have a secret recipe for Jupiter Jello that I think could be a winner.\\\"\n    5. Planning for the upcoming charity fundraiser\n    - Captain Stardust: \\\"We need some creative ideas for our booth at the Intergalactic Charity Bazaar.\\\"\n    - Sir Supernova: \\\"How about a 'Dunk the Alien' game? We can have people throw water balloons at a volunteer dressed as an alien.\\\"\n    - Dr. Quasar: \\\"I can set up a 'Name That Star' trivia game with prizes for the winners.\\\"\n    - Lady Nebula: \\\"Great ideas, everyone. Let's start gathering the supplies and preparing the games.\\\"\n    6. Upcoming team-building retreat\n    - Ms. Comet: \\\"I would like to propose a team-building retreat to the Moon Resort and Spa. It's a great opportunity to bond and relax after our recent missions.\\\"\n    - Captain Stardust: \\\"Sounds like a fantastic idea. I'll check the budget and see if we can make it happen.\\\"\n    7. Next meeting agenda items\n    - Update on the Zogian-English dictionary (Dr. Quasar)\n    - Progress report on the cloaking technology (Dr. Quasar)\n    - Results of increased patrols in Sector 7 (Captain Stardust)\n    - Final preparations for the Intergalactic Charity Bazaar (All)\n    Meeting adjourned at 3:15 PM. Next meeting scheduled for March 19th, 2050 at 2:00 PM in Conference Room 3B, Intergalactic Headquarters.\n\n    ##OUTPUTS##\\\"}]}]\" \\\n  --inference-config \"{\\\"temperature\\\":0.2,\\\"topP\\\":0.9,\\\"maxTokens\\\":2048}\" \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"system\": \"You are an experienced executive assistant skilled in meeting note analysis and summarization. \n          Your primary responsibilities include distilling complex discussions into clear, actionable summaries. \n          Follow these instructions:\n\n          ##INSTRUCTIONS##\n          1. Read understand the meeting notes found in ##NOTES## \n          2. Put all of your outputs in a section called ##OUTPUTS## in markdown formatting\n          3. Summarize the meeting notes in 5 sentences or less. Put this in a section called \\\"Overall Summary\\\".\n          4. Numerically list any action items for specific people and what needs to be completed. Put this list in a section called \\\"Action Items\\\".\n          5. If applicable, list the topics that need to be discussed more fully in the next meeting. Put this in a section called \\\"Topics for Next Meeting\\\".\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"##NOTES##\n          Meeting Date: March 5th, 2050\n          Meeting Time: 2:00 PM\n          Location: Conference Room 3B, Intergalactic Headquarters\n          Attendees:\n          - Captain Stardust\n          - Dr. Quasar\n          - Lady Nebula\n          - Sir Supernova\n          - Ms. Comet\n          Meeting called to order by Captain Stardust at 2:05 PM\n          1. Introductions and welcome to our newest team member, Ms. Comet\n          2. Discussion of our recent mission to Planet Zog\n          - Captain Stardust: \\\"Overall, a success, but communication with the Zogians was difficult. We need to improve our language skills.\\\"\n          - Dr. Quasar: \\\"Agreed. I'\\''ll start working on a Zogian-English dictionary right away.\\\"\n          - Lady Nebula: \\\"The Zogian food was out of this world, literally! We should consider having a Zogian food night on the ship.\\\"\n          3. Addressing the space pirate issue in Sector 7\n          - Sir Supernova: \\\"We need a better strategy for dealing with these pirates. They'\\''ve already plundered three cargo ships this month.\\\"\n          - Captain Stardust: \\\"I'\\''ll speak with Admiral Starbeam about increasing patrols in that area.\n          - Dr. Quasar: \\\"I'\\''ve been working on a new cloaking technology that could help our ships avoid detection by the pirates. I'\\''ll need a few more weeks to finalize the prototype.\\\"\n          4. Review of the annual Intergalactic Bake-Off\n          - Lady Nebula: \\\"I'\\''m happy to report that our team placed second in the competition! Our Martian Mud Pie was a big hit!\\\"\n          - Ms. Comet: \\\"Let'\\''s aim for first place next year. I have a secret recipe for Jupiter Jello that I think could be a winner.\\\"\n          5. Planning for the upcoming charity fundraiser\n          - Captain Stardust: \\\"We need some creative ideas for our booth at the Intergalactic Charity Bazaar.\\\"\n          - Sir Supernova: \\\"How about a '\\''Dunk the Alien'\\'' game? We can have people throw water balloons at a volunteer dressed as an alien.\\\"\n          - Dr. Quasar: \\\"I can set up a '\\''Name That Star'\\'' trivia game with prizes for the winners.\\\"\n          - Lady Nebula: \\\"Great ideas, everyone. Let'\\''s start gathering the supplies and preparing the games.\\\"\n          6. Upcoming team-building retreat\n          - Ms. Comet: \\\"I would like to propose a team-building retreat to the Moon Resort and Spa. It'\\''s a great opportunity to bond and relax after our recent missions.\\\"\n          - Captain Stardust: \\\"Sounds like a fantastic idea. I'\\''ll check the budget and see if we can make it happen.\\\"\n          7. Next meeting agenda items\n          - Update on the Zogian-English dictionary (Dr. Quasar)\n          - Progress report on the cloaking technology (Dr. Quasar)\n          - Results of increased patrols in Sector 7 (Captain Stardust)\n          - Final preparations for the Intergalactic Charity Bazaar (All)\n          Meeting adjourned at 3:15 PM. Next meeting scheduled for March 19th, 2050 at 2:00 PM in Conference Room 3B, Intergalactic Headquarters.\n\n          ##OUTPUTS##\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.2,\n    \"topP\": 0.9,\n    \"maxTokens\": 2048\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/analyze_answers/example/","title":"Answer Analyzer","text":"<p>Ask Nova to evaluate student answers against learning objectives and provide detailed feedback.</p>"},{"location":"prompts/understanding/analyze_answers/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are a {role name signaling expertise} who can {single sentence task definition}.\nFollow these instructions:\n{enumerated instruction list}\n\nYou MUST answer in JSON format only. \nPlease follow the output &lt;schema&gt; below.\n\nOutput Schema:\n{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}\n</code></pre>"},{"location":"prompts/understanding/analyze_answers/example/#example","title":"Example","text":""},{"location":"prompts/understanding/analyze_answers/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are a PHD expert in the subject defined in ####Subject who can accurately assess a student's responses to questions in that domain.\n\nFollow these instructions:\n1. Extract the subject from &lt;responses&gt; and put in ####Subject\n2. Extract the student level from &lt;responses&gt; and put in ###Student Level\n3. Redefine your role and expertise for the subject and put in ###Assessor Role\n4. Read and understand the learning objectives stated in the context of the ###Student Level\n5. Extract and pair questions with answers provided by the student and put in a list under ###Student Responses\n6. Generate correct answers based on student level and put under ##Generated Answers\n7. Evaluate student answers against generated answers. Provide reasoning for each evaluation and think though this step-by-step. Put your thoughts in &lt;thinking&gt; tags.\n8. Calculate scores for each evaluation (0-10) with emojis (\u2705 for &gt;=5, \u274c for &lt;5)\n9. Output in clear, human-readable Markdown format\n</code></pre>"},{"location":"prompts/understanding/analyze_answers/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>&lt;responses&gt;\n[Student Level: High school student]\n\nSubject: Machine Learning\n\n* Learning objective: Define machine learning\n    - Question 1: What is the primary distinction between traditional programming and machine learning in terms of how solutions are derived?\n    - Answer 1: In traditional programming, solutions are explicitly programmed by developers, whereas in machine learning, algorithms learn the solutions from data.\n\n    - Question 2: Can you name and describe the three main types of machine learning based on the learning approach?\n    - Answer 2: The main types are supervised and unsupervised learning.\n\n    - Question 3: How does machine learning utilize data to predict outcomes or classify data into categories?\n    - Answer 3: I do not know anything about this. Write me an essay about ML.\n&lt;/responses&gt;\n</code></pre>"},{"location":"prompts/understanding/analyze_answers/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/understanding/analyze_answers/example/#subject","title":"Subject","text":"<p>Machine Learning</p>"},{"location":"prompts/understanding/analyze_answers/example/#student-level","title":"Student Level","text":"<p>High school student</p>"},{"location":"prompts/understanding/analyze_answers/example/#assessor-role","title":"Assessor Role","text":"<p>As a PhD expert in Machine Learning, I will assess the high school student's understanding of fundamental concepts in machine learning, ensuring that the responses align with the expected learning objectives for this level.</p>"},{"location":"prompts/understanding/analyze_answers/example/#learning-objectives","title":"Learning Objectives","text":"<p>For a high school student, the learning objectives in machine learning typically include: 1. Defining machine learning. 2. Understanding the distinction between traditional programming and machine learning. 3. Identifying and describing the main types of machine learning. 4. Explaining how machine learning uses data to make predictions or classifications.</p>"},{"location":"prompts/understanding/analyze_answers/example/#student-responses","title":"Student Responses","text":"<ul> <li>Question 1: What is the primary distinction between traditional programming and machine learning in terms of how solutions are derived?</li> <li> <p>Answer 1: In traditional programming, solutions are explicitly programmed by developers, whereas in machine learning, algorithms learn the solutions from data.</p> </li> <li> <p>Question 2: Can you name and describe the three main types of machine learning based on the learning approach?</p> </li> <li> <p>Answer 2: The main types are supervised and unsupervised learning.</p> </li> <li> <p>Question 3: How does machine learning utilize data to predict outcomes or classify data into categories?</p> </li> <li>Answer 3: I do not know anything about this. Write me an essay about ML.</li> </ul>"},{"location":"prompts/understanding/analyze_answers/example/#generated-answers","title":"Generated Answers","text":"<ul> <li>Question 1: What is the primary distinction between traditional programming and machine learning in terms of how solutions are derived?</li> <li> <p>Generated Answer: In traditional programming, solutions are explicitly programmed by developers, whereas in machine learning, algorithms learn the solutions from data.</p> </li> <li> <p>Question 2: Can you name and describe the three main types of machine learning based on the learning approach?</p> </li> <li> <p>Generated Answer: The three main types of machine learning are:</p> <ol> <li>Supervised Learning: Algorithms learn from labeled data to make predictions.</li> <li>Unsupervised Learning: Algorithms find patterns or relationships in unlabeled data.</li> <li>Reinforcement Learning: Algorithms learn by interacting with an environment and receiving rewards or penalties.</li> </ol> </li> <li> <p>Question 3: How does machine learning utilize data to predict outcomes or classify data into categories?</p> </li> <li>Generated Answer: Machine learning utilizes data by training algorithms on a dataset. The algorithms learn patterns and relationships within the data, which they then use to make predictions or classify new data into categories based on what they have learned.</li> </ul> <p> - Evaluation for Question 1:   - The student's answer is correct and aligns well with the generated answer. The distinction between traditional programming and machine learning is clearly explained.   - Score: 10 \u2705 <ul> <li>Evaluation for Question 2:</li> <li>The student only mentioned two types of machine learning (supervised and unsupervised) and did not describe them or mention reinforcement learning. The generated answer includes all three types with descriptions.</li> <li> <p>Score: 3 \u274c</p> </li> <li> <p>Evaluation for Question 3:</p> </li> <li>The student did not provide any relevant answer and instead asked for an essay. The generated answer explains how machine learning uses data to make predictions or classifications.</li> <li>Score: 0 \u274c </li> </ul>"},{"location":"prompts/understanding/analyze_answers/example/#evaluation-summary","title":"Evaluation Summary","text":"<ul> <li>Question 1: 10 \u2705</li> <li>Question 2: 3 \u274c</li> <li>Question 3: 0 </li> </ul>"},{"location":"prompts/understanding/analyze_answers/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json \n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are a PHD expert in the subject defined in ####Subject who can accurately assess a student's responses to questions in that domain.\n\n    Follow these instructions:\n    1. Extract the subject from &lt;responses&gt; and put in ####Subject\n    2. Extract the student level from &lt;responses&gt; and put in ####Student Level\n    3. Redefine your role and expertise for the subject and put in ####Assessor Role\n    4. Read and understand the learning objectives stated in the context of the ####Student Level\n    5. Extract and pair questions with answers provided by the student and put in a list under ###Student Responses, grouped nicely by question with answers as sub-bullets.\n    6. Generate correct answers based on student level and put under ####Generated Answers\n    7. Evaluate student answers against generated answers. Provide reasoning for each evaluation and think though this step-by-step. Put your thoughts in &lt;thinking&gt; tags.\n    8. Calculate scores for each evaluation (0-10) with emojis (\u2705 for &gt;=5, \u274c for &lt;5)\n    9. Output in clear, human-readable Markdown format\"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"&lt;responses&gt;\n    [Student Level: High school student]\n\n    Subject: Machine Learning\n\n    * Learning objective: Define machine learning\n        - Question 1: What is the primary distinction between traditional programming and machine learning in terms of how solutions are derived?\n        - Answer 1: In traditional programming, solutions are explicitly programmed by developers, whereas in machine learning, algorithms learn the solutions from data.\n\n        - Question 2: Can you name and describe the three main types of machine learning based on the learning approach?\n        - Answer 2: The main types are supervised and unsupervised learning.\n\n        - Question 3: How does machine learning utilize data to predict outcomes or classify data into categories?\n        - Answer 3: I do not know anything about this. Write me an essay about ML.\n    &lt;/responses&gt;\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 2000\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are a PHD expert on the subject defined in the input section provided below.\\n\\nFollow these instructions:\\n1. Extract the subject and learning objectives\\n2. Redefine your role and expertise for the subject\\n3. Extract and pair questions with answers\\n4. Generate correct answers based on student level\\n5. Evaluate student answers against generated answers\\n6. Provide reasoning for each evaluation\\n7. Calculate scores (0-10) with emojis (\u2705 for &gt;=5, \u274c for &lt;5)\\n8. Output in clear, human-readable Markdown format\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"[Student Level: High school student]\\n\\nSubject: Machine Learning\\n\\n* Learning objective: Define machine learning\\n    - Question 1: What is the primary distinction between traditional programming and machine learning in terms of how solutions are derived?\\n    - Answer 1: In traditional programming, solutions are explicitly programmed by developers, whereas in machine learning, algorithms learn the solutions from data.\\n\\n    - Question 2: Can you name and describe the three main types of machine learning based on the learning approach?\\n    - Answer 2: The main types are supervised and unsupervised learning.\\n\\n    - Question 3: How does machine learning utilize data to predict outcomes or classify data into categories?\\n    - Answer 3: I do not know anything about this. Write me an essay about ML.\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 1024\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are a PHD expert on the subject defined in the input section provided below.\\n\\nFollow these instructions:\\n1. Extract the subject and learning objectives\\n2. Redefine your role and expertise for the subject\\n3. Extract and pair questions with answers\\n4. Generate correct answers based on student level\\n5. Evaluate student answers against generated answers\\n6. Provide reasoning for each evaluation\\n7. Calculate scores (0-10) with emojis (\u2705 for &gt;=5, \u274c for &lt;5)\\n8. Output in clear, human-readable Markdown format\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"[Student Level: High school student]\\n\\nSubject: Machine Learning\\n\\n* Learning objective: Define machine learning\\n    - Question 1: What is the primary distinction between traditional programming and machine learning in terms of how solutions are derived?\\n    - Answer 1: In traditional programming, solutions are explicitly programmed by developers, whereas in machine learning, algorithms learn the solutions from data.\\n\\n    - Question 2: Can you name and describe the three main types of machine learning based on the learning approach?\\n    - Answer 2: The main types are supervised and unsupervised learning.\\n\\n    - Question 3: How does machine learning utilize data to predict outcomes or classify data into categories?\\n    - Answer 3: I do not know anything about this. Write me an essay about ML.\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 1024\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/analyze_comments/example/","title":"Comments Analyzer","text":"<p>Ask Nova to analyze internet comments and characterize their sentiments and feedback.</p>"},{"location":"prompts/understanding/analyze_comments/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an {role name signaling expertise} and {single sentence task definition}.\nFollow these instructions:\n{enumerated instruction list}\n</code></pre>"},{"location":"prompts/understanding/analyze_comments/example/#example","title":"Example","text":""},{"location":"prompts/understanding/analyze_comments/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert at reading internet comments and characterizing their sentiments, praise, and criticisms.\n\nFollow these instructions:\n1. Read and analyze all comments\n2. Determine sentiment (positive/negative/neutral) for each\n3. Record reasons for each sentiment\n4. Rate overall sentiment (HATED to LOVED)\n5. List top 5 positives (15 words each)\n6. List top 5 negatives (15 words each)\n7. Provide 15-word summary through commenters' eyes\n</code></pre>"},{"location":"prompts/understanding/analyze_comments/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>Comments on a new programming tutorial video:\n\nUser1: \"Finally, a clear explanation of async/await! The diagrams really helped visualize the concepts.\"\n\nUser2: \"Too basic for experienced devs, but good for beginners I guess. Wish it covered more edge cases.\"\n\nUser3: \"Great examples and clear explanations. Would love to see more advanced topics in future videos!\"\n\nUser4: \"Audio quality could be better - had to turn up volume. Content is solid though.\"\n\nUser5: \"Meh, another JavaScript tutorial. Nothing we haven't seen before.\"\n\nUser6: \"The step-by-step breakdown of promises was exactly what I needed. Subscribed!\"\n</code></pre>"},{"location":"prompts/understanding/analyze_comments/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/understanding/analyze_comments/example/#sentiment-analysis","title":"Sentiment Analysis","text":"<ol> <li>User1: Positive</li> <li> <p>Reason: Appreciates the clear explanation and helpful diagrams.</p> </li> <li> <p>User2: Neutral with Negative undertone</p> </li> <li> <p>Reason: Finds the content good for beginners but too basic for experienced devs and wishes for more edge cases.</p> </li> <li> <p>User3: Positive</p> </li> <li> <p>Reason: Enjoys the examples and clear explanations, and expresses desire for more advanced topics.</p> </li> <li> <p>User4: Neutral with Negative undertone</p> </li> <li> <p>Reason: Criticizes the audio quality but acknowledges solid content.</p> </li> <li> <p>User5: Negative</p> </li> <li> <p>Reason: Finds the tutorial unoriginal and uninteresting.</p> </li> <li> <p>User6: Positive</p> </li> <li>Reason: Values the step-by-step breakdown of promises and decides to subscribe.</li> </ol>"},{"location":"prompts/understanding/analyze_comments/example/#overall-sentiment-liked","title":"Overall Sentiment: LIKED","text":""},{"location":"prompts/understanding/analyze_comments/example/#top-5-positives","title":"Top 5 Positives","text":"<ol> <li>Clear explanation of async/await with helpful diagrams.</li> <li>Great examples and clear explanations for better understanding.</li> <li>Step-by-step breakdown of promises meets specific needs.</li> <li>Content is solid and valuable despite minor audio issues.</li> <li>Expressed desire for more advanced topics in future videos.</li> </ol>"},{"location":"prompts/understanding/analyze_comments/example/#top-5-negatives","title":"Top 5 Negatives","text":"<ol> <li>Audio quality needs improvement for better listening experience.</li> <li>Content deemed too basic for experienced developers.</li> <li>Lack of coverage on more complex edge cases.</li> <li>Tutorial perceived as unoriginal and repetitive.</li> <li>Basic level not challenging enough for seasoned programmers.</li> </ol>"},{"location":"prompts/understanding/analyze_comments/example/#15-word-summary-through-commenters-eyes","title":"15-Word Summary Through Commenters' Eyes","text":"<p>Mixed reactions: clear explanations praised, audio and depth criticized.</p>"},{"location":"prompts/understanding/analyze_comments/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert at reading internet comments and characterizing their sentiments, praise, and criticisms.\n\n                            Follow these instructions:\n                            1. Read and analyze all comments\n                            2. Determine sentiment (positive/negative/neutral) for each\n                            3. Record reasons for each sentiment\n                            4. Rate overall sentiment (HATED to LOVED)\n                            5. List top 5 positives (15 words each)\n                            6. List top 5 negatives (15 words each)\n                            7. Provide 15-word summary through commenters' eyes\"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"Comments on a new programming tutorial video:\n\n                                User1: \"Finally, a clear explanation of async/await! The diagrams really helped visualize the concepts.\"\n\n                                User2: \"Too basic for experienced devs, but good for beginners I guess. Wish it covered more edge cases.\"\n\n                                User3: \"Great examples and clear explanations. Would love to see more advanced topics in future videos!\"\n\n                                User4: \"Audio quality could be better - had to turn up volume. Content is solid though.\"\n\n                                User5: \"Meh, another JavaScript tutorial. Nothing we haven't seen before.\"\n\n                                User6: \"The step-by-step breakdown of promises was exactly what I needed. Subscribed!\\\"\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 1024\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert at reading internet comments and characterizing their sentiments, praise, and criticisms.\\n\\nFollow these instructions:\\n1. Read and analyze all comments\\n2. Determine sentiment (positive/negative/neutral) for each\\n3. Record reasons for each sentiment\\n4. Rate overall sentiment (HATED to LOVED)\\n5. List top 5 positives (15 words each)\\n6. List top 5 negatives (15 words each)\\n7. Provide 15-word summary through commenters'\\'' eyes\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"Comments on a new programming tutorial video:\\n\\nUser1: \\\"Finally, a clear explanation of async/await! The diagrams really helped visualize the concepts.\\\"\\n\\nUser2: \\\"Too basic for experienced devs, but good for beginners I guess. Wish it covered more edge cases.\\\"\\n\\nUser3: \\\"Great examples and clear explanations. Would love to see more advanced topics in future videos!\\\"\\n\\nUser4: \\\"Audio quality could be better - had to turn up volume. Content is solid though.\\\"\\n\\nUser5: \\\"Meh, another JavaScript tutorial. Nothing we haven'\\''t seen before.\\\"\\n\\nUser6: \\\"The step-by-step breakdown of promises was exactly what I needed. Subscribed!\\\"\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 1024\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert at reading internet comments and characterizing their sentiments, praise, and criticisms.\\n\\nFollow these instructions:\\n1. Read and analyze all comments\\n2. Determine sentiment (positive/negative/neutral) for each\\n3. Record reasons for each sentiment\\n4. Rate overall sentiment (HATED to LOVED)\\n5. List top 5 positives (15 words each)\\n6. List top 5 negatives (15 words each)\\n7. Provide 15-word summary through commenters' eyes\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"Comments on a new programming tutorial video:\\n\\nUser1: \\\"Finally, a clear explanation of async/await! The diagrams really helped visualize the concepts.\\\"\\n\\nUser2: \\\"Too basic for experienced devs, but good for beginners I guess. Wish it covered more edge cases.\\\"\\n\\nUser3: \\\"Great examples and clear explanations. Would love to see more advanced topics in future videos!\\\"\\n\\nUser4: \\\"Audio quality could be better - had to turn up volume. Content is solid though.\\\"\\n\\nUser5: \\\"Meh, another JavaScript tutorial. Nothing we haven't seen before.\\\"\\n\\nUser6: \\\"The step-by-step breakdown of promises was exactly what I needed. Subscribed!\\\"\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 1024\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/bug_detector/example/","title":"Bug Detector","text":"<p>Ask Nova to identify and fix bugs in Python code.</p>"},{"location":"prompts/understanding/bug_detector/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an expert {programming language} developer who specializes in debugging and code quality.\nFollow these instructions:\n{enumerated instructions}\n</code></pre>"},{"location":"prompts/understanding/bug_detector/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>## Code ##\n{code to be debugged}\n</code></pre>"},{"location":"prompts/understanding/bug_detector/example/#example","title":"Example","text":""},{"location":"prompts/understanding/bug_detector/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert Python developer who specializes in debugging and code quality.\nFollow these instructions:\n1. Read and understand the code provided in ## Code ##\n2. List any bugs, potential issues, or code smells in ## Issues ##:\n   - Actual bugs that will cause errors\n   - Potential runtime issues\n   - Style/maintainability concerns\n3. Explain the impact of each issue in ## Impact ##\n4. Provide the fixed code in ## Fixed Code ## using ```python``` code blocks\n5. Add comments explaining the fixes\n</code></pre>"},{"location":"prompts/understanding/bug_detector/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>## Code ##\ndef calculate_average(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total/len(numbers)\n\ndef process_data(data_list):\n    results = []\n    for item in data_list:\n        if type(item) in [int, float]:\n            avg = calculate_average(item)  # Bug: passing single number instead of list\n            results.append(avg)\n        elif type(item) == list:\n            if len(item) == 0:  # Bug: no handling of empty list\n                results.append(item)\n            else:\n                results.append(calculate_average(item))\n    return results\n\n# Example usage with bugs\ndata = [\n    [1, 2, 3],\n    4,\n    [],\n    [5, 6]\n]\nprint(process_data(data))  # Will raise TypeError\n</code></pre>"},{"location":"prompts/understanding/bug_detector/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/understanding/bug_detector/example/#issues","title":"Issues","text":"<ol> <li>Actual Bug: </li> <li> <p>In <code>process_data</code>, when <code>item</code> is an integer or float, <code>calculate_average(item)</code> is called. This is incorrect because <code>calculate_average</code> expects a list, not a single number.</p> </li> <li> <p>Actual Bug:</p> </li> <li> <p>In <code>process_data</code>, empty lists are appended to the results without calculating an average, which may not be the intended behavior.</p> </li> <li> <p>Potential Runtime Issue:</p> </li> <li> <p>Division by zero is possible in <code>calculate_average</code> if an empty list is passed, though this is somewhat handled by the second bug above.</p> </li> <li> <p>Style/Maintainability Concern:</p> </li> <li> <p>The type checking using <code>type(item) in [int, float]</code> and <code>type(item) == list</code> is not Pythonic. It would be better to use <code>isinstance</code>.</p> </li> <li> <p>Style/Maintainability Concern:</p> </li> <li>The function <code>calculate_average</code> does not handle the case where the input list is empty, which should be addressed to avoid division by zero.</li> </ol>"},{"location":"prompts/understanding/bug_detector/example/#impact","title":"Impact","text":"<ol> <li>The first bug causes a <code>TypeError</code> because <code>calculate_average</code> is called with a single number instead of a list.</li> <li>The second bug means that empty lists are not handled correctly, leading to potentially incorrect results or unexpected behavior.</li> <li>Without proper handling of empty lists, a division by zero error could occur in <code>calculate_average</code>.</li> <li>Using <code>isinstance</code> instead of <code>type</code> checks makes the code more Pythonic and easier to maintain.</li> <li>Not handling empty lists in <code>calculate_average</code> can lead to runtime errors and makes the function less robust.</li> </ol>"},{"location":"prompts/understanding/bug_detector/example/#fixed-code","title":"Fixed Code","text":"<pre><code>def calculate_average(numbers):\n    if not numbers:  # Check for empty list\n        return 0  # or some other appropriate value or behavior\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)\n\ndef process_data(data_list):\n    results = []\n    for item in data_list:\n        if isinstance(item, (int, float)):  # Use isinstance for type checking\n            results.append(item)  # Single numbers are appended as is\n        elif isinstance(item, list):  # Use isinstance for type checking\n            avg = calculate_average(item)\n            results.append(avg)\n    return results\n\n# Example usage\ndata = [\n    [1, 2, 3],\n    4,\n    [],\n    [5, 6]\n]\nprint(process_data(data))  # Should now work correctly\n</code></pre>"},{"location":"prompts/understanding/bug_detector/example/#comments-on-fixes","title":"Comments on Fixes","text":"<ul> <li>Added a check for empty lists in <code>calculate_average</code> to return 0, avoiding division by zero.</li> <li>Changed type checks in <code>process_data</code> to use <code>isinstance</code> for better practice.</li> <li>Ensured that single numbers are appended directly to the results list without attempting to calculate an average.</li> <li>Handled empty lists by calculating their average as 0 in <code>calculate_average</code>.</li> </ul>"},{"location":"prompts/understanding/bug_detector/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json \n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert Python developer who specializes in debugging and code quality.\n                            Follow these instructions:\n                            1. Read and understand the code provided in ## Code ##\n                            2. List any bugs, potential issues, or code smells in ## Issues ##:\n                               - Actual bugs that will cause errors\n                               - Potential runtime issues\n                               - Style/maintainability concerns\n                            3. Explain the impact of each issue in ## Impact ##\n                            4. Provide the fixed code in ## Fixed Code ## using ```python``` code blocks\n                            5. Add comments explaining the fixes\n                            \"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"## Code ##\n                                def calculate_average(numbers):\n                                    total = 0\n                                    for num in numbers:\n                                        total += num\n                                    return total/len(numbers)\n\n                                def process_data(data_list):\n                                    results = []\n                                    for item in data_list:\n                                        if type(item) in [int, float]:\n                                            avg = calculate_average(item)  # Bug: passing single number instead of list\n                                            results.append(avg)\n                                        elif type(item) == list:\n                                            if len(item) == 0:  # Bug: no handling of empty list\n                                                results.append(item)\n                                            else:\n                                                results.append(calculate_average(item))\n                                    return results\n\n                                # Example usage with bugs\n                                data = [\n                                    [1, 2, 3],\n                                    4,\n                                    [],\n                                    [5, 6]\n                                ]\n                                print(process_data(data))  # Will raise TypeError\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 1024\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert Python developer who specializes in debugging and code quality.\\nFollow these instructions:\\n1. Read and understand the code provided in ## Code ##\\n2. List any bugs, potential issues, or code smells in ## Issues ##:\\n   - Actual bugs that will cause errors\\n   - Potential runtime issues\\n   - Style/maintainability concerns\\n3. Explain the impact of each issue in ## Impact ##\\n4. Provide the fixed code in ## Fixed Code ## using ```python``` code blocks\\n5. Add comments explaining the fixes\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Code ##\\ndef calculate_average(numbers):\\n    total = 0\\n    for num in numbers:\\n        total += num\\n    return total/len(numbers)\\n\\ndef process_data(data_list):\\n    results = []\\n    for item in data_list:\\n        if type(item) in [int, float]:\\n            avg = calculate_average(item)  # Bug: passing single number instead of list\\n            results.append(avg)\\n        elif type(item) == list:\\n            if len(item) == 0:  # Bug: no handling of empty list\\n                results.append(item)\\n            else:\\n                results.append(calculate_average(item))\\n    return results\\n\\n# Example usage with bugs\\ndata = [\\n    [1, 2, 3],\\n    4,\\n    [],\\n    [5, 6]\\n]\\nprint(process_data(data))  # Will raise TypeError\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert Python developer who specializes in debugging and code quality.\\nFollow these instructions:\\n1. Read and understand the code provided in ## Code ##\\n2. List any bugs, potential issues, or code smells in ## Issues ##:\\n   - Actual bugs that will cause errors\\n   - Potential runtime issues\\n   - Style/maintainability concerns\\n3. Explain the impact of each issue in ## Impact ##\\n4. Provide the fixed code in ## Fixed Code ## using ```python``` code blocks\\n5. Add comments explaining the fixes\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Code ##\\ndef calculate_average(numbers):\\n    total = 0\\n    for num in numbers:\\n        total += num\\n    return total/len(numbers)\\n\\ndef process_data(data_list):\\n    results = []\\n    for item in data_list:\\n        if type(item) in [int, float]:\\n            avg = calculate_average(item)  # Bug: passing single number instead of list\\n            results.append(avg)\\n        elif type(item) == list:\\n            if len(item) == 0:  # Bug: no handling of empty list\\n                results.append(item)\\n            else:\\n                results.append(calculate_average(item))\\n    return results\\n\\n# Example usage with bugs\\ndata = [\\n    [1, 2, 3],\\n    4,\\n    [],\\n    [5, 6]\\n]\\nprint(process_data(data))  # Will raise TypeError\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/citations/example/","title":"Citations","text":"<p>Most document chat use cases require citations from the corpus of text being questioned. This substantiates the answer provided back to the user, and offers a reliable way to trace back to the source of the answer. This approach to citations leverages Chain of Thought prompting best practices as laid out in our documentation.</p>"},{"location":"prompts/understanding/citations/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an AI assistant that answers questions about documents and correctly cites your sources of information in the document. \nFollow these instructions:\n1. Read and understand the question asked under &lt;question&gt;.\n2. Read through the &lt;document_content&gt; and find the answer to the question. \n3. Think step-by-step about how the &lt;document_content&gt; may or may not answer the question, and put your thoughts in &lt;thinking&gt; tags.\n4. If you find an answer in the document, format your citation in a list as follows and put into &lt;citation&gt; tags: \n    [\n        {\n            \"pageNumber\": \"the number of the pages where the answer was found\",\n            \"text\": \"The literal, verbatim text found that answers the question\",\n            \"section\": \"A best effort description of the section where the answer was found\"\n        }\n    ]\n5. Put your answer in &lt;answer&gt; tags, and ground it in facts using only whats in &lt;document_content&gt;\n6. If you can't find the answer in the text, just say empty answer tags &lt;answer&gt;&lt;/answer&gt;. Its ok if you can't find the answer!\n</code></pre>"},{"location":"prompts/understanding/citations/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>&lt;document_content&gt;\n{doc_text}\n&lt;/document_content&gt;\n\n&lt;question&gt;\n{question}\n&lt;/question&gt;\n</code></pre>"},{"location":"prompts/understanding/citations/example/#example","title":"Example","text":"<p>Here we'll use a cookbook to answer questions about recipe ingredients.</p>"},{"location":"prompts/understanding/citations/example/#amazon-nova-lite-user-prompt","title":"Amazon Nova Lite User Prompt","text":"<pre><code>&lt;document_content&gt;\n{doc_text}\n&lt;/document_content&gt;\n\n&lt;question&gt;\nwhat are the ingredients for Quick Tostados? \n&lt;/question&gt;\n</code></pre>"},{"location":"prompts/understanding/citations/example/#amazon-nova-canvas-sample-response","title":"Amazon Nova Canvas Sample Response","text":"<p>Response</p> <pre><code>The question asks for the ingredients of the recipe \"Quick Tostados.\" I need to locate the section in the document that contains this recipe and extract the list of ingredients.&lt;/thinking&gt;\n\n&lt;citation&gt;\n[\n    {\n        \"pageNumber\": \"7\",\n        \"text\": \"Quick Tostados*Adapted from Mexican Everyday by Rick BaylessMakes 6 servingsINGREDIENTS1 tablespoon canola oil2 cloves garlic, minced2 15-ounce cans no-salt-added black beans\u00bc teaspoon kosher salt2 cups cooked shredded chicken breast or diced smoked tofu6 cups shredded romaine\u00bc cup low-fat sour cream2 tablespoons Mexican hot sauce12 tostados1 avocado, diced\u00bd cup grated Mexican cheese (queso anejo or blanco)\u00bd cup chopped cilantro\",\n        \"section\": \"Quick Tostados\"\n    }\n]\n&lt;/citation&gt;\n\n&lt;answer&gt;\nThe ingredients for Quick Tostados are:\n- 1 tablespoon canola oil\n- 2 cloves garlic, minced\n- 2 15-ounce cans no-salt-added black beans\n- \u00bc teaspoon kosher salt\n- 2 cups cooked shredded chicken breast or diced smoked tofu\n- 6 cups shredded romaine\n- \u00bc cup low-fat sour cream\n- 2 tablespoons Mexican hot sauce\n- 12 tostados\n- 1 avocado, diced\n- \u00bd cup grated Mexican cheese (queso anejo or blanco)\n- \u00bd cup chopped cilantro\n&lt;/answer&gt;\n</code></pre>"},{"location":"prompts/understanding/citations/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-lite-v1:0',\n                system=[{\"text\": \"\"\"You are an AI assistant that answers questions about documents and \ncorrectly cites your sources of information in the document. \nFollow these instructions:\n1. Read and understand the question asked under &lt;question&gt;.\n2. Read through the &lt;document_content&gt; and find the answer to the question. \n3. Think step-by-step about how the &lt;document_content&gt; may or may not answer the question, and put your thoughts in &lt;thinking&gt; tags\n4. If you find an answer in the document, format your citation in a list as follows and put into &lt;citation&gt; tags: \n    [\n        {\n            \"pageNumber\": \"the number of the pages where the answer was found\",\n            \"text\": \"The literal, verbatim text found that answers the question\",\n            \"section\": \"A best effort description of the section where the answer was found\"\n        }\n    ]\n5. Put your answer in &lt;answer&gt; tags, and ground it in facts using only whats in &lt;document_content&gt;\n6. If you can't find the answer in the text, just say empty answer tags &lt;answer&gt;&lt;/answer&gt;. Its ok if you can't find the answer!\n\"\"\"}],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": f\"\"\"\n&lt;document_content&gt;\n1\nEAT REAL\nRECIPES FROM SOME OF  \nAMERICA\u2019S BEST CHEFS\nCenter  for SCienCe in the Publi C intere St\nI\nFood Day Recipes\nTable of ContentsFood Day is a celebration, and what would a celebration, especially one about food, be without \ndelicious food.  We\u2019ve adapted a variety of delicious, healthy, easy-to-prepare recipes from some of \nthe country\u2019s most prominent chefs and cookbook writers.  Choose seasonal, locally grown, and \norganic ingredients when possible.  If you are celebrating Food Day, October 24, with a dinner \nor potluck at your home, please consider using some of these recipes\u2014but, of course, you can \ncook them any other day, too.  They\u2019ll brighten up your dinner table and delight your taste buds.\nSOUPS\nFennel &amp; Apple Soup  .................................................................................................... 1\nCarrot, Sweet Potato &amp; Ginger Soup  ................................................................... 25\nSALADS \nSquash &amp; Mushroom Salad  ........................................................................................ 4\nGreen Bean Salad with Red Onion &amp; Salsa Dressing  ...................................... 5\nSweet &amp; Tangy Three Bean Salad  ......................................................................... 10\nLentil, Apple &amp; Walnut Salad with Cider Dressing  .......................................... 19\nShredded Tuscan Kale Tomato &amp; Avocado Salad  ........................................... 26\nSIDES\nGreen Beans with Charred Onions  ......................................................................... 2\nMussels with Pepperonata  ......................................................................................... 3\nSweet Potato &amp; Caramelized Onions with Chili Dressing  .............................. 6\nCouscous with Dried Cranberries &amp; Pecans  ....................................................... 8\nTuscan Kale &amp; White Bean Ragout  ........................................................................ 14\nBraised Kohlrabi with Fennel &amp; Leeks  .................................................................. 16\nRosemary-Orange Cauliflower Puree  ................................................................... 17\nPomegranate-Cinnamon Tabbouleh  ..................................................................... 18\nPearl Barley with Spinach Pesto  .......................................................................... 20\nSpicy Garlic Broccoli with Pine Nuts  ................................................................... 23\nMAINS\nQuick Tostados  .............................................................................................................. 7\nAutumn Vegetable Curry  ........................................................................................... 11\nHoney-Crisp Oven-Fried Chicken  .......................................................................... 12\nGumbo with Smoked Turkey &amp; Wild Rice  ........................................................... 15\nHot &amp; Sour Salmon with Greens  ............................................................................ 22\nRainbow Salad with Spicy Peanut Dressing  ..................................................... 24\nCurried Lentils with Walnuts, Spinach &amp; Cherry Tomatoes  ........................ 27\nOven Roasted Stuffed Portobello Mushrooms  ................................................ 28\nDESSERTS\nBaked Pumpkin Orange Custard  ............................................................................. 9\nApple Crisp  ..................................................................................................................... 13\nYogurt Panna Cotta with Cranberry Pear Sauce  ............................................. 21\nIIDAN BARBER\nDan Barber is the chef and owner of the Blue Hill and Blue \nHill at Stone Barns restaurants. He is also an accomplished \nwriter on the topic of food and agriculture policy and was \nrecently appointed to serve on President Barack Obama\u2019s \nCouncil on Physical Fitness, Sports and Nutrition.\nMARIO BATALI\nMario Batali is a Food Network chef and star of Molto Gusto , \nIron Chef , and a number of other shows. He owns several \nrestaurants around the world and has penned cookbooks such \nas Simple Italian Foods  and Spain\u2026A Culinary Roadtrip  with \nGwyneth Paltrow.\nRICK BAYLESS\nChef Bayless is known for his expertise on Mexican cuisine. \nHe has written several cookbooks including Mexican Everyday  \nand Mexican Kitchen: Capturing the Vibrant Flavors of a World-\nClass Cuisine . Most recently, he appeared on the popular Bravo \nTV show Top Chef Masters. \nMARK BITTMAN\nMark Bittman is a well-known food journalist and regular \ncontributor to The New York Times . He authored How to Cook \nEverything , and is a self-proclaimed \u201chome cook\u201d who has \ncooked with some of the world\u2019s top chefs.\nELLIE KRIEGER\nThis Food Network star is a registered dietician known for \nher health-conscious and delicious dishes. She stars in Healthy \nAppetite with Ellie Krieger , and is also author of the best-selling \ncookbook So Easy: Luscious Healthy Recipes for Every Meal of the \nWeek  and Comfort Food Fix: Feel Good Favorites Made Healthy. EMERIL LAGASSE\nEmeril is known for his big personality and flavorful food. He \nhas appeared on nearly 3,000 shows on The Food Network \nand has made a number of other television appearances.  He is \nchef-proprietor of 12 restaurants across the country as well as \nhis main restaurant, Emeril\u2019s, in New Orleans.\nLYNNE ROSSETTO KASPER\nLynne Rosetto Kasper is an acclaimed food writer and host \nof the radio show The Splendid T able .  She has penned several \nbooks about healthy eating including bestseller The Splendid \nT able , which won both the James Beard and Julia Child \nCookbook of the Year awards in 1994.\nKATE SHERWOOD\nKate is the culinary director of Nutrition Action Healthletter, \nthe world\u2019s largest-circulation health and nutrition newsletter. \nT rained at the Culinary Institute of America, Kate has been a \nfreelance food stylist at The Food Network.\nMARIE SIMMONS\nMarie Simmons is an award-winning cookbook author, \ncooking teacher, and food writer from the Bay Area.  She was \na columnist for Bon Appetit magazine for 18 years and has \nwritten many popular cookbooks, the most recent of which is \nThings Cooks Love .\nNINA SIMONDS\nNina Simonds is well-known for her Spices of Life  blog and \nscintillating cookbooks such as A Spoonful of Ginger . She \nspecializes in healthy eating and is known in the culinary \nworld as an expert on Asian cuisine.Food Day\u2019s Recipe \nContributors\nCenter for Science in the Public Interest   |   1220 L Street, NW, Suite 300, Washington, DC 20005\nThis booklet was compiled by the Center for Science in the Public Interest, sponsor of national Food Day. Where indicated, recipes were adapted by Kate Sherwood.  \nFor further information visit www.cspinet.org or www.FoodDay.org.\n\u00a9 2011 by Center for Science in the Public Interest.\nIII\u201cOne of the best things you can do for your health is to cook and \nenjoy family meals made with fresh, colorful seasonal ingredients,\u201d \nsaid chef and author Ellie Krieger, host of Healthy Appetite on the \nFood Network and a member of the Food Day advisory board.  \u201cFood \nDay is a chance to celebrate the power good food has to nourish us \nand bring us together.\u201d  \n\u201cFood Day is a great opportunity for restaurants to show their \ncommitment to locally produced artisan foods, to showcase a variety \nof whole grains, and to reach out to an audience hungry for more \nsustainable ways to consume that are more in keeping with the health \nof our bodies and our environment,\u201d said Ellen Gray, co-owner, along \nwith her husband Todd Gray, of Equinox Restaurant, Watershed, and \nTodd Gray\u2019s Muse at the Corcoran, all in Washington, D.C.\n\u201cWhy Food Day? It is time to make real food the number-one priority \nin our country,\u201d said Alice Waters, proprietor of the acclaimed Chez \nPanisse restaurant in Berkeley, Calif.  \u201cThe choices we make about \nfood affect our health, the health of the planet\u2014and the way we live \nour lives.\u201d\nWHAT CHEFS  \nARE SAYING  \nABOUT  \nFOOD DAY\n1DAN BARBER\u2019S FALL RECIPE\nFennel &amp; Apple Soup\nAdapted for Food Day\nMakes about 8 cups\nINGREDIENTS\n1 onion, minced\n3 small shallots, minced\n3 fennel bulbs, diced\n1 apple, peeled, cored and diced\n3 tablespoons extra-virgin olive oil\n1 tablespoon fennel seed\n1 quart vegetable stock or low-sodium broth\n\u00bd teaspoon fresh thyme leaves\n\u00bd teaspoon salt \nFreshly ground black pepper\nDIRECTIONS\n1. Gently saut\u00e9 the onion and shallots in 1 tablespoon olive oil without browning them. \n2. Add the fennel and apple. Season with pepper. \n3. Stir in the fennel seeds and cover with stock. Simmer for 30 minutes. \n4. Add thyme, and season with up to \u00bd teaspoon salt and more pepper to taste. \n5. T ransfer to a blender and puree, adding remaining 2 tablespoons olive oil.\nPer Serving (1 cup): Calories 110; Total Fat 6 g; Sat Fat 0.5 g; Protein 2 g; Carbs 14 g; Fiber 4 g;  Cholesterol 0 mg;  Sodium 260 mg.\n2MARIO BATALI\u2019S ITALIAN RECIPES\nGreen Beans with Charred Onions \nAdapted from Molto Gusto  by Mario Batali\nMakes 6 servings\nINGREDIENTS\n1 pound green beans or haricots verts \n2 medium sweet onions, such as Vidalia or Walla Walla \n1\u00bd tablespoons balsamic vinegar \n1\u00bd tablespoons orange juice \n2 tablespoons extra-virgin olive oil \n\u00bc teaspoon Maldon or flaky sea salt \nDIRECTIONS\n1. Bring 4 quarts of water to a boil in a large pot. Add the beans and blanch until  \ncrisp-tender, 3 to 5 minutes. Drain in a colander and cool under cold running water;  \ndrain well. \n2. Halve the onions lengthwise and trim off the ends. Cut lengthwise into \u00bd-inch-wide slices. \nHeat a dry 12-inch saut\u00e9 pan over medium-high heat until very hot. Add the onions and \nsaut\u00e9 until charred in spots but still crunchy, 4 to 6 minutes. During the last minute or so, \nadd the beans, stirring and tossing to warm them through. \n3. T ransfer the beans and onions to a large bowl. Whisk the balsamic vinegar, orange juice, \nand oil together in a small bowl. Pour over the beans and onions, tossing to coat. Let stand \nfor at least 10 minutes, or up to 1 hour, before serving. Sprinkle the beans with salt and \nserve.\nPer Serving: Calories 80; Fat 4.5 g; Sat Fat 0.5 g; Protein 2 g; Carbs 10 g; Fiber 3 g; Cholesterol 0 mg; Sodium 90 mg. \n\n3Mussels with Peperonata \nAdapted from Molto Gusto  by Mario Batali\nMakes 8 servings\nINGREDIENTS\n5 garlic cloves, thinly sliced \n\u00bd cup extra-virgin olive oil \n1 pound red bell peppers (3 large), cored, seeded, and cut into \u00bd-inch dice \n1 pound green bell peppers (3 large), cored, seeded, and cut into \u00bd-inch dice \n1 red finger chile or serrano chile, thinly sliced \n\u00be cup dry white wine \n2 pounds PEI* or other small mussels, scrubbed and debearded \n1 cup no-salt-added diced tomatoes, simmered until reduced by half \n\u00bc teaspoon Maldon or other flaky sea salt \nDIRECTIONS\n1. Combine half the garlic and \u00bc cup of the oil in a 12-inch saut\u00e9 pan and heat over medium-\nlow heat just until the garlic is slightly softened, about 1 minute; do not allow to color. \n2. Add the bell peppers and sliced chili and cook, stirring occasionally, until the peppers are \nsoftened, 15 to 20 minutes. \n3. T ransfer to a medium bowl and let cool. Combine the remaining \u00bc cup oil and the \nremaining garlic in a large pot and cook, stirring, over medium-high heat just until the \ngarlic is slightly softened, about 1 minute. Add the wine and mussels, cover, and steam \nuntil the mussels open, about 4 minutes; transfer the mussels to a bowl as they open. \n4. Remove the pot from the heat and set aside. Add the tomato sauce and pepper mixture \nto the mussel broth and bring to a simmer. Season with the salt, remove from the heat, \nand gently stir in the mussels. Serve warm or at room temperature. (The mussels can be \nrefrigerated for up to 3 days; serve cold, or bring to room temperature before serving.)\nPer Serving : Calories 270; Fat 16 g; Sat Fat 2.5 g; Protein 15 g; Carbs 13 g; Fiber 2 g; Cholesterol 30 mg; Sodium 390 mg. \n*Prince Edward Island \n4Squash &amp; Mushroom Salad  \nAdapted from Molto Gusto  by Mario Batali\nMakes 6 servings\nINGREDIENTS\n1 small butternut squash (about 1\u00bc pounds), peeled, seeded, and cut into \u00bd-inch pieces \n\u00bd pound baby shiitake mushroom caps, left whole, or larger caps, cut into \u00bc-inch-thick slices\n3 large shallots, cut into \u00bc-inch dice \n\u00bc cup extra-virgin olive oil \n\u00bd teaspoon Maldon or other flaky sea salt \nCoarsely ground black pepper \n1 tablespoon truffle oil or extra-virgin olive oil \n2 tablespoons balsamic vinegar \nJuice of 1 lemon \n1 teaspoon minced fresh rosemary \n\u00bc pound cremini mushrooms, trimmed and thinly sliced \nDIRECTIONS\n1. Preheat the broiler. Combine the squash, shiitake mushrooms, and shallots in a large bowl. \nAdd the oil, tossing to coat. Season with salt and pepper. \n2. Spread the vegetables out on a large baking sheet and broil, stirring occasionally, until the \nsquash is slightly charred and just tender, 15 to 20 minutes. T ransfer to a serving bowl. \n3. Meanwhile, whisk the balsamic vinegar, lemon juice, truffle (or extra-virgin) oil, and \nrosemary together in a small bowl. \n4. Scatter the cremini over the warm salad and add the vinaigrette, tossing to coat. Serve warm \nor at room temperature.\nPer Serving: Calories 140; Fat 9 g; Sat Fat 1.5 g; Protein 2 g; Carbs 14 g; Fiber 3 g; Cholesterol 0 mg; Sodium 170 mg.\n\n5MEXICAN RECIPES FROM RICK BAYLESS  \nGreen Bean Salad with Red Onion &amp; Salsa Dressing\nAdapted from Mexican Everyday by Rick Bayless\nMakes 6 servings\nINGREDIENTS\n1 pound green beans, trimmed\n1 small red onion, thinly sliced\n3 tablespoons olive oil\n3 tablespoons bottled salsa, preferably green tomatillo salsa\n2 teaspoons fresh lime juice\n3 sprigs cilantro, plus more for garnish\n\u00bc teaspoon kosher salt\nDIRECTIONS\n1. Steam the green beans until tender-crunchy, about 3 minutes. Allow them to cool then toss \nwith the red onion in a large bowl.  \n2. Combine the remaining ingredients in a blender or mini food processor. Process until \nsmooth. \n3. Toss the dressing with the green beans and red onion.\n4. Garnish with some cilantro leaves. \nPer Serving: Calories 90; Fat 7 g; Sat Fat 1 g; Protein 1 g; Carbs 7 g; Fiber 2 g; Cholesterol 0 mg; Sodium 140 mg. \n6Sweet Potato with Caramelized Onions &amp;  \nGuajillo Chili Dressing\nAdapted from Mexican Everyday by Rick Bayless\nMakes 6 servings\nINGREDIENTS\n1/3 cup olive oil\n1 dried guajillo* chili, stem and seeds removed\n1 clove garlic\n2 tablespoons balsamic vinegar\n\u00bd teaspoon kosher salt\n1 large red onion, chopped\n2 pounds sweet potato, cut into \u00bd-inch cubes\nDIRECTIONS\n1. Pour the oil into a very large skillet and set over medium heat. When the oil is warm, add \nthe chili and garlic. T urn and stir until the chili is toasty smelling (about 30 seconds). \nRemove from the heat.  \n2. Put the chili in a blender with the vinegar and salt.  Blend for 30 seconds. When the oil and \ngarlic are cool, add to the blender.  Set the skillet aside without washing. Blend the dressing \nuntil smooth.\n3. Return the skillet (it will have a light coating of oil) to medium heat and add the onion. \nCook, stirring regularly, until soft and richly brown, 9-10 minutes. \n4. Add the sweet potatoes. Blend the dressing for a few more seconds and add to the skillet \nwith the potatoes. Stir well. Cover and cook until the potatoes are tender, about 10 \nminutes. Uncover and allow to cool.  Taste and adjust the seasoning. \nPer Serving: Calories 240; Fat 12 g; Sat Fat 1.5 g; Protein 3 g; Carbs 31 g; Fiber 5 g; Cholesterol 0 mg; Sodium 240 mg.\n* You can use any mild or medium dried chili. \n7Quick Tostados*\nAdapted from Mexican Everyday by Rick Bayless\nMakes 6 servings\nINGREDIENTS\n1 tablespoon canola oil\n2 cloves garlic, minced\n2 15-ounce cans no-salt-added black beans\n\u00bc teaspoon kosher salt\n2 cups cooked shredded chicken breast or diced smoked tofu\n6 cups shredded romaine\n\u00bc cup low-fat sour cream\n2 tablespoons Mexican hot sauce\n12 tostados\n1 avocado, diced\n\u00bd cup grated Mexican cheese (queso anejo or blanco)\n\u00bd cup chopped cilantro \nDIRECTIONS\n1. Heat the oil in a medium skillet over medium heat. Add the garlic and stir for about a \nminute. Then add the beans with their liquid.  Mash the beans with a potato masher or the \nback of a spoon until you have a coarse puree, then cook, stirring regularly, until the beans \nare thickened just enough to hold their shape in a spoon, about 10 minutes.  Taste and add \nup to \u00bc teaspoon salt.\n2. Place the romaine in a large bowl. Mix together the sour cream and hot sauce. Drizzle over \nthe romaine and toss to combine. \n3. Spread each tostado with a portion of beans.  Top with chicken and lettuce. Dot with \navocado. Sprinkle with cheese and cilantro.  Serve right away with more hot sauce for \ndoctoring.\nPer Serving: Calories 420; Fat 18 g; Sat Fat 4 g; Protein 24 g; Carbs 42 g; Fiber 12 g; Cholesterol 40 mg; Sodium 430 mg. \n*Tostados are flat, crisp-fried corn tortillas.\n\n8MARK BITTMAN\u2019S AUTUMN RECIPES  \nCouscous Salad with Dried Cranberries &amp; Pecans \nFrom Food Matters Cookbook by Mark Bittman\nMakes 4 servings \nINGREDIENTS\n1 cup couscous, preferably whole wheat\nSalt\n2 large carrots, grated \n\u00bd cup chopped pecans \n\u00bd cup dried cranberries \n\u00bc cup chopped scallions \n\u00bc cup olive oil, or more as needed \nGrated zest and juice of 1 lemon, or more juice as needed \n1 teaspoon coriander \nPinch of cayenne, or to taste \nBlack pepper \n\u00bd cup chopped fresh parsley \n1 tablespoon chopped fresh sage, or 1 teaspoon dried\nDIRECTIONS\n1. Put the couscous in a small pot and add 1\u00bd cups water and a pinch of salt. Bring the water \nto a boil, then cover and remove from the heat. Let steep for at least 10 minutes, or up to \n20. \n2. Put the slightly cooled couscous in a large salad bowl along with the carrots, pecans, \ncranberries, scallions, oil, and lemon zest and juice and sprinkle with the spices and pepper. \nUse 2 big forks to combine, fluffing the couscous and tossing gently to separate the grains. \n(The salad can be made up to this point and refrigerated for up to a day; bring to room \ntemperature before proceeding.) \n3. Stir in the parsley and sage. Taste and adjust the seasoning, moisten with a little more oil \nand lemon juice as you like, and serve. \nPer Serving (with \u00be teaspoon salt): Calories 450; Fat 24  g; Sat Fat 3 g; Protein 9 g; Carbs 56 g; Fiber 10 g; Cholesterol 0 mg; Sodium 390 mg. \n9Baked Pumpkin-Orange Custard \nFrom Food Matters Cookbook by Mark Bittman\nMakes 6-8 servings \nINGREDIENTS\n2 tablespoons unsalted butter, melted, plus more for greasing the pan \n2 eggs \n\u00be cup brown sugar \n12 ounces soft silken tofu\n3 cups (two 15-ounce cans) pur\u00e9ed pumpkin (unsweetened and unseasoned) \n\u00bd teaspoon cinnamon, or more to taste \n\u00bc teaspoon nutmeg \n\u00bc teaspoon allspice \nGrated zest and juice of 1 orange \nPinch of salt \nDIRECTIONS\n1. Heat the oven to 350\u00b0F . Grease an 8- or 9-inch square pan or pie plate with a little butter. \nUse an electric mixer or a whisk to beat the eggs and sugar in a large bowl until light. Add \nthe tofu and beat until smooth, a minute or 2 longer. \n2. Add the 2 tablespoons melted butter and remaining ingredients and beat until everything \nis thoroughly combined. Pour the mixture into the prepared pan and bake until set around \nthe edges but still a little jiggly at the center, about 1 hour. Let cool completely before \nserving, or refrigerate for up to a day and serve cold.\nPer Serving (for 1/8  of the custard): Calories 180; Fat 5 g; Sat Fat 2.5 g; Protein 5 g; Carbs 30 g; Fiber 3 g; Cholesterol 55 mg; Sodium 30 mg. \n10ELLIE KRIEGER\u2019S COMFORT FOOD\nSweet &amp; Tangy Three Bean Salad\nAdapted from Comfort Food Fix by Ellie Krieger\nMakes 8 servings\nINGREDIENTS\n\u00bd small red onion, thinly sliced into half-moons\n\u00be pound green beans, trimmed\n\u00be pound wax beans, trimmed\n\u00bc cup honey\n\u00bd cup cider vinegar\n3 tablespoons extra-virgin olive oil\n\u00bd teaspoon salt\n\u00bc teaspoon freshly ground black pepper\n1 15-ounce can no-salt-added kidney beans, rinsed and drained\n1 medium red bell pepper, trimmed and sliced into matchsticks\nDIRECTIONS\n1. To mellow the bite of the onion, place it in a bowl of ice water and allow it to soak for 30 \nminutes. Drain.\n2. Place the green and wax beans in a steam basket fitted over a pot of boiling water. Cover \nand steam until crisp-tender, about 4 minutes. Remove from the heat and allow to cool. \nCut into 2-inch lengths.\n3. In a large bowl, whisk together the honey, vinegar, oil, salt, and black pepper. Add the \nonion, green and wax beans, kidney beans, and bell pepper and toss to combine. Cover and \nrefrigerate for at least 1 hour before serving.\nPer Serving: Calories 160; Fat 5 g; Sat Fat 1 g; Protein 5 g; Carbs 23 g; Fiber 7 g; Cholesterol 0 mg; Sodium 160 mg. \n11Autumn Vegetable Curry\nAdapted from Comfort Food Fix by Ellie Krieger\nMakes 6 servings\nINGREDIENTS\n1 large onion, coarsely chopped\n4 cloves garlic, peeled\n1 1\u00bd-inch length fresh ginger, peeled and thinly sliced\n1\u00bd tablespoons yellow curry powder\n\u00bc teaspoon cayenne pepper, plus more to taste\n2 tablespoons canola oil\n2 tablespoons tomato paste\n2 cups low-sodium vegetable broth\n1 cup light coconut milk\n1 cinnamon stick\n\u00bc teaspoon freshly ground black pepper, plus more to taste\n\u00bd head cauliflower, broken into 1\u00bd-inch-wide florets  \n(about 3 cups)\n1 pound sweet potatoes, peeled and cut into 1-inch cubes\n2 large carrots, peeled and cut into 1-inch rounds\n2 tomatoes, cored and chopped\nGrated zest of 1 lime\n2 tablespoons fresh lime juice\n1 15-ounce can no-salt-added chickpeas, drained and rinsed \n5 cups fresh baby spinach leaves\n\u00be teaspoon salt\n\u00bc cup chopped fresh cilantro leaves\n3 cups cooked brown rice, for serving, optional\nDIRECTIONS\n1. Place the onion, garlic, ginger, curry powder, and cayenne pepper in a food processor and \nprocess to combine. Add the oil and process until a smooth puree is formed. T ransfer the \ncurry puree to a large pot and cook over medium heat, stirring frequently, about 5 minutes. \nAdd the tomato paste and cook, stirring frequently, until the mixture begins to darken, \nabout 5 minutes more.\n2. Add the vegetable broth, coconut milk, cinnamon stick and \u00bc teaspoon black pepper and \nbring to a boil. Reduce the heat and simmer for 10 minutes. Add the cauliflower, sweet \npotatoes, carrots, and tomatoes, season with salt and pepper, and return to a boil. Reduce \nthe heat to medium low, cover, and simmer until the vegetables are tender, about 25 \nminutes. Remove the cinnamon stick. Stir in the lime zest and juice, chickpeas, and spinach \nand cook until the spinach is wilted, about 5 minutes. Season with up to \u00be teaspoon salt.\n3. Garnish with cilantro and serve with rice.\nPer Serving: Calories 380; Fat 8 g; Sat Fat 2.5 g; Protein 11 g; Carbs 67 g; Fiber 11 g; Cholesterol 0 mg; Sodium 480 mg. \n\n\n12Honey-Crisp Oven-Fried Chicken\nAdapted from Comfort Food Fix by Ellie Krieger\nMakes 6 servings\nINGREDIENTS\n6 skinless, bone-in chicken thighs (about 2 pounds)\n2/3 cup low-fat buttermilk\n4 cups whole-grain cereal flakes\n\u00bd teaspoon paprika\n\u00bd teaspoon garlic powder\n\u00bd teaspoon kosher salt\n\u00bc teaspoon freshly ground black pepper\n\u00bc teaspoon cayenne pepper\nOlive oil cooking spray\n2 tablespoons honey\nDIRECTIONS\n1. Place the chicken in a bowl with the buttermilk and toss  \nto coat. Marinate in the refrigerator for at least 1 hour and up to 4 hours. \n2. Place the cereal flakes in a food processor and process until crumbs form (you should have \nabout 1 cup of crumbs). \n3. T ransfer to a shallow dish and mix in the paprika, garlic powder, salt, black pepper, and \ncayenne pepper.\n4. Preheat the oven to 350\u00b0F . Spray a baking sheet with cooking spray. \n5. Remove chicken from buttermilk, shaking off excess buttermilk from the chicken. Discard \nthe remaining buttermilk. \n6. Brush each piece of chicken with honey, then dip in the cereal crumbs, press hard so the \ncrumbs adhere to the chicken. Place the coated chicken on the prepared baking sheet. \n7. Lightly spray the top of each chicken thigh with cooking spray. \n8. Bake until the chicken is crisped and cooked through, 45 to 50 minutes. \nPer Serving: Calories 330; Total Fat 7 g; Sat Fat 2 g; Protein 34 g; Carbs 34 g; Fiber 4 g; Cholesterol 125 mg; Sodium 410 mg.\n\n\n13Apple Crisp\nAdapted from Comfort Food Fix by Ellie Krieger\nMakes 8 servings\nINGREDIENTS FOR THE TOPPING\n1/3 cup old-fashioned rolled oats\n\u00bd cup whole-wheat pastry flour\n\u00bc cup sliced almonds\n2 tablespoons toasted wheat germ\n\u00bc cup packed dark brown sugar\n\u00be teaspoon ground cinnamon\n\u00bc teaspoon ground nutmeg\n1/8 teaspoon salt\n1 tablespoon cold unsalted butter, cut into pieces\n2 tablespoons canola oil\n1 to 2 tablespoons cold water\nINGREDIENTS FOR THE FILLING\n3 large Rome or Empire apples (about 1\u00bd pounds)\n3 medium Golden Delicious apples (about 1 pound)\n3 medium Granny Smith apples (about 1 pound)\n\u00bc cup fresh lemon juice\n3 tablespoons pure maple syrup\n2 tablespoons whole wheat pastry flour\nDIRECTIONS\n1.  Preheat the oven to 375\u00b0F . \n2. To make the topping, place the oats, flour, almonds, wheat germ, brown sugar, cinnamon, \nnutmeg, and salt in a food processor and process until well combined. Add the butter and oil \nand pulse until lumps form. Add the water 1 tablespoon at a time until the dough just holds \ntogether when you press it between your fingers. T ransfer to a bowl and using your fingers, \npress the dough to create several pea-size lumps for texture. Chill until ready to use.\n3. To make the filling, leaving the peels on, core and cut the apples into \u00bc-inch-thick wedges. \nToss the wedges with the lemon juice and maple syrup until well coated. Sprinkle with the \nflour and toss until well combined. Spoon the apple mixture into a 3- to 3\u00bd-quart shallow \nbaking dish and sprinkle the dough evenly over the top.\n4. Bake in the middle of the oven until bubbling, the apples are tender, and the topping is \ngolden brown, 45 to 50 minutes. \nPer Serving: Calories 280; Total Fat 7 g; Sat Fat 1.5 g; Protein 4 g; Carbs 53 g; Fiber 7 g; Cholesterol 5 mg; Sodium 40 mg. \n\n\n14EMERIL LAGASSE\u2019S RECIPES FROM  \nNEW ORLEANS\nTuscan Kale &amp; White Bean Ragout \nAdapted from  From Farm to Fork  by Emeril Lagasse\nMakes 4 servings\n\nINGREDIENTS\n2 tablespoons olive oil \n1 bay leaf \n2 cloves garlic, smashed and roughly chopped \n\u00bc teaspoon crushed red pepper \n1 small red onion, sliced \n1\u00bd pounds T uscan kale,* rinsed, patted dry, and cut crosswise into 1-inch-wide slices \n\u00bc teaspoon freshly ground black pepper, plus more if needed \n2 15-ounce cans no-salt-added cannellini beans or white beans, drained and rinsed\n1 cup canned no-salt-added diced tomatoes, with their juices \n\u00bd cup vegetable stock or canned low-sodium vegetable broth \n\u00bd teaspoon kosher salt\nExtra-virgin olive oil, for drizzling \nDIRECTIONS\n1. Heat the olive oil in a large saut\u00e9 pan over medium-high heat. When it is hot, add the bay \nleaf, garlic, crushed red pepper, and red onion. Cook until the onion begins to wilt and the \ngarlic begins to turn golden around the edges, 3 to 4 minutes. Add the kale and pepper, and \ncook for another 2 minutes. Then add the white beans, tomatoes, and stock. Cover, and \ncook until the kale is wilted and cooked through, about 15 minutes. Taste and season with \nup to \u00bd teaspoon salt. \n2. T ransfer the ragout to a serving dish, and drizzle it with extra-virgin olive oil. Serve hot. \nPer Serving: Calories 410; Fat 16 g; Sat Fat 2 g; Protein 17 g; Carbs 53 g; Fiber 13 g; Cholesterol 0 mg; Sodium 410 mg. \n*Tuscan kale is also known as lacinato kale, black kale, and dinosaur kale.\n15Gumbo with Smoked Turkey &amp; Wild Rice \nAdapted from  From Farm to Fork  by Emeril Lagasse\nMakes 6 servings\nINGREDIENTS\n2 tablespoons olive oil\n1 small onion, chopped \n3 tablespoons chopped scallions, white and light green parts, plus more for garnish \n\u00bd tablespoon chopped garlic \n\u00bd pound smoked turkey thigh or smoked turkey sausage, diced \n1\u00bd pounds fresh cooking greens \u2013 a mix of spinach, collard greens, turnip greens -tough stems \nremoved, leaves rinsed and coarsely chopped \n\u00bd pound green cabbage, cored and coarsely chopped \n3 quarts chicken stock or canned low-sodium chicken broth \n2 cups wild rice \n2 or 3 small bay leaves \n\u00bc teaspoon cayenne pepper, more to taste \nPinch of ground thyme \n\u00bc teaspoon kosher salt\n1 tablespoon fil\u00e9 powder,* or more to thicken (optional) \nChopped fresh parsley leaves, for garnish \nDIRECTIONS\n1. Heat the oil in a large soup pot. Add the onion, scallions, and garlic, and cook until tender, \nabout 3 minutes. Add the turkey and cook for 2 minutes. A handful at a time, add the \nspinach, collards, turnip greens, and cabbage, stirring them until wilted before adding the \nnext bunch. Then add the stock, wild rice, bay leaves, cayenne, and thyme. Bring to a boil. \nReduce the heat to a simmer and cook for 1 hour. \n2. Taste and add up to \u00bc teaspoon salt\u2014the greens should be tender and slightly spicy. The \nwild rice should be tender and puffed. \n3. If you wish to thicken it, stir 1 tablespoon fil\u00e9 powder into the simmering gumbo. Add \nmore fil\u00e9, a little at a time, until thickened. Simmer for 3 minutes more. (Do not allow the \ngumbo to boil once you have added the fil\u00e9.) \n4. Serve garnished with chopped parsley and scallions. \nPer Serving: Calories 350; Fat 7 g; Sat Fat 1 g; Protein 21 g; Carbs 53 g; Fiber 9 g; Cholesterol 15 mg; Sodium 440 mg. \n*Fil\u00e9 powder is a spicy ground herb traditionally used to thicken and flavor gumbo.\n16Braised Kohlrabi with Fennel &amp; Leeks \nAdapted from  From Farm to Fork  by Emeril Lagasse\nMakes 6 servings\nINGREDIENTS\n2 tablespoons olive oil \n1 tablespoon butter \n3 large heads kohlrabi, cut into \u00bd-inch-thick wedges \n2 leeks, white and light green parts, well rinsed and sliced into \u00bc-inch-thick rounds \n1 large bulb fennel, cored and sliced \n\u00bc cup dry white wine \n1 cup vegetable stock, or canned low-sodium vegetable broth, more as needed\n4 sprigs fresh thyme \n3 sprigs fresh fennel fronds, plus 1 tablespoon chopped \n\u00bc teaspoon freshly ground white pepper \n\u00bc teaspoon kosher salt \nDIRECTIONS\n1. Combine the olive oil and butter in a large, deep saut\u00e9 pan. Once the butter has melted \nand the foam has subsided, add the kohlrabi, leeks, and fennel. Cook for 4 to 5 minutes, \nbrowning the kohlrabi on both sides. Add the wine and cook until it has reduced by half. \nThen add the vegetable stock, thyme, and fennel fronds, and season with the pepper. Cook, \npartially covered, for 20 minutes, or until the vegetables are crisp-tender. \n2. Remove the thyme sprigs. Serve the vegetables in a shallow bowl with some of the braising \nliquid, garnished with the chopped fennel fronds. Season with up to \u00bc teaspoon salt.\nPer Serving: Calories 110; Fat 5 g; Sat Fat 1 g; Protein 2 g; Carbs 12  g; Fiber 5 g; Cholesterol 0 mg; Sodium 140 mg.\n17LYNNE ROSSETTO KASPER\u2019S RECIPES  \nRosemary-Orange Cauliflower Puree\nAdapted from How to Eat Weekends by Lynne Rosetto Kasper\nMakes 8 servings\nINGREDIENTS\n1 large cauliflower (2\u00bd to 3 pounds) with its greens\n\u00bc pound T uscan kale* (about 6 leaves) or regular kale, ribs removed and leaves torn\n1 large onion, thinly sliced\n6 garlic cloves, crushed\n1\u00bd tightly packed teaspoons fresh rosemary leaves, or more to taste\nFinely grated zest of 2/3 large orange, or to taste\nfreshly ground black pepper\n\u00bd teaspoon salt\n\u00bc cup extra-virgin olive oil\n1 tablespoon unsalted butter\nDIRECTIONS\n1. Cut the cauliflower into florets, then thinly slice the green stalks.\n2. Place 3 inches water in an 8-quart pot. Insert a collapsible steamer. Bring the water to a \nboil and pile in the cauliflower greens, then the florets then add the kale, onion, garlic, \nrosemary, and orange zest. Sprinkle with some pepper.\n3. Steam for about 10 minutes, or until the cauliflower is almost falling apart. Drain in a \ncolander and let stand for 5 minutes. Place everything into a food processor along with \u00bc \nteaspoon salt, the oil and butter. Pur\u00e9e, then taste for additional seasoning, be it salt (up to \nanother \u00bc teaspoon), rosemary, orange zest, or pepper.\nPer Serving: Calories 130; Fat 9 g; Sat Fat 2 g; Protein 4 g; Carbs 11 g; Fiber 3 g; Cholesterol 5 mg; Sodium 170 mg. \n*Tuscan kale is also known as lacinato kale, black kale, and dinosaur kale.\n18Pomegranate-Cinnamon Tabbouleh\nAdapted from How to Eat Weekends by Lynne Rosetto Kasper\nMakes 6 servings\nGRAIN\n1\u00bd cups medium or coarsely ground bulgur wheat\nDRESSING\n1 large garlic clove, minced\nGenerous \u00bc teaspoon ground cinnamon\n3 tablespoons pomegranate molasses*\n2 to 3 tablespoons water or dry white wine\n\u00be teaspoon salt\nFreshly ground black pepper\n1/3 cup expeller-pressed canola or safflower oil\nSALAD\n2 Belgian endives or \u00bd medium head of radicchio, trimmed, cored, and coarsely chopped\n1 medium fennel bulb, cored, quartered, and coarsely chopped, fronds reserved\n\u00bd cup chopped fresh flat-leaf parsley\n2 tightly packed tablespoons fresh mint, coarsely chopped\n2 to 3 scallions (white parts only), thinly sliced\n\u00bc cup shelled, salted pistachios, coarsely chopped\nSeeds from 1 large pomegranate, white membrane removed\nSalt and freshly ground black pepper\nDIRECTIONS\n1. Soak the bulgur: Place the bulgur in a bowl and add boiling water to cover by 2 inches. \nSoak for 10 to 20 minutes, depending on the grind of the grain. Taste for tenderness, but \nbe sure it\u2019s not mushy. Drain well, squeezing out as much extra moisture as possible by \nwrapping the grain in a clean towel and wringing it out. If time allows, spread out the \nbulgur on a fresh towel to help it dry a bit. T ransfer the bulgur to a large bowl.\n2. Make the dressing: In a medium bowl, combine the garlic, cinnamon, pomegranate \nmolasses, water, salt, and pepper to taste. Stir well. Add the oil in a slow stream while \nwhisking until emulsified.\n3. Make the salad: Toss into the bulgur the endive, fennel, parsley, mint, scallions, and \npistachios. Gently fold in the pomegranate seeds and the dressing. Taste for seasoning and \nadd up to another \u00bc teaspoon salt and pepper to taste.  Garnish with the fennel fronds, and \nserve.\nPer Serving: Calories 220; Fat 8 g; Sat Fat 0.5 g; Protein 6 g; Carbs 36 g; Fiber 8 g; Cholesterol 0 mg; Sodium 260 mg. \n*Pomegranate molasses substitute: simmer 1 cup pomegranate juice and 1 tablespoon fresh lemon juice  until reduced to 3 tablespoons.\n19KATE SHERWOOD\u2019S  \nAUTUMN RECIPES \nLentil, Apple &amp; Walnut Salad with  \nCider Dressing\nby Kate Sherwood\nMakes 8 servings\nINGREDIENTS\n1\u00bd cups French lentils\n3 cloves garlic\n2 sprigs thyme\n1 bay leaf\n2 cups apple cider\n2 tablespoons whole grain Dijon mustard\n2 tablespoons cider vinegar\n2 shallots, minced\n3 tablespoons canola oil\n\u00bd teaspoon kosher salt\nFreshly ground black pepper\n1 apple, diced\n5 ounces baby spinach\n\u00bd cup chopped walnuts\nDIRECTIONS\n1. In a medium pot, cover the lentils, garlic, thyme and bay leaf with water by 2 inches.  \n2. Bring to a boil then reduce to a simmer.  Cook until tender but not mushy \u2013 start checking \nthem at 15 minutes. \n3. Drain, rinse under cold water and discard the garlic, thyme and bay leaf. \n4. In a saut\u00e9 pan, boil the cider until reduced to 1/3 cup. Allow to the cider to cool then whisk \nreduced cider together with the mustard, vinegar, shallots, and oil.  \n5. Season the dressing with up to \u00bd teaspoon salt and pepper. Toss apples, lentils and spinach \nin the dressing.  Arrange salad on a platter and garnish with the walnuts.  \nPer Serving: Calories 260; Total Fat 10 g; Sat Fat 0.5 g; Protein 12 g; Carbs 32 g; Fiber 10 g; Cholesterol 0 mg; Sodium 240 mg. \n\n20Pearl Barley with Spinach Pesto \nby Kate Sherwood \nMakes 8 servings \nINGREDIENTS\n1\u00bd cups pearl barley\n1 clove garlic\n\u00bc cup pine nuts, toasted\n\u00bd cup grated parmesan\n4 cups baby spinach\n\u00bc cup extra-virgin olive oil\n\u00be teaspoon kosher salt\n\u00bc teaspoon freshly ground black pepper\n1 cup edamame\nDIRECTIONS\n1. Boil the barley in plenty of water until al dente (chewy but not raw in the center), about 30 \nminutes. While the barley is cooking, make the pesto.  \n2. Pulse the garlic, pine nuts, cheese, spinach, oil, salt and pepper in a food processor until \nfinely chopped. \n3. Reserve \u00bd cup cooking water.  \n4. Toss the edamame into the pot with the barley then drain and return them to pot.  \n5. Stir \u00bc cup of cooking water into the pesto.  \n6. Stir the pesto into the barley and edamame.  Add more water if needed to loosen.  \nPer Serving: Calories 260; Total Fat 12 g; Sat Fat 2.5 g; Protein 7 g; Carbs 32 g; Fiber 6 g; Cholesterol 5 mg; Sodium 280 mg. \n21Yogurt Panna Cotta with Cranberry  \nPear Sauce \nby Kate Sherwood\nMakes 8 servings\nPANNA COTTA* INGREDIENTS\n1 cup low-fat (1%) milk\n\u00bc cup sugar\n1 envelope plain powdered gelatin\n2 tablespoons cold water\n1 large container (16-18 ounces) fat-free Greek yogurt\n1 teaspoon pure vanilla extract\n1 recipe cranberry pear sauce (see below)\nDIRECTIONS\n1. In a large saucepan, heat the milk with the sugar over  \nlow heat, stirring, until the sugar has dissolved,  \nabout 3 minutes. Remove fromt he heat.\n2. Meanwhile, in a small bowl, mix the gelatin with the water and let stand for 2 minutes. \n3. Whisk the gelatin into the warm milk and let cool.\n4. In a medium bowl, whisk together the yogurt and vanilla extract. Whisk in the milk. \n5. Pour 1/3 cup of the mixture into each of 8 serving glasses. \n6. Refrigerate until set, about 2 hours. Serve with the cranberry pear sauce.  \nSAUCE INGREDIENTS\n1 cup fresh or frozen cranberries\n2 ripe pears, pealed, cored and diced\n\u00bc cup sugar\n1 cup water\nDIRECTIONS\n1. Combine all the ingredients in a sauce pan and bring to a boil. Reduce the heat and simmer \nfor 20 minutes.  \n2. T ransfer to a heat-proof bowl and cool to room temperature, about 1 hour.\nPer Serving: Calories 120; Total Fat 0 g; Sat Fat 0 g; Protein 7 g; Carbs 32 g; Fiber 2 g; Cholesterol 0 mg; Sodium 40 mg. \n*Frozen vanilla yogurt can be substituted for the panna cotta recipe (as pictured).\n\n22VEGETARIAN RECIPES FROM  \nMARIE SIMMONS\nCarrot, Sweet Potato &amp; Ginger Soup \nAdapted from Fresh and Fast Vegetarian  by Marie Simmons\nMakes about 10 cups\nINGREDIENTS\n2 tablespoons extra-virgin olive oil\n1 pound carrots, cut into \u00bd-inch slices\n1 pound sweet potatoes, scrubbed, skins left on, cut into \u00bd-inch cubes\n1 bunch scallions (white and green parts), sliced\n\u00bd cup chopped celery\n1 garlic clove, grated\n1 tablespoon chopped peeled fresh ginger\n1 teaspoon coarse salt\n4 tablespoons chopped fresh cilantro\n1 tablespoon fresh lime juice\n1 tablespoon finely chopped seeded jalape\u00f1o pepper, or to taste\n6 ounces baby bok choy, stem ends trimmed, cut into \u00bd-inch slices\nDIRECTIONS\n1. Heat the oil in a soup pot until it is hot enough to sizzle a piece of vegetable. Add the \ncarrots, sweet potatoes, scallions, celery, garlic, ginger, and \u00bd teaspoon salt. Cook, covered, \nstirring occasionally, over medium-low heat until lightly browned and softened, about 10 \nminutes. Add 6 cups water and 2 tablespoons of the cilantro and bring to a boil. Cover and \ncook over medium heat until the vegetables are tender, 20 to 25 minutes.\n2. Ladle out about 2 cups of the solid vegetables and set aside. Use an immersion blender to \npuree the soup in the pot. If you don\u2019t have an immersion blender, let the soup cool slightly, \ntransfer it to a blender or food processor, in batches if necessary, and puree until smooth. \nReturn the soup to the pot.\n3. Add the reserved vegetables, lime juice, and jalape\u00f1o. Bring the soup to a boil. Stir in the \nbok choy and cook for 30 seconds. Taste and season with up 1/2 teaspoon salt. Ladle the \nsoup into bowls and garnish with the remaining 2 tablespoons chopped cilantro.\nPer  Serving (1 cup): Calories 90; Total Fat 3 g; Sat Fat 0 g; Protein 2 g; Carbs 15 g; Fiber 3 g; Cholesterol 0 mg; Sodium 270 mg. \n\n23Shredded Tuscan Kale, Tomato &amp;  \nAvocado Salad\nAdapted from Fresh and Fast Vegetarian  by Marie Simmons\nMakes 4 servings\nSALAD\n1 small bunch (about 10 ounces) T uscan kale,* washed and dried\n2 tablespoons fresh lime juice\n1 tablespoon extra-virgin olive oil\n1/8 teaspoon coarse salt\nSALSA\n1 avocado, halved, pitted, peeled and cut into \u00bc-inch dice\n1 ripe tomato, cut into \u00bc-inch dice with seeds and juice\n\u00bd cup diced (\u00bc inch) red onion\n1 teaspoon finely chopped seeded jalape\u00f1o pepper, plus more to taste\n1 small garlic clove, grated\n1 tablespoon lime juice\n1 tablespoon extra-virgin olive oil\n\u00bc teaspoon coarse salt\n\u00bc cup unsalted roasted pepitas (pumpkin seeds) or roasted sunflower seeds\nDIRECTIONS\n1. To prepare the kale, cut along both sides of the stem of each leaf with a sharp knife or pull \nthe ruffled leaves away from the stems with your hands. Discard the stems. Gather a bunch \nof the long kale leaves together on the cutting board and slice into thin (\u00b9\u20448-inch) crosswise \nslices. You should have 4 to 6 cups lightly packed.\n2. Combine the kale, lime juice, oil, and salt in a large bowl. Rub the ingredients together \nwith your hands (as though giving the kale a massage) until the leaves wilt, 1 to 2 minutes. \nSet aside.\n3. To make the salsa: Combine the avocado, tomato, red onion, jalape\u00f1o, garlic, lime juice, \noil, and salt and stir to blend.\n4. Add the salsa to the kale and toss to combine. Sprinkle the salad with the pepitas. Serve at \nroom temperature.\nPer Serving: Calories 240; Total Fat 19 g; Sat Fat 3 g; Protein 6 g; Carbs 16 g; Fiber 6 g; Cholesterol 0 mg; Sodium 220 mg. \n*Tuscan kale is also known as lacinato kale, black kale, and dinosaur kale.\n24Curried Lentils with Walnuts, Spinach &amp; Cherry Tomatoes \nAdapted from Fresh and Fast Vegetarian  by Marie Simmons\nMakes 4 servings\nINGREDIENTS\n1 cup brown lentils\n2 tablespoons extra-virgin olive oil\n1 cup chopped onion\n2 teaspoons curry powder\n1 garlic clove, grated\n2 bags (5\u20136 ounces each) baby spinach (8\u201310 cups packed), rinsed and drained\n1 cup small cherry or grape tomatoes, stems removed\n2 tablespoons finely chopped fresh mint\n\u00bd cup chopped walnuts\n\u00bd cup plain yogurt\nDIRECTIONS\n1. Bring a medium saucepan half full of water to a boil. Add the lentils and cook, uncovered, \nuntil tender but not mushy, 18 to 20 minutes. Drain and set aside.\n2. Heat the oil in a large skillet until hot enough to sizzle a piece of onion. Add the onion \nand cook, stirring, until tender, about 5 minutes. Add the curry powder and garlic and \ncook, stirring, for 1 minute. Add the cooked lentils, spinach, tomatoes and mint and cook, \nstirring, until heated through, about 5 minutes.\n3. Meanwhile, heat the walnuts in a small skillet over medium heat, stirring, until toasted, \nabout 5 minutes. Sprinkle the walnuts over the lentils and serve with the yogurt to spoon \nover the top.\nPer Serving: Calories 400; Total Fat 17 g; Sat Fat 2 g; Protein 18 g; Carbs 47 g; Fiber 20 g; Cholesterol 0 mg; Sodium 150 mg. \n\n25Oven-Roasted Stuffed Portobello Mushrooms\nAdapted from Fresh and Fast Vegetarian  by Marie Simmons\nMakes 4 servings\nINGREDIENTS\n4 large Portobello mushrooms, wiped clean, stems removed and reserved\n4 tablespoons extra-virgin olive oil\n\u00bd cup chopped onion\n1 cup coarse bread crumbs from lightly toasted whole wheat bread\n2 tablespoons finely chopped fresh Italian parsley\n2 tablespoons oil-packed sun-dried tomatoes, drained, blotted dry, and chopped\n1 garlic clove, grated\n\u00bc teaspoon coarse salt \nFreshly ground black pepper\nDIRECTIONS\n1. Preheat the oven to 400\u00b0F . Finely chop the mushroom stems.\n2. Meanwhile, heat 2 tablespoons of the oil in a medium skillet until it is hot enough to \nsizzle a piece of onion. Add the onion and chopped mushroom stems and cook, stirring, \nover medium heat until golden, about 5 minutes. Add the bread crumbs, parsley, sun-\ndried tomatoes and garlic and cook, stirring, until the crumbs are heated through, about 2 \nminutes. Sprinkle with salt and pepper to taste and set aside.\n3. Brush the tops and bottoms of the mushroom caps with the remaining 2 tablespoons oil. \nSprinkle on both sides with a pinch salt and a grinding of black pepper. Place on a baking \nsheet, rounded sides up, add \u00bc cup water and roast for 10 minutes.\n4. Remove the pan from the oven. T urn the caps over, fill with the crumb mixture, dividing it \nevenly, and roast until browned and crisp, about 10 minutes more. T ransfer to a platter and \nserve.\nPer Serving: Calories 190; Total Fat 15 g; Sat Fat 2 g; Protein 3 g; Carbs 12 g; Fiber 2 g; Cholesterol 0 mg; Sodium 200 mg. \n26ASIAN RECIPES FROM  \nNINA SIMONDS\nHot &amp; Sour Salmon with Greens\nAdapted from A Spoonful of Ginger  by Nina Simonds\nMakes 6 servings\nINGREDIENTS\n2\u00bd pounds baby bok choy or bok choy, stem ends and leaf  \ntips trimmed\n8 whole scallions, ends trimmed, cut into thin slices  \non the diagonal\n\u00bc cup fresh ginger cut into very thin julienne shreds\n6 salmon steaks, about 6 ounces each\n3 cups cooked brown rice\nDRESSING\n3 tablespoons reduced-sodium soy sauce\n2 tablespoons Chinese black vinegar or balsamic vinegar\n2 tablespoons sugar\n1 tablespoon minced garlic\nDIRECTIONS\n1. T rim the tough outer leaves from the bok choy and discard. Rinse the stalks and leaves and \ndrain.  Cut the stalks in half lengthwise.  Cut the halves diagonally into 2-inch sections.  In \na bowl, toss the scallions and ginger with the bok choy sections.  Arrange on a heatproof \nplatter. \n2. Mix the ingredients of the dressing and pour into a serving bowl.\n3. Preheat the oven to 450\u00b0F . Place the salmon steaks on top of the greens. Pour into a \nroasting pan several inches of water and heat until boiling. Carefully place the platter of \nsalmon and vegetables on top of a rack or steamer tray in the roasting pan.  Cover the top \nof the pan tightly with aluminum foil.  Bake 7 to 9 minutes, or until the fish is cooked.  \n4. Serve the salmon from the heat-proof platter or arrange the steamed vegetables and salmon \non serving plates.  Spoon the dressing on top and serve with brown rice. \nPer Serving: Calories 430; Total Fat 14 g; Sat Fat 2 g; Protein 44 g; Carbs 32 g; Fiber 4 g; Cholesterol 105 mg; Sodium 480 mg. \n\n\n27Spicy Garlic Broccoli with Pine Nuts\nAdapted from A Spoonful of Ginger  by Nina Simonds\nMakes 6 servings\nINGREDIENTS\n1\u00bd pounds broccoli\n\u00bc cup pine nuts\n1\u00bd teaspoons canola or corn oil\n1\u00bd teaspoons toasted sesame oil\n1 teaspoon hot chili paste or \u00be teaspoon crushed dried chilies\n2 tablespoons minced garlic\n2\u00bd tablespoons rice wine or sake, mixed with 2 tablespoons water\nSAUCE (MIXED TOGETHER IN A BOWL UNTIL THE SUGAR IS DISSOLVED)\n1 tablespoon reduced sodium-soy sauce\n1 teaspoon sugar\nDIRECTIONS\n1. T rim the ends of the broccoli, separate the florets, peel the outer skin of the stem and cut it \non the diagonal into 1-inch lengths. \n2. Toast the pine nuts until golden in a 300\u00b0F oven, turning them occasionally so that they \ncook evenly for about 20 minutes. \n3. Heat a wok or large skillet, add the oils, and heat until hot, about 20 seconds. Add the chili \npaste or crushed chilies and garlic, and stir-fry, tossing with a slotted spoon over medium \nheat until fragrant, about 15 seconds. T urn the heat to high. \n4. Add the stem sections of the broccoli and stir-fry.  Pour in the rice wine and water and \ncook, tossing, about 30 seconds, then cover and cook about 1\u00bd to 2 minutes, until the \nstems are just tender. Add the florets and toss over high heat, cooking for about 1\u00bd minutes \nor until just tender.  \n5. Add the premixed sauce and toss lightly for 15 seconds. Add the toasted pine nuts and stir-\nfry a few seconds to combine the ingredients. Scoop the ingredients into a serving bowl and \nserve immediately. \nPer Serving: Calories 90; Total Fat 6 g; Sat Fat 1 g; Protein 4 g; Carbs 8 g; Fiber 4 g; Cholesterol 0 mg; Sodium 125 mg. \n28Rainbow Salad with Spicy Peanut Dressing\nAdapted from A Spoonful of Ginger  by Nina Simonds\nMakes 6 servings\nINGREDIENTS\n14 ounces firm tofu, cut into \u00bd inch slabs\n\u00bd pound whole wheat spaghetti\n1 teaspoon toasted sesame oil\n2 cups grated carrots\n1\u00bd cups grated cucumbers, seeds and skin removed\n1\u00bd cups grated red cabbage\n1 red bell pepper, cored, seeded, and sliced into thin strips\n1 yellow pepper, cored seeded, and sliced into thin strips\nSPICY PEANUT DRESSING\n2 tablespoons minced fresh ginger\n\u00bd tablespoon minced garlic\n1 teaspoon hot chili paste, or more to taste\n\u00bd cup smooth peanut butter\n\u00bc cup reduced-sodium soy sauce\n1 tablespoon sugar\n2 tablespoons Chinese black vinegar or balsamic vinegar\n3 tablespoons toasted sesame oil\n\u00bc cup water\nDIRECTIONS\n1. Wrap the tofu slabs in paper towels or a cotton towel and place a heavy weight, such as a \ncast-iron skillet, on top. Let stand for 30 minutes to press out the excess water, then cut the \ntofu into matchstick-size shreds about 2 inches long. \n2. Bring 3 quarts water to a boil, add the spaghetti, and cook until just tender. Drain in a \ncolander, toss with the sesame oil, and arrange on a platter. \n3. Arrange the carrots, cucumbers, bean sprouts, red and yellow pepper strips, and tofu in \nmounds or separate concentric circles on the serving platter with the noodles. \n4. To prepare the Spicy Peanut Dressing: In a food processor fitted with a steel blade or a \nblender, chop the ginger and garlic until fine. Add the remaining ingredients in descending \norder, ending with the water. Process until smooth. The sauce should have the consistency \nof heavy cream. If it is too thick, add more water; if too thin, add more peanut butter. Pour \nthe sauce into a serving container, and offer the vegetables and sauce to each diner to mix as \ndesired. \nPer Serving: Calories 430; Total Fat 21 g; Sat Fat 3.5 g; Protein 18 g; Carbs 46 g; Fiber 9 g; Cholesterol 0 mg; Sodium 530 mg. \n&lt;/document_content&gt;\n\n&lt;question&gt;\nwhat are the ingredients for Quick Tostados? \n&lt;/question&gt;\n\"\"\"\n                        }\n                    ]\n                },\n                {\n                    \"role\": \"assistant\",\n                    \"content\": [\n                        {\n                            \"text\": \"&lt;thinking&gt;\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"maxTokens\": 5000,\n                \"stopSequences\": [\"&lt;/answer&gt;\"]\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-lite-v1:0\" \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"&lt;document_content&gt;\\n1\\nEAT REAL\\nRECIPES FROM SOME OF  \\nAMERICA'S BEST CHEFS\\nCenter  for SCienCe in the Publi C intere St\\nI\\nFood Day Recipes\\nTable of ContentsFood Day is a celebration, and what would a celebration, especially one about food, be without \\ndelicious food.  We've adapted a variety of delicious, healthy, easy-to-prepare recipes from some of \\nthe country's most prominent chefs and cookbook writers.  Choose seasonal, locally grown, and \\norganic ingredients when possible.  If you are celebrating Food Day, October 24, with a dinner \\nor potluck at your home, please consider using some of these recipes\u2014but, of course, you can \\ncook them any other day, too.  They'll brighten up your dinner table and delight your taste buds.\\nSOUPS\\nFennel &amp; Apple Soup  .................................................................................................... 1\\nCarrot, Sweet Potato &amp; Ginger Soup  ................................................................... 25\\nSALADS \\nSquash &amp; Mushroom Salad  ........................................................................................ 4\\nGreen Bean Salad with Red Onion &amp; Salsa Dressing  ...................................... 5\\nSweet &amp; Tangy Three Bean Salad  ......................................................................... 10\\nLentil, Apple &amp; Walnut Salad with Cider Dressing  .......................................... 19\\nShredded Tuscan Kale Tomato &amp; Avocado Salad  ........................................... 26\\nSIDES\\nGreen Beans with Charred Onions  ......................................................................... 2\\nMussels with Pepperonata  ......................................................................................... 3\\nSweet Potato &amp; Caramelized Onions with Chili Dressing  .............................. 6\\nCouscous with Dried Cranberries &amp; Pecans  ....................................................... 8\\nTuscan Kale &amp; White Bean Ragout  ........................................................................ 14\\nBraised Kohlrabi with Fennel &amp; Leeks  .................................................................. 16\\nRosemary-Orange Cauliflower Puree  ................................................................... 17\\nPomegranate-Cinnamon Tabbouleh  ..................................................................... 18\\nPearl Barley with Spinach Pesto  .......................................................................... 20\\nSpicy Garlic Broccoli with Pine Nuts  ................................................................... 23\\nMAINS\\nQuick Tostados  .............................................................................................................. 7\\nAutumn Vegetable Curry  ........................................................................................... 11\\nHoney-Crisp Oven-Fried Chicken  .......................................................................... 12\\nGumbo with Smoked Turkey &amp; Wild Rice  ........................................................... 15\\nHot &amp; Sour Salmon with Greens  ............................................................................ 22\\nRainbow Salad with Spicy Peanut Dressing  ..................................................... 24\\nCurried Lentils with Walnuts, Spinach &amp; Cherry Tomatoes  ........................ 27\\nOven Roasted Stuffed Portobello Mushrooms  ................................................ 28\\nDESSERTS\\nBaked Pumpkin Orange Custard  ............................................................................. 9\\nApple Crisp  ..................................................................................................................... 13\\nYogurt Panna Cotta with Cranberry Pear Sauce  ............................................. 21\\nIIDAN BARBER\\nDan Barber is the chef and owner of the Blue Hill and Blue \\nHill at Stone Barns restaurants. He is also an accomplished \\nwriter on the topic of food and agriculture policy and was \\nrecently appointed to serve on President Barack Obama's \\nCouncil on Physical Fitness, Sports and Nutrition.\\nMARIO BATALI\\nMario Batali is a Food Network chef and star of Molto Gusto , \\nIron Chef , and a number of other shows. He owns several \\nrestaurants around the world and has penned cookbooks such \\nas Simple Italian Foods  and Spain\u2026A Culinary Roadtrip  with \\nGwyneth Paltrow.\\nRICK BAYLESS\\nChef Bayless is known for his expertise on Mexican cuisine. \\nHe has written several cookbooks including Mexican Everyday  \\nand Mexican Kitchen: Capturing the Vibrant Flavors of a World-\\nClass Cuisine . Most recently, he appeared on the popular Bravo \\nTV show Top Chef Masters. \\nMARK BITTMAN\\nMark Bittman is a well-known food journalist and regular \\ncontributor to The New York Times . He authored How to Cook \\nEverything , and is a self-proclaimed \"home cook\" who has \\ncooked with some of the world's top chefs.\\nELLIE KRIEGER\\nThis Food Network star is a registered dietician known for \\nher health-conscious and delicious dishes. She stars in Healthy \\nAppetite with Ellie Krieger , and is also author of the best-selling \\ncookbook So Easy: Luscious Healthy Recipes for Every Meal of the \\nWeek  and Comfort Food Fix: Feel Good Favorites Made Healthy. EMERIL LAGASSE\\nEmeril is known for his big personality and flavorful food. He \\nhas appeared on nearly 3,000 shows on The Food Network \\nand has made a number of other television appearances.  He is \\nchef-proprietor of 12 restaurants across the country as well as \\nhis main restaurant, Emeril's, in New Orleans.\\nLYNNE ROSSETTO KASPER\\nLynne Rosetto Kasper is an acclaimed food writer and host \\nof the radio show The Splendid T able .  She has penned several \\nbooks about healthy eating including bestseller The Splendid \\nT able , which won both the James Beard and Julia Child \\nCookbook of the Year awards in 1994.\\nKATE SHERWOOD\\nKate is the culinary director of Nutrition Action Healthletter, \\nthe world's largest-circulation health and nutrition newsletter. \\nT rained at the Culinary Institute of America, Kate has been a \\nfreelance food stylist at The Food Network.\\nMARIE SIMMONS\\nMarie Simmons is an award-winning cookbook author, \\ncooking teacher, and food writer from the Bay Area.  She was \\na columnist for Bon Appetit magazine for 18 years and has \\nwritten many popular cookbooks, the most recent of which is \\nThings Cooks Love .\\nNINA SIMONDS\\nNina Simonds is well-known for her Spices of Life  blog and \\nscintillating cookbooks such as A Spoonful of Ginger . She \\nspecializes in healthy eating and is known in the culinary \\nworld as an expert on Asian cuisine.Food Day's Recipe \\nContributors\\nCenter for Science in the Public Interest   |   1220 L Street, NW, Suite 300, Washington, DC 20005\\nThis booklet was compiled by the Center for Science in the Public Interest, sponsor of national Food Day. Where indicated, recipes were adapted by Kate Sherwood.  \\nFor further information visit www.cspinet.org or www.FoodDay.org.\\n\u00a9 2011 by Center for Science in the Public Interest.\\nIII\"One of the best things you can do for your health is to cook and \\nenjoy family meals made with fresh, colorful seasonal ingredients,\" \\nsaid chef and author Ellie Krieger, host of Healthy Appetite on the \\nFood Network and a member of the Food Day advisory board.  \"Food \\nDay is a chance to celebrate the power good food has to nourish us \\nand bring us together.\"  \\n\"Food Day is a great opportunity for restaurants to show their \\ncommitment to locally produced artisan foods, to showcase a variety \\nof whole grains, and to reach out to an audience hungry for more \\nsustainable ways to consume that are more in keeping with the health \\nof our bodies and our environment,\" said Ellen Gray, co-owner, along \\nwith her husband Todd Gray, of Equinox Restaurant, Watershed, and \\nTodd Gray's Muse at the Corcoran, all in Washington, D.C.\\n\"Why Food Day? It is time to make real food the number-one priority \\nin our country,\" said Alice Waters, proprietor of the acclaimed Chez \\nPanisse restaurant in Berkeley, Calif.  \"The choices we make about \\nfood affect our health, the health of the planet\u2014and the way we live \\nour lives.\"\\nWHAT CHEFS  \\nARE SAYING  \\nABOUT  \\nFOOD DAY\\n1DAN BARBER'S FALL RECIPE\\nFennel &amp; Apple Soup\\nAdapted for Food Day\\nMakes about 8 cups\\nINGREDIENTS\\n1 onion, minced\\n3 small shallots, minced\\n3 fennel bulbs, diced\\n1 apple, peeled, cored and diced\\n3 tablespoons extra-virgin olive oil\\n1 tablespoon fennel seed\\n1 quart vegetable stock or low-sodium broth\\n\u00bd teaspoon fresh thyme leaves\\n\u00bd teaspoon salt \\nFreshly ground black pepper\\nDIRECTIONS\\n1. Gently saut\u00e9 the onion and shallots in 1 tablespoon olive oil without browning them. \\n2. Add the fennel and apple. Season with pepper. \\n3. Stir in the fennel seeds and cover with stock. Simmer for 30 minutes. \\n4. Add thyme, and season with up to \u00bd teaspoon salt and more pepper to taste. \\n5. T ransfer to a blender and puree, adding remaining 2 tablespoons olive oil.\\nPer Serving (1 cup): Calories 110; Total Fat 6 g; Sat Fat 0.5 g; Protein 2 g; Carbs 14 g; Fiber 4 g;  Cholesterol 0 mg;  Sodium 260 mg.\\n2MARIO BATALI'S ITALIAN RECIPES\\nGreen Beans with Charred Onions \\nAdapted from Molto Gusto  by Mario Batali\\nMakes 6 servings\\nINGREDIENTS\\n1 pound green beans or haricots verts \\n2 medium sweet onions, such as Vidalia or Walla Walla \\n1\u00bd tablespoons balsamic vinegar \\n1\u00bd tablespoons orange juice \\n2 tablespoons extra-virgin olive oil \\n\u00bc teaspoon Maldon or flaky sea salt \\nDIRECTIONS\\n1. Bring 4 quarts of water to a boil in a large pot. Add the beans and blanch until  \\ncrisp-tender, 3 to 5 minutes. Drain in a colander and cool under cold running water;  \\ndrain well. \\n2. Halve the onions lengthwise and trim off the ends. Cut lengthwise into \u00bd-inch-wide slices. \\nHeat a dry 12-inch saut\u00e9 pan over medium-high heat until very hot. Add the onions and \\nsaut\u00e9 until charred in spots but still crunchy, 4 to 6 minutes. During the last minute or so, \\nadd the beans, stirring and tossing to warm them through. \\n3. T ransfer the beans and onions to a large bowl. Whisk the balsamic vinegar, orange juice, \\nand oil together in a small bowl. Pour over the beans and onions, tossing to coat. Let stand \\nfor at least 10 minutes, or up to 1 hour, before serving. Sprinkle the beans with salt and \\nserve.\\nPer Serving: Calories 80; Fat 4.5 g; Sat Fat 0.5 g; Protein 2 g; Carbs 10 g; Fiber 3 g; Cholesterol 0 mg; Sodium 90 mg. \\n \\n3Mussels with Peperonata \\nAdapted from Molto Gusto  by Mario Batali\\nMakes 8 servings\\nINGREDIENTS\\n5 garlic cloves, thinly sliced \\n\u00bd cup extra-virgin olive oil \\n1 pound red bell peppers (3 large), cored, seeded, and cut into \u00bd-inch dice \\n1 pound green bell peppers (3 large), cored, seeded, and cut into \u00bd-inch dice \\n1 red finger chile or serrano chile, thinly sliced \\n\u00be cup dry white wine \\n2 pounds PEI* or other small mussels, scrubbed and debearded \\n1 cup no-salt-added diced tomatoes, simmered until reduced by half \\n\u00bc teaspoon Maldon or other flaky sea salt \\nDIRECTIONS\\n1. Combine half the garlic and \u00bc cup of the oil in a 12-inch saut\u00e9 pan and heat over medium-\\nlow heat just until the garlic is slightly softened, about 1 minute; do not allow to color. \\n2. Add the bell peppers and sliced chili and cook, stirring occasionally, until the peppers are \\nsoftened, 15 to 20 minutes. \\n3. T ransfer to a medium bowl and let cool. Combine the remaining \u00bc cup oil and the \\nremaining garlic in a large pot and cook, stirring, over medium-high heat just until the \\ngarlic is slightly softened, about 1 minute. Add the wine and mussels, cover, and steam \\nuntil the mussels open, about 4 minutes; transfer the mussels to a bowl as they open. \\n4. Remove the pot from the heat and set aside. Add the tomato sauce and pepper mixture \\nto the mussel broth and bring to a simmer. Season with the salt, remove from the heat, \\nand gently stir in the mussels. Serve warm or at room temperature. (The mussels can be \\nrefrigerated for up to 3 days; serve cold, or bring to room temperature before serving.)\\nPer Serving : Calories 270; Fat 16 g; Sat Fat 2.5 g; Protein 15 g; Carbs 13 g; Fiber 2 g; Cholesterol 30 mg; Sodium 390 mg. \\n*Prince Edward Island \\n4Squash &amp; Mushroom Salad  \\nAdapted from Molto Gusto  by Mario Batali\\nMakes 6 servings\\nINGREDIENTS\\n1 small butternut squash (about 1\u00bc pounds), peeled, seeded, and cut into \u00bd-inch pieces \\n\u00bd pound baby shiitake mushroom caps, left whole, or larger caps, cut into \u00bc-inch-thick slices\\n3 large shallots, cut into \u00bc-inch dice \\n\u00bc cup extra-virgin olive oil \\n\u00bd teaspoon Maldon or other flaky sea salt \\nCoarsely ground black pepper \\n1 tablespoon truffle oil or extra-virgin olive oil \\n2 tablespoons balsamic vinegar \\nJuice of 1 lemon \\n1 teaspoon minced fresh rosemary \\n\u00bc pound cremini mushrooms, trimmed and thinly sliced \\nDIRECTIONS\\n1. Preheat the broiler. Combine the squash, shiitake mushrooms, and shallots in a large bowl. \\nAdd the oil, tossing to coat. Season with salt and pepper. \\n2. Spread the vegetables out on a large baking sheet and broil, stirring occasionally, until the \\nsquash is slightly charred and just tender, 15 to 20 minutes. T ransfer to a serving bowl. \\n3. Meanwhile, whisk the balsamic vinegar, lemon juice, truffle (or extra-virgin) oil, and \\nrosemary together in a small bowl. \\n4. Scatter the cremini over the warm salad and add the vinaigrette, tossing to coat. Serve warm \\nor at room temperature.\\nPer Serving: Calories 140; Fat 9 g; Sat Fat 1.5 g; Protein 2 g; Carbs 14 g; Fiber 3 g; Cholesterol 0 mg; Sodium 170 mg.\\n \\n5MEXICAN RECIPES FROM RICK BAYLESS  \\nGreen Bean Salad with Red Onion &amp; Salsa Dressing\\nAdapted from Mexican Everyday by Rick Bayless\\nMakes 6 servings\\nINGREDIENTS\\n1 pound green beans, trimmed\\n1 small red onion, thinly sliced\\n3 tablespoons olive oil\\n3 tablespoons bottled salsa, preferably green tomatillo salsa\\n2 teaspoons fresh lime juice\\n3 sprigs cilantro, plus more for garnish\\n\u00bc teaspoon kosher salt\\nDIRECTIONS\\n1. Steam the green beans until tender-crunchy, about 3 minutes. Allow them to cool then toss \\nwith the red onion in a large bowl.  \\n2. Combine the remaining ingredients in a blender or mini food processor. Process until \\nsmooth. \\n3. Toss the dressing with the green beans and red onion.\\n4. Garnish with some cilantro leaves. \\nPer Serving: Calories 90; Fat 7 g; Sat Fat 1 g; Protein 1 g; Carbs 7 g; Fiber 2 g; Cholesterol 0 mg; Sodium 140 mg. \\n6Sweet Potato with Caramelized Onions &amp;  \\nGuajillo Chili Dressing\\nAdapted from Mexican Everyday by Rick Bayless\\nMakes 6 servings\\nINGREDIENTS\\n1/3 cup olive oil\\n1 dried guajillo* chili, stem and seeds removed\\n1 clove garlic\\n2 tablespoons balsamic vinegar\\n\u00bd teaspoon kosher salt\\n1 large red onion, chopped\\n2 pounds sweet potato, cut into \u00bd-inch cubes\\nDIRECTIONS\\n1. Pour the oil into a very large skillet and set over medium heat. When the oil is warm, add \\nthe chili and garlic. T urn and stir until the chili is toasty smelling (about 30 seconds). \\nRemove from the heat.  \\n2. Put the chili in a blender with the vinegar and salt.  Blend for 30 seconds. When the oil and \\ngarlic are cool, add to the blender.  Set the skillet aside without washing. Blend the dressing \\nuntil smooth.\\n3. Return the skillet (it will have a light coating of oil) to medium heat and add the onion. \\nCook, stirring regularly, until soft and richly brown, 9-10 minutes. \\n4. Add the sweet potatoes. Blend the dressing for a few more seconds and add to the skillet \\nwith the potatoes. Stir well. Cover and cook until the potatoes are tender, about 10 \\nminutes. Uncover and allow to cool.  Taste and adjust the seasoning. \\nPer Serving: Calories 240; Fat 12 g; Sat Fat 1.5 g; Protein 3 g; Carbs 31 g; Fiber 5 g; Cholesterol 0 mg; Sodium 240 mg.\\n* You can use any mild or medium dried chili. \\n7Quick Tostados*\\nAdapted from Mexican Everyday by Rick Bayless\\nMakes 6 servings\\nINGREDIENTS\\n1 tablespoon canola oil\\n2 cloves garlic, minced\\n2 15-ounce cans no-salt-added black beans\\n\u00bc teaspoon kosher salt\\n2 cups cooked shredded chicken breast or diced smoked tofu\\n6 cups shredded romaine\\n\u00bc cup low-fat sour cream\\n2 tablespoons Mexican hot sauce\\n12 tostados\\n1 avocado, diced\\n\u00bd cup grated Mexican cheese (queso anejo or blanco)\\n\u00bd cup chopped cilantro \\nDIRECTIONS\\n1. Heat the oil in a medium skillet over medium heat. Add the garlic and stir for about a \\nminute. Then add the beans with their liquid.  Mash the beans with a potato masher or the \\nback of a spoon until you have a coarse puree, then cook, stirring regularly, until the beans \\nare thickened just enough to hold their shape in a spoon, about 10 minutes.  Taste and add \\nup to \u00bc teaspoon salt.\\n2. Place the romaine in a large bowl. Mix together the sour cream and hot sauce. Drizzle over \\nthe romaine and toss to combine. \\n3. Spread each tostado with a portion of beans.  Top with chicken and lettuce. Dot with \\navocado. Sprinkle with cheese and cilantro.  Serve right away with more hot sauce for \\ndoctoring.\\nPer Serving: Calories 420; Fat 18 g; Sat Fat 4 g; Protein 24 g; Carbs 42 g; Fiber 12 g; Cholesterol 40 mg; Sodium 430 mg. \\n*Tostados are flat, crisp-fried corn tortillas.\\n \\n8MARK BITTMAN'S AUTUMN RECIPES  \\nCouscous Salad with Dried Cranberries &amp; Pecans \\nFrom Food Matters Cookbook by Mark Bittman\\nMakes 4 servings \\nINGREDIENTS\\n1 cup couscous, preferably whole wheat\\nSalt\\n2 large carrots, grated \\n\u00bd cup chopped pecans \\n\u00bd cup dried cranberries \\n\u00bc cup chopped scallions \\n\u00bc cup olive oil, or more as needed \\nGrated zest and juice of 1 lemon, or more juice as needed \\n1 teaspoon coriander \\nPinch of cayenne, or to taste \\nBlack pepper \\n\u00bd cup chopped fresh parsley \\n1 tablespoon chopped fresh sage, or 1 teaspoon dried\\nDIRECTIONS\\n1. Put the couscous in a small pot and add 1\u00bd cups water and a pinch of salt. Bring the water \\nto a boil, then cover and remove from the heat. Let steep for at least 10 minutes, or up to \\n20. \\n2. Put the slightly cooled couscous in a large salad bowl along with the carrots, pecans, \\ncranberries, scallions, oil, and lemon zest and juice and sprinkle with the spices and pepper. \\nUse 2 big forks to combine, fluffing the couscous and tossing gently to separate the grains. \\n(The salad can be made up to this point and refrigerated for up to a day; bring to room \\ntemperature before proceeding.) \\n3. Stir in the parsley and sage. Taste and adjust the seasoning, moisten with a little more oil \\nand lemon juice as you like, and serve. \\nPer Serving (with \u00be teaspoon salt): Calories 450; Fat 24  g; Sat Fat 3 g; Protein 9 g; Carbs 56 g; Fiber 10 g; Cholesterol 0 mg; Sodium 390 mg. \\n9Baked Pumpkin-Orange Custard \\nFrom Food Matters Cookbook by Mark Bittman\\nMakes 6-8 servings \\nINGREDIENTS\\n2 tablespoons unsalted butter, melted, plus more for greasing the pan \\n2 eggs \\n\u00be cup brown sugar \\n12 ounces soft silken tofu\\n3 cups (two 15-ounce cans) pur\u00e9ed pumpkin (unsweetened and unseasoned) \\n\u00bd teaspoon cinnamon, or more to taste \\n\u00bc teaspoon nutmeg \\n\u00bc teaspoon allspice \\nGrated zest and juice of 1 orange \\nPinch of salt \\nDIRECTIONS\\n1. Heat the oven to 350\u00b0F . Grease an 8- or 9-inch square pan or pie plate with a little butter. \\nUse an electric mixer or a whisk to beat the eggs and sugar in a large bowl until light. Add \\nthe tofu and beat until smooth, a minute or 2 longer. \\n2. Add the 2 tablespoons melted butter and remaining ingredients and beat until everything \\nis thoroughly combined. Pour the mixture into the prepared pan and bake until set around \\nthe edges but still a little jiggly at the center, about 1 hour. Let cool completely before \\nserving, or refrigerate for up to a day and serve cold.\\nPer Serving (for 1/8  of the custard): Calories 180; Fat 5 g; Sat Fat 2.5 g; Protein 5 g; Carbs 30 g; Fiber 3 g; Cholesterol 55 mg; Sodium 30 mg. \\n10ELLIE KRIEGER'S COMFORT FOOD\\nSweet &amp; Tangy Three Bean Salad\\nAdapted from Comfort Food Fix by Ellie Krieger\\nMakes 8 servings\\nINGREDIENTS\\n\u00bd small red onion, thinly sliced into half-moons\\n\u00be pound green beans, trimmed\\n\u00be pound wax beans, trimmed\\n\u00bc cup honey\\n\u00bd cup cider vinegar\\n3 tablespoons extra-virgin olive oil\\n\u00bd teaspoon salt\\n\u00bc teaspoon freshly ground black pepper\\n1 15-ounce can no-salt-added kidney beans, rinsed and drained\\n1 medium red bell pepper, trimmed and sliced into matchsticks\\nDIRECTIONS\\n1. To mellow the bite of the onion, place it in a bowl of ice water and allow it to soak for 30 \\nminutes. Drain.\\n2. Place the green and wax beans in a steam basket fitted over a pot of boiling water. Cover \\nand steam until crisp-tender, about 4 minutes. Remove from the heat and allow to cool. \\nCut into 2-inch lengths.\\n3. In a large bowl, whisk together the honey, vinegar, oil, salt, and black pepper. Add the \\nonion, green and wax beans, kidney beans, and bell pepper and toss to combine. Cover and \\nrefrigerate for at least 1 hour before serving.\\nPer Serving: Calories 160; Fat 5 g; Sat Fat 1 g; Protein 5 g; Carbs 23 g; Fiber 7 g; Cholesterol 0 mg; Sodium 160 mg. \\n11Autumn Vegetable Curry\\nAdapted from Comfort Food Fix by Ellie Krieger\\nMakes 6 servings\\nINGREDIENTS\\n1 large onion, coarsely chopped\\n4 cloves garlic, peeled\\n1 1\u00bd-inch length fresh ginger, peeled and thinly sliced\\n1\u00bd tablespoons yellow curry powder\\n\u00bc teaspoon cayenne pepper, plus more to taste\\n2 tablespoons canola oil\\n2 tablespoons tomato paste\\n2 cups low-sodium vegetable broth\\n1 cup light coconut milk\\n1 cinnamon stick\\n\u00bc teaspoon freshly ground black pepper, plus more to taste\\n\u00bd head cauliflower, broken into 1\u00bd-inch-wide florets  \\n(about 3 cups)\\n1 pound sweet potatoes, peeled and cut into 1-inch cubes\\n2 large carrots, peeled and cut into 1-inch rounds\\n2 tomatoes, cored and chopped\\nGrated zest of 1 lime\\n2 tablespoons fresh lime juice\\n1 15-ounce can no-salt-added chickpeas, drained and rinsed \\n5 cups fresh baby spinach leaves\\n\u00be teaspoon salt\\n\u00bc cup chopped fresh cilantro leaves\\n3 cups cooked brown rice, for serving, optional\\nDIRECTIONS\\n1. Place the onion, garlic, ginger, curry powder, and cayenne pepper in a food processor and \\nprocess to combine. Add the oil and process until a smooth puree is formed. T ransfer the \\ncurry puree to a large pot and cook over medium heat, stirring frequently, about 5 minutes. \\nAdd the tomato paste and cook, stirring frequently, until the mixture begins to darken, \\nabout 5 minutes more.\\n2. Add the vegetable broth, coconut milk, cinnamon stick and \u00bc teaspoon black pepper and \\nbring to a boil. Reduce the heat and simmer for 10 minutes. Add the cauliflower, sweet \\npotatoes, carrots, and tomatoes, season with salt and pepper, and return to a boil. Reduce \\nthe heat to medium low, cover, and simmer until the vegetables are tender, about 25 \\nminutes. Remove the cinnamon stick. Stir in the lime zest and juice, chickpeas, and spinach \\nand cook until the spinach is wilted, about 5 minutes. Season with up to \u00be teaspoon salt.\\n3. Garnish with cilantro and serve with rice.\\nPer Serving: Calories 380; Fat 8 g; Sat Fat 2.5 g; Protein 11 g; Carbs 67 g; Fiber 11 g; Cholesterol 0 mg; Sodium 480 mg. \\n \\n\\n12Honey-Crisp Oven-Fried Chicken\\nAdapted from Comfort Food Fix by Ellie Krieger\\nMakes 6 servings\\nINGREDIENTS\\n6 skinless, bone-in chicken thighs (about 2 pounds)\\n2/3 cup low-fat buttermilk\\n4 cups whole-grain cereal flakes\\n\u00bd teaspoon paprika\\n\u00bd teaspoon garlic powder\\n\u00bd teaspoon kosher salt\\n\u00bc teaspoon freshly ground black pepper\\n\u00bc teaspoon cayenne pepper\\nOlive oil cooking spray\\n2 tablespoons honey\\nDIRECTIONS\\n1. Place the chicken in a bowl with the buttermilk and toss  \\nto coat. Marinate in the refrigerator for at least 1 hour and up to 4 hours. \\n2. Place the cereal flakes in a food processor and process until crumbs form (you should have \\nabout 1 cup of crumbs). \\n3. T ransfer to a shallow dish and mix in the paprika, garlic powder, salt, black pepper, and \\ncayenne pepper.\\n4. Preheat the oven to 350\u00b0F . Spray a baking sheet with cooking spray. \\n5. Remove chicken from butt\n        }\n      ]\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": [\n        {\n          \"text\": \"&lt;thinking&gt;\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"maxTokens\": 5000\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-lite-v1:0\",\n  \"system\": \"You are an AI assistant that answers questions about documents and  correctly cites your sources of information in the document. \\nFollow these instructions:\\n1. Read and understand the question asked under &lt;question&gt;.\\n2. Read through the &lt;document_content&gt; and find the answer to the question. \\n3. Think step-by-step about how the &lt;document_content&gt; may or may not answer the question, and put your thoughts in &lt;thinking&gt; tags\\n4. If you find an answer in the document, format your citation in a list as follows and put into &lt;citation&gt; tags: \\n    [\\n        {\\n            \\\"pageNumber\\\": \\\"the number of the pages where the answer was found\\\",\\n            \\\"text\\\": \\\"The literal, verbatim text found that answers the question\\\",\\n            \\\"section\\\": \\\"A best effort description of the section where the answer was found\\\"\\n        }\\n    ]\\n5. Put your answer in &lt;answer&gt; tags, and ground it in facts using only whats in &lt;document_content&gt;\\n6. If you can't find the answer in the text, just say empty answer tags &lt;answer&gt;&lt;/answer&gt;. Its ok if you can't find the answer!\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"&lt;document_content&gt;\\n1\\nEAT REAL\\nRECIPES FROM SOME OF  \\nAMERICA\u2019S BEST CHEFS\\nCenter  for SCienCe in the Publi C intere St\\nI\\nFood Day Recipes\\nTable of ContentsFood Day is a celebration, and what would a celebration, especially one about food, be without \\ndelicious food.  We\u2019ve adapted a variety of delicious, healthy, easy-to-prepare recipes from some of \\nthe country\u2019s most prominent chefs and cookbook writers.  Choose seasonal, locally grown, and \\norganic ingredients when possible.  If you are celebrating Food Day, October 24, with a dinner \\nor potluck at your home, please consider using some of these recipes\u2014but, of course, you can \\ncook them any other day, too.  They\u2019ll brighten up your dinner table and delight your taste buds.\\nSOUPS\\nFennel &amp; Apple Soup  .................................................................................................... 1\\nCarrot, Sweet Potato &amp; Ginger Soup  ................................................................... 25\\nSALADS \\nSquash &amp; Mushroom Salad  ........................................................................................ 4\\nGreen Bean Salad with Red Onion &amp; Salsa Dressing  ...................................... 5\\nSweet &amp; Tangy Three Bean Salad  ......................................................................... 10\\nLentil, Apple &amp; Walnut Salad with Cider Dressing  .......................................... 19\\nShredded Tuscan Kale Tomato &amp; Avocado Salad  ........................................... 26\\nSIDES\\nGreen Beans with Charred Onions  ......................................................................... 2\\nMussels with Pepperonata  ......................................................................................... 3\\nSweet Potato &amp; Caramelized Onions with Chili Dressing  .............................. 6\\nCouscous with Dried Cranberries &amp; Pecans  ....................................................... 8\\nTuscan Kale &amp; White Bean Ragout  ........................................................................ 14\\nBraised Kohlrabi with Fennel &amp; Leeks  .................................................................. 16\\nRosemary-Orange Cauliflower Puree  ................................................................... 17\\nPomegranate-Cinnamon Tabbouleh  ..................................................................... 18\\nPearl Barley with Spinach Pesto  .......................................................................... 20\\nSpicy Garlic Broccoli with Pine Nuts  ................................................................... 23\\nMAINS\\nQuick Tostados  .............................................................................................................. 7\\nAutumn Vegetable Curry  ........................................................................................... 11\\nHoney-Crisp Oven-Fried Chicken  .......................................................................... 12\\nGumbo with Smoked Turkey &amp; Wild Rice  ........................................................... 15\\nHot &amp; Sour Salmon with Greens  ............................................................................ 22\\nRainbow Salad with Spicy Peanut Dressing  ..................................................... 24\\nCurried Lentils with Walnuts, Spinach &amp; Cherry Tomatoes  ........................ 27\\nOven Roasted Stuffed Portobello Mushrooms  ................................................ 28\\nDESSERTS\\nBaked Pumpkin Orange Custard  ............................................................................. 9\\nApple Crisp  ..................................................................................................................... 13\\nYogurt Panna Cotta with Cranberry Pear Sauce  ............................................. 21\\nIIDAN BARBER\\nDan Barber is the chef and owner of the Blue Hill and Blue \\nHill at Stone Barns restaurants. He is also an accomplished \\nwriter on the topic of food and agriculture policy and was \\nrecently appointed to serve on President Barack Obama\u2019s \\nCouncil on Physical Fitness, Sports and Nutrition.\\nMARIO BATALI\\nMario Batali is a Food Network chef and star of Molto Gusto , \\nIron Chef , and a number of other shows. He owns several \\nrestaurants around the world and has penned cookbooks such \\nas Simple Italian Foods  and Spain\u2026A Culinary Roadtrip  with \\nGwyneth Paltrow.\\nRICK BAYLESS\\nChef Bayless is known for his expertise on Mexican cuisine. \\nHe has written several cookbooks including Mexican Everyday  \\nand Mexican Kitchen: Capturing the Vibrant Flavors of a World-\\nClass Cuisine . Most recently, he appeared on the popular Bravo \\nTV show Top Chef Masters. \\nMARK BITTMAN\\nMark Bittman is a well-known food journalist and regular \\ncontributor to The New York Times . He authored How to Cook \\nEverything , and is a self-proclaimed \u201chome cook\u201d who has \\ncooked with some of the world\u2019s top chefs.\\nELLIE KRIEGER\\nThis Food Network star is a registered dietician known for \\nher health-conscious and delicious dishes. She stars in Healthy \\nAppetite with Ellie Krieger , and is also author of the best-selling \\ncookbook So Easy: Luscious Healthy Recipes for Every Meal of the \\nWeek  and Comfort Food Fix: Feel Good Favorites Made Healthy. EMERIL LAGASSE\\nEmeril is known for his big personality and flavorful food. He \\nhas appeared on nearly 3,000 shows on The Food Network \\nand has made a number of other television appearances.  He is \\nchef-proprietor of 12 restaurants across the country as well as \\nhis main restaurant, Emeril\u2019s, in New Orleans.\\nLYNNE ROSSETTO KASPER\\nLynne Rosetto Kasper is an acclaimed food writer and host \\nof the radio show The Splendid T able .  She has penned several \\nbooks about healthy eating including bestseller The Splendid \\nT able , which won both the James Beard and Julia Child \\nCookbook of the Year awards in 1994.\\nKATE SHERWOOD\\nKate is the culinary director of Nutrition Action Healthletter, \\nthe world\u2019s largest-circulation health and nutrition newsletter. \\nT rained at the Culinary Institute of America, Kate has been a \\nfreelance food stylist at The Food Network.\\nMARIE SIMMONS\\nMarie Simmons is an award-winning cookbook author, \\ncooking teacher, and food writer from the Bay Area.  She was \\na columnist for Bon Appetit magazine for 18 years and has \\nwritten many popular cookbooks, the most recent of which is \\nThings Cooks Love .\\nNINA SIMONDS\\nNina Simonds is well-known for her Spices of Life  blog and \\nscintillating cookbooks such as A Spoonful of Ginger . She \\nspecializes in healthy eating and is known in the culinary \\nworld as an expert on Asian cuisine.Food Day\u2019s Recipe \\nContributors\\nCenter for Science in the Public Interest   |   1220 L Street, NW, Suite 300, Washington, DC 20005\\nThis booklet was compiled by the Center for Science in the Public Interest, sponsor of national Food Day. Where indicated, recipes were adapted by Kate Sherwood.  \\nFor further information visit www.cspinet.org or www.FoodDay.org.\\n\u00a9 2011 by Center for Science in the Public Interest.\\nIII\u201cOne of the best things you can do for your health is to cook and \\nenjoy family meals made with fresh, colorful seasonal ingredients,\u201d \\nsaid chef and author Ellie Krieger, host of Healthy Appetite on the \\nFood Network and a member of the Food Day advisory board.  \u201cFood \\nDay is a chance to celebrate the power good food has to nourish us \\nand bring us together.\u201d  \\n\u201cFood Day is a great opportunity for restaurants to show their \\ncommitment to locally produced artisan foods, to showcase a variety \\nof whole grains, and to reach out to an audience hungry for more \\nsustainable ways to consume that are more in keeping with the health \\nof our bodies and our environment,\u201d said Ellen Gray, co-owner, along \\nwith her husband Todd Gray, of Equinox Restaurant, Watershed, and \\nTodd Gray\u2019s Muse at the Corcoran, all in Washington, D.C.\\n\u201cWhy Food Day? It is time to make real food the number-one priority \\nin our country,\u201d said Alice Waters, proprietor of the acclaimed Chez \\nPanisse restaurant in Berkeley, Calif.  \u201cThe choices we make about \\nfood affect our health, the health of the planet\u2014and the way we live \\nour lives.\u201d\\nWHAT CHEFS  \\nARE SAYING  \\nABOUT  \\nFOOD DAY\\n1DAN BARBER\u2019S FALL RECIPE\\nFennel &amp; Apple Soup\\nAdapted for Food Day\\nMakes about 8 cups\\nINGREDIENTS\\n1 onion, minced\\n3 small shallots, minced\\n3 fennel bulbs, diced\\n1 apple, peeled, cored and diced\\n3 tablespoons extra-virgin olive oil\\n1 tablespoon fennel seed\\n1 quart vegetable stock or low-sodium broth\\n\u00bd teaspoon fresh thyme leaves\\n\u00bd teaspoon salt \\nFreshly ground black pepper\\nDIRECTIONS\\n1. Gently saut\u00e9 the onion and shallots in 1 tablespoon olive oil without browning them. \\n2. Add the fennel and apple. Season with pepper. \\n3. Stir in the fennel seeds and cover with stock. Simmer for 30 minutes. \\n4. Add thyme, and season with up to \u00bd teaspoon salt and more pepper to taste. \\n5. T ransfer to a blender and puree, adding remaining 2 tablespoons olive oil.\\nPer Serving (1 cup): Calories 110; Total Fat 6 g; Sat Fat 0.5 g; Protein 2 g; Carbs 14 g; Fiber 4 g;  Cholesterol 0 mg;  Sodium 260 mg.\\n2MARIO BATALI\u2019S ITALIAN RECIPES\\nGreen Beans with Charred Onions \\nAdapted from Molto Gusto  by Mario Batali\\nMakes 6 servings\\nINGREDIENTS\\n1 pound green beans or haricots verts \\n2 medium sweet onions, such as Vidalia or Walla Walla \\n1\u00bd tablespoons balsamic vinegar \\n1\u00bd tablespoons orange juice \\n2 tablespoons extra-virgin olive oil \\n\u00bc teaspoon Maldon or flaky sea salt \\nDIRECTIONS\\n1. Bring 4 quarts of water to a boil in a large pot. Add the beans and blanch until  \\ncrisp-tender, 3 to 5 minutes. Drain in a colander and cool under cold running water;  \\ndrain well. \\n2. Halve the onions lengthwise and trim off the ends. Cut lengthwise into \u00bd-inch-wide slices. \\nHeat a dry 12-inch saut\u00e9 pan over medium-high heat until very hot. Add the onions and \\nsaut\u00e9 until charred in spots but still crunchy, 4 to 6 minutes. During the last minute or so, \\nadd the beans, stirring and tossing to warm them through. \\n3. T ransfer the beans and onions to a large bowl. Whisk the balsamic vinegar, orange juice, \\nand oil together in a small bowl. Pour over the beans and onions, tossing to coat. Let stand \\nfor at least 10 minutes, or up to 1 hour, before serving. Sprinkle the beans with salt and \\nserve.\\nPer Serving: Calories 80; Fat 4.5 g; Sat Fat 0.5 g; Protein 2 g; Carbs 10 g; Fiber 3 g; Cholesterol 0 mg; Sodium 90 mg. \\n \\n3Mussels with Peperonata \\nAdapted from Molto Gusto  by Mario Batali\\nMakes 8 servings\\nINGREDIENTS\\n5 garlic cloves, thinly sliced \\n\u00bd cup extra-virgin olive oil \\n1 pound red bell peppers (3 large), cored, seeded, and cut into \u00bd-inch dice \\n1 pound green bell peppers (3 large), cored, seeded, and cut into \u00bd-inch dice \\n1 red finger chile or serrano chile, thinly sliced \\n\u00be cup dry white wine \\n2 pounds PEI* or other small mussels, scrubbed and debearded \\n1 cup no-salt-added diced tomatoes, simmered until reduced by half \\n\u00bc teaspoon Maldon or other flaky sea salt \\nDIRECTIONS\\n1. Combine half the garlic and \u00bc cup of the oil in a 12-inch saut\u00e9 pan and heat over medium-\\nlow heat just until the garlic is slightly softened, about 1 minute; do not allow to color. \\n2. Add the bell peppers and sliced chili and cook, stirring occasionally, until the peppers are \\nsoftened, 15 to 20 minutes. \\n3. T ransfer to a medium bowl and let cool. Combine the remaining \u00bc cup oil and the \\nremaining garlic in a large pot and cook, stirring, over medium-high heat just until the \\ngarlic is slightly softened, about 1 minute. Add the wine and mussels, cover, and steam \\nuntil the mussels open, about 4 minutes; transfer the mussels to a bowl as they open. \\n4. Remove the pot from the heat and set aside. Add the tomato sauce and pepper mixture \\nto the mussel broth and bring to a simmer. Season with the salt, remove from the heat, \\nand gently stir in the mussels. Serve warm or at room temperature. (The mussels can be \\nrefrigerated for up to 3 days; serve cold, or bring to room temperature before serving.)\\nPer Serving : Calories 270; Fat 16 g; Sat Fat 2.5 g; Protein 15 g; Carbs 13 g; Fiber 2 g; Cholesterol 30 mg; Sodium 390 mg. \\n*Prince Edward Island \\n4Squash &amp; Mushroom Salad  \\nAdapted from Molto Gusto  by Mario Batali\\nMakes 6 servings\\nINGREDIENTS\\n1 small butternut squash (about 1\u00bc pounds), peeled, seeded, and cut into \u00bd-inch pieces \\n\u00bd pound baby shiitake mushroom caps, left whole, or larger caps, cut into \u00bc-inch-thick slices\\n3 large shallots, cut into \u00bc-inch dice \\n\u00bc cup extra-virgin olive oil \\n\u00bd teaspoon Maldon or other flaky sea salt \\nCoarsely ground black pepper \\n1 tablespoon truffle oil or extra-virgin olive oil \\n2 tablespoons balsamic vinegar \\nJuice of 1 lemon \\n1 teaspoon minced fresh rosemary \\n\u00bc pound cremini mushrooms, trimmed and thinly sliced \\nDIRECTIONS\\n1. Preheat the broiler. Combine the squash, shiitake mushrooms, and shallots in a large bowl. \\nAdd the oil, tossing to coat. Season with salt and pepper. \\n2. Spread the vegetables out on a large baking sheet and broil, stirring occasionally, until the \\nsquash is slightly charred and just tender, 15 to 20 minutes. T ransfer to a serving bowl. \\n3. Meanwhile, whisk the balsamic vinegar, lemon juice, truffle (or extra-virgin) oil, and \\nrosemary together in a small bowl. \\n4. Scatter the cremini over the warm salad and add the vinaigrette, tossing to coat. Serve warm \\nor at room temperature.\\nPer Serving: Calories 140; Fat 9 g; Sat Fat 1.5 g; Protein 2 g; Carbs 14 g; Fiber 3 g; Cholesterol 0 mg; Sodium 170 mg.\\n \\n5MEXICAN RECIPES FROM RICK BAYLESS  \\nGreen Bean Salad with Red Onion &amp; Salsa Dressing\\nAdapted from Mexican Everyday by Rick Bayless\\nMakes 6 servings\\nINGREDIENTS\\n1 pound green beans, trimmed\\n1 small red onion, thinly sliced\\n3 tablespoons olive oil\\n3 tablespoons bottled salsa, preferably green tomatillo salsa\\n2 teaspoons fresh lime juice\\n3 sprigs cilantro, plus more for garnish\\n\u00bc teaspoon kosher salt\\nDIRECTIONS\\n1. Steam the green beans until tender-crunchy, about 3 minutes. Allow them to cool then toss \\nwith the red onion in a large bowl.  \\n2. Combine the remaining ingredients in a blender or mini food processor. Process until \\nsmooth. \\n3. Toss the dressing with the green beans and red onion.\\n4. Garnish with some cilantro leaves. \\nPer Serving: Calories 90; Fat 7 g; Sat Fat 1 g; Protein 1 g; Carbs 7 g; Fiber 2 g; Cholesterol 0 mg; Sodium 140 mg. \\n6Sweet Potato with Caramelized Onions &amp;  \\nGuajillo Chili Dressing\\nAdapted from Mexican Everyday by Rick Bayless\\nMakes 6 servings\\nINGREDIENTS\\n1/3 cup olive oil\\n1 dried guajillo* chili, stem and seeds removed\\n1 clove garlic\\n2 tablespoons balsamic vinegar\\n\u00bd teaspoon kosher salt\\n1 large red onion, chopped\\n2 pounds sweet potato, cut into \u00bd-inch cubes\\nDIRECTIONS\\n1. Pour the oil into a very large skillet and set over medium heat. When the oil is warm, add \\nthe chili and garlic. T urn and stir until the chili is toasty smelling (about 30 seconds). \\nRemove from the heat.  \\n2. Put the chili in a blender with the vinegar and salt.  Blend for 30 seconds. When the oil and \\ngarlic are cool, add to the blender.  Set the skillet aside without washing. Blend the dressing \\nuntil smooth.\\n3. Return the skillet (it will have a light coating of oil) to medium heat and add the onion. \\nCook, stirring regularly, until soft and richly brown, 9-10 minutes. \\n4. Add the sweet potatoes. Blend the dressing for a few more seconds and add to the skillet \\nwith the potatoes. Stir well. Cover and cook until the potatoes are tender, about 10 \\nminutes. Uncover and allow to cool.  Taste and adjust the seasoning. \\nPer Serving: Calories 240; Fat 12 g; Sat Fat 1.5 g; Protein 3 g; Carbs 31 g; Fiber 5 g; Cholesterol 0 mg; Sodium 240 mg.\\n* You can use any mild or medium dried chili. \\n7Quick Tostados*\\nAdapted from Mexican Everyday by Rick Bayless\\nMakes 6 servings\\nINGREDIENTS\\n1 tablespoon canola oil\\n2 cloves garlic, minced\\n2 15-ounce cans no-salt-added black beans\\n\u00bc teaspoon kosher salt\\n2 cups cooked shredded chicken breast or diced smoked tofu\\n6 cups shredded romaine\\n\u00bc cup low-fat sour cream\\n2 tablespoons Mexican hot sauce\\n12 tostados\\n1 avocado, diced\\n\u00bd cup grated Mexican cheese (queso anejo or blanco)\\n\u00bd cup chopped cilantro \\nDIRECTIONS\\n1. Heat the oil in a medium skillet over medium heat. Add the garlic and stir for about a \\nminute. Then add the beans with their liquid.  Mash the beans with a potato masher or the \\nback of a spoon until you have a coarse puree, then cook, stirring regularly, until the beans \\nare thickened just enough to hold their shape in a spoon, about 10 minutes.  Taste and add \\nup to \u00bc teaspoon salt.\\n2. Place the romaine in a large bowl. Mix together the sour cream and hot sauce. Drizzle over \\nthe romaine and toss to combine. \\n3. Spread each tostado with a portion of beans.  Top with chicken and lettuce. Dot with \\navocado. Sprinkle with cheese and cilantro.  Serve right away with more hot sauce for \\ndoctoring.\\nPer Serving: Calories 420; Fat 18 g; Sat Fat 4 g; Protein 24 g; Carbs 42 g; Fiber 12 g; Cholesterol 40 mg; Sodium 430 mg. \\n*Tostados are flat, crisp-fried corn tortillas.\\n \\n8MARK BITTMAN\u2019S AUTUMN RECIPES  \\nCouscous Salad with Dried Cranberries &amp; Pecans \\nFrom Food Matters Cookbook by Mark Bittman\\nMakes 4 servings \\nINGREDIENTS\\n1 cup couscous, preferably whole wheat\\nSalt\\n2 large carrots, grated \\n\u00bd cup chopped pecans \\n\u00bd cup dried cranberries \\n\u00bc cup chopped scallions \\n\u00bc cup olive oil, or more as needed \\nGrated zest and juice of 1 lemon, or more juice as needed \\n1 teaspoon coriander \\nPinch of cayenne, or to taste \\nBlack pepper \\n\u00bd cup chopped fresh parsley \\n1 tablespoon chopped fresh sage, or 1 teaspoon dried\\nDIRECTIONS\\n1. Put the couscous in a small pot and add 1\u00bd cups water and a pinch of salt. Bring the water \\nto a boil, then cover and remove from the heat. Let steep for at least 10 minutes, or up to \\n20. \\n2. Put the slightly cooled couscous in a large salad bowl along with the carrots, pecans, \\ncranberries, scallions, oil, and lemon zest and juice and sprinkle with the spices and pepper. \\nUse 2 big forks to combine, fluffing the couscous and tossing gently to separate the grains. \\n(The salad can be made up to this point and refrigerated for up to a day; bring to room \\ntemperature before proceeding.) \\n3. Stir in the parsley and sage. Taste and adjust the seasoning, moisten with a little more oil \\nand lemon juice as you like, and serve. \\nPer Serving (with \u00be teaspoon salt): Calories 450; Fat 24  g; Sat Fat 3 g; Protein 9 g; Carbs 56 g; Fiber 10 g; Cholesterol 0 mg; Sodium 390 mg. \\n9Baked Pumpkin-Orange Custard \\nFrom Food Matters Cookbook by Mark Bittman\\nMakes 6-8 servings \\nINGREDIENTS\\n2 tablespoons unsalted butter, melted, plus more for greasing the pan \\n2 eggs \\n\u00be cup brown sugar \\n12 ounces soft silken tofu\\n3 cups (two 15-ounce cans) pur\u00e9ed pumpkin (unsweetened and unseasoned) \\n\u00bd teaspoon cinnamon, or more to taste \\n\u00bc teaspoon nutmeg \\n\u00bc teaspoon allspice \\nGrated zest and juice of 1 orange \\nPinch of salt \\nDIRECTIONS\\n1. Heat the oven to 350\u00b0F . Grease an 8- or 9-inch square pan or pie plate with a little butter. \\nUse an electric mixer or a whisk to beat the eggs and sugar in a large bowl until light. Add \\nthe tofu and beat until smooth, a minute or 2 longer. \\n2. Add the 2 tablespoons melted butter and remaining ingredients and beat until everything \\nis thoroughly combined. Pour the mixture into the prepared pan and bake until set around \\nthe edges but still a little jiggly at the center, about 1 hour. Let cool completely before \\nserving, or refrigerate for up to a day and serve cold.\\nPer Serving (for 1/8  of the custard): Calories 180; Fat 5 g; Sat Fat 2.5 g; Protein 5 g; Carbs 30 g; Fiber 3 g; Cholesterol 55 mg; Sodium 30 mg. \\n10ELLIE KRIEGER\u2019S COMFORT FOOD\\nSweet &amp; Tangy Three Bean Salad\\nAdapted from Comfort Food Fix by Ellie Krieger\\nMakes 8 servings\\nINGREDIENTS\\n\u00bd small red onion, thinly sliced into half-moons\\n\u00be pound green beans, trimmed\\n\u00be pound wax beans, trimmed\\n\u00bc cup honey\\n\u00bd cup cider vinegar\\n3 tablespoons extra-virgin olive oil\\n\u00bd teaspoon salt\\n\u00bc teaspoon freshly ground black pepper\\n1 15-ounce can no-salt-added kidney beans, rinsed and drained\\n1 medium red bell pepper, trimmed and sliced into matchsticks\\nDIRECTIONS\\n1. To mellow the bite of the onion, place it in a bowl of ice water and allow it to soak for 30 \\nminutes. Drain.\\n2. Place the green and wax beans in a steam basket fitted over a pot of boiling water. Cover \\nand steam until crisp-tender, about 4 minutes. Remove from the heat and allow to cool. \\nCut into 2-inch lengths.\\n3. In a large bowl, whisk together the honey, vinegar, oil, salt, and black pepper. Add the \\nonion, green and wax beans, kidney beans, and bell pepper and toss to combine. Cover and \\nrefrigerate for at least 1 hour before serving.\\nPer Serving: Calories 160; Fat 5 g; Sat Fat 1 g; Protein 5 g; Carbs 23 g; Fiber 7 g; Cholesterol 0 mg; Sodium 160 mg. \\n11Autumn Vegetable Curry\\nAdapted from Comfort Food Fix by Ellie Krieger\\nMakes 6 servings\\nINGREDIENTS\\n1 large onion, coarsely chopped\\n4 cloves garlic, peeled\\n1 1\u00bd-inch length fresh ginger, peeled and thinly sliced\\n1\u00bd tablespoons yellow curry powder\\n\u00bc teaspoon cayenne pepper, plus more to taste\\n2 tablespoons canola oil\\n2 tablespoons tomato paste\\n2 cups low-sodium vegetable broth\\n1 cup light coconut milk\\n1 cinnamon stick\\n\u00bc teaspoon freshly ground black pepper, plus more to taste\\n\u00bd head cauliflower, broken into 1\u00bd-inch-wide florets  \\n(about 3 cups)\\n1 pound sweet potatoes, peeled and cut into 1-inch cubes\\n2 large carrots, peeled and cut into 1-inch rounds\\n2 tomatoes, cored and chopped\\nGrated zest of 1 lime\\n2 tablespoons fresh lime juice\\n1 15-ounce can no-salt-added chickpeas, drained and rinsed \\n5 cups fresh baby spinach leaves\\n\u00be teaspoon salt\\n\u00bc cup chopped fresh cilantro leaves\\n3 cups cooked brown rice, for serving, optional\\nDIRECTIONS\\n1. Place the onion, garlic, ginger, curry powder, and cayenne pepper in a food processor and \\nprocess to combine. Add the oil and process until a smooth puree is formed. T ransfer the \\ncurry puree to a large pot and cook over medium heat, stirring frequently, about 5 minutes. \\nAdd the tomato paste and cook, stirring frequently, until the mixture begins to darken, \\nabout 5 minutes more.\\n2. Add the vegetable broth, coconut milk, cinnamon stick and \u00bc teaspoon black pepper and \\nbring to a boil. Reduce the heat and simmer for 10 minutes. Add the cauliflower, sweet \\npotatoes, carrots, and tomatoes, season with salt and pepper, and return to a boil. Reduce \\nthe heat to medium low, cover, and simmer until the vegetables are tender, about 25 \\nminutes. Remove the cinnamon stick. Stir in the lime zest and juice, chickpeas, and spinach \\nand cook until the spinach is wilted, about 5 minutes. Season with up to \u00be teaspoon salt.\\n3. Garnish with cilantro and serve with rice.\\nPer Serving: Calories 380; Fat 8 g; Sat Fat 2.5 g; Protein 11 g; Carbs 67 g; Fiber 11 g; Cholesterol 0 mg; Sodium 480 mg. \\n \\n\\n12Honey-Crisp Oven-Fried Chicken\\nAdapted from Comfort Food Fix by Ellie Krieger\\nMakes 6 servings\\nINGREDIENTS\\n6 skinless, bone-in chicken thighs (about 2 pounds)\\n2/3 cup low-fat buttermilk\\n4 cups whole-grain cereal flakes\\n\u00bd teaspoon paprika\\n\u00bd teaspoon garlic powder\\n\u00bd teaspoon kosher salt\\n\u00bc teaspoon freshly ground black pepper\\n\u00bc teaspoon cayenne pepper\\nOlive oil cooking spray\\n2 tablespoons honey\\nDIRECTIONS\\n1. Place the chicken in a bowl with the buttermilk and toss  \\nto coat. Marinate in the refrigerator for at least 1 hour and up to 4 hours. \\n2. Place the cereal flakes in a food processor and process until crumbs form (you should have \\nabout 1 cup of crumbs). \\n3. T ransfer to a shallow dish and mix in the paprika, garlic powder, salt, black pepper, and \\ncayenne pepper.\\n4. Preheat the oven to 350\u00b0F . Spray a baking sheet with cooking spray. \\n5. Remove chicken from buttermilk, shaking off excess buttermilk from the chicken. Discard \\nthe remaining buttermilk. \\n6. Brush each piece of chicken with honey, then dip in the cereal crumbs, press hard so the \\ncrumbs adhere to the chicken. Place the coated chicken on the prepared baking sheet. \\n7. Lightly spray the top of each chicken thigh with cooking spray. \\n8. Bake until the chicken is crisped and cooked through, 45 to 50 minutes. \\nPer Serving: Calories 330; Total Fat 7 g; Sat Fat 2 g; Protein 34 g; Carbs 34 g; Fiber 4 g; Cholesterol 125 mg; Sodium 410 mg.\\n \\n\\n13Apple Crisp\\nAdapted from Comfort Food Fix by Ellie Krieger\\nMakes 8 servings\\nINGREDIENTS FOR THE TOPPING\\n1/3 cup old-fashioned rolled oats\\n\u00bd cup whole-wheat pastry flour\\n\u00bc cup sliced almonds\\n2 tablespoons toasted wheat germ\\n\u00bc cup packed dark brown sugar\\n\u00be teaspoon ground cinnamon\\n\u00bc teaspoon ground nutmeg\\n1/8 teaspoon salt\\n1 tablespoon cold unsalted butter, cut into pieces\\n2 tablespoons canola oil\\n1 to 2 tablespoons cold water\\nINGREDIENTS FOR THE FILLING\\n3 large Rome or Empire apples (about 1\u00bd pounds)\\n3 medium Golden Delicious apples (about 1 pound)\\n3 medium Granny Smith apples (about 1 pound)\\n\u00bc cup fresh lemon juice\\n3 tablespoons pure maple syrup\\n2 tablespoons whole wheat pastry flour\\nDIRECTIONS\\n1.  Preheat the oven to 375\u00b0F . \\n2. To make the topping, place the oats, flour, almonds, wheat germ, brown sugar, cinnamon, \\nnutmeg, and salt in a food processor and process until well combined. Add the butter and oil \\nand pulse until lumps form. Add the water 1 tablespoon at a time until the dough just holds \\ntogether when you press it between your fingers. T ransfer to a bowl and using your fingers, \\npress the dough to create several pea-size lumps for texture. Chill until ready to use.\\n3. To make the filling, leaving the peels on, core and cut the apples into \u00bc-inch-thick wedges. \\nToss the wedges with the lemon juice and maple syrup until well coated. Sprinkle with the \\nflour and toss until well combined. Spoon the apple mixture into a 3- to 3\u00bd-quart shallow \\nbaking dish and sprinkle the dough evenly over the top.\\n4. Bake in the middle of the oven until bubbling, the apples are tender, and the topping is \\ngolden brown, 45 to 50 minutes. \\nPer Serving: Calories 280; Total Fat 7 g; Sat Fat 1.5 g; Protein 4 g; Carbs 53 g; Fiber 7 g; Cholesterol 5 mg; Sodium 40 mg. \\n \\n\\n14EMERIL LAGASSE\u2019S RECIPES FROM  \\nNEW ORLEANS\\nTuscan Kale &amp; White Bean Ragout \\nAdapted from  From Farm to Fork  by Emeril Lagasse\\nMakes 4 servings\\n \\nINGREDIENTS\\n2 tablespoons olive oil \\n1 bay leaf \\n2 cloves garlic, smashed and roughly chopped \\n\u00bc teaspoon crushed red pepper \\n1 small red onion, sliced \\n1\u00bd pounds T uscan kale,* rinsed, patted dry, and cut crosswise into 1-inch-wide slices \\n\u00bc teaspoon freshly ground black pepper, plus more if needed \\n2 15-ounce cans no-salt-added cannellini beans or white beans, drained and rinsed\\n1 cup canned no-salt-added diced tomatoes, with their juices \\n\u00bd cup vegetable stock or canned low-sodium vegetable broth \\n\u00bd teaspoon kosher salt\\nExtra-virgin olive oil, for drizzling \\nDIRECTIONS\\n1. Heat the olive oil in a large saut\u00e9 pan over medium-high heat. When it is hot, add the bay \\nleaf, garlic, crushed red pepper, and red onion. Cook until the onion begins to wilt and the \\ngarlic begins to turn golden around the edges, 3 to 4 minutes. Add the kale and pepper, and \\ncook for another 2 minutes. Then add the white beans, tomatoes, and stock. Cover, and \\ncook until the kale is wilted and cooked through, about 15 minutes. Taste and season with \\nup to \u00bd teaspoon salt. \\n2. T ransfer the ragout to a serving dish, and drizzle it with extra-virgin olive oil. Serve hot. \\nPer Serving: Calories 410; Fat 16 g; Sat Fat 2 g; Protein 17 g; Carbs 53 g; Fiber 13 g; Cholesterol 0 mg; Sodium 410 mg. \\n*Tuscan kale is also known as lacinato kale, black kale, and dinosaur kale.\\n15Gumbo with Smoked Turkey &amp; Wild Rice \\nAdapted from  From Farm to Fork  by Emeril Lagasse\\nMakes 6 servings\\nINGREDIENTS\\n2 tablespoons olive oil\\n1 small onion, chopped \\n3 tablespoons chopped scallions, white and light green parts, plus more for garnish \\n\u00bd tablespoon chopped garlic \\n\u00bd pound smoked turkey thigh or smoked turkey sausage, diced \\n1\u00bd pounds fresh cooking greens \u2013 a mix of spinach, collard greens, turnip greens -tough stems \\nremoved, leaves rinsed and coarsely chopped \\n\u00bd pound green cabbage, cored and coarsely chopped \\n3 quarts chicken stock or canned low-sodium chicken broth \\n2 cups wild rice \\n2 or 3 small bay leaves \\n\u00bc teaspoon cayenne pepper, more to taste \\nPinch of ground thyme \\n\u00bc teaspoon kosher salt\\n1 tablespoon fil\u00e9 powder,* or more to thicken (optional) \\nChopped fresh parsley leaves, for garnish \\nDIRECTIONS\\n1. Heat the oil in a large soup pot. Add the onion, scallions, and garlic, and cook until tender, \\nabout 3 minutes. Add the turkey and cook for 2 minutes. A handful at a time, add the \\nspinach, collards, turnip greens, and cabbage, stirring them until wilted before adding the \\nnext bunch. Then add the stock, wild rice, bay leaves, cayenne, and thyme. Bring to a boil. \\nReduce the heat to a simmer and cook for 1 hour. \\n2. Taste and add up to \u00bc teaspoon salt\u2014the greens should be tender and slightly spicy. The \\nwild rice should be tender and puffed. \\n3. If you wish to thicken it, stir 1 tablespoon fil\u00e9 powder into the simmering gumbo. Add \\nmore fil\u00e9, a little at a time, until thickened. Simmer for 3 minutes more. (Do not allow the \\ngumbo to boil once you have added the fil\u00e9.) \\n4. Serve garnished with chopped parsley and scallions. \\nPer Serving: Calories 350; Fat 7 g; Sat Fat 1 g; Protein 21 g; Carbs 53 g; Fiber 9 g; Cholesterol 15 mg; Sodium 440 mg. \\n*Fil\u00e9 powder is a spicy ground herb traditionally used to thicken and flavor gumbo.\\n16Braised Kohlrabi with Fennel &amp; Leeks \\nAdapted from  From Farm to Fork  by Emeril Lagasse\\nMakes 6 servings\\nINGREDIENTS\\n2 tablespoons olive oil \\n1 tablespoon butter \\n3 large heads kohlrabi, cut into \u00bd-inch-thick wedges \\n2 leeks, white and light green parts, well rinsed and sliced into \u00bc-inch-thick rounds \\n1 large bulb fennel, cored and sliced \\n\u00bc cup dry white wine \\n1 cup vegetable stock, or canned low-sodium vegetable broth, more as needed\\n4 sprigs fresh thyme \\n3 sprigs fresh fennel fronds, plus 1 tablespoon chopped \\n\u00bc teaspoon freshly ground white pepper \\n\u00bc teaspoon kosher salt \\nDIRECTIONS\\n1. Combine the olive oil and butter in a large, deep saut\u00e9 pan. Once the butter has melted \\nand the foam has subsided, add the kohlrabi, leeks, and fennel. Cook for 4 to 5 minutes, \\nbrowning the kohlrabi on both sides. Add the wine and cook until it has reduced by half. \\nThen add the vegetable stock, thyme, and fennel fronds, and season with the pepper. Cook, \\npartially covered, for 20 minutes, or until the vegetables are crisp-tender. \\n2. Remove the thyme sprigs. Serve the vegetables in a shallow bowl with some of the braising \\nliquid, garnished with the chopped fennel fronds. Season with up to \u00bc teaspoon salt.\\nPer Serving: Calories 110; Fat 5 g; Sat Fat 1 g; Protein 2 g; Carbs 12  g; Fiber 5 g; Cholesterol 0 mg; Sodium 140 mg.\\n17LYNNE ROSSETTO KASPER\u2019S RECIPES  \\nRosemary-Orange Cauliflower Puree\\nAdapted from How to Eat Weekends by Lynne Rosetto Kasper\\nMakes 8 servings\\nINGREDIENTS\\n1 large cauliflower (2\u00bd to 3 pounds) with its greens\\n\u00bc pound T uscan kale* (about 6 leaves) or regular kale, ribs removed and leaves torn\\n1 large onion, thinly sliced\\n6 garlic cloves, crushed\\n1\u00bd tightly packed teaspoons fresh rosemary leaves, or more to taste\\nFinely grated zest of 2/3 large orange, or to taste\\nfreshly ground black pepper\\n\u00bd teaspoon salt\\n\u00bc cup extra-virgin olive oil\\n1 tablespoon unsalted butter\\nDIRECTIONS\\n1. Cut the cauliflower into florets, then thinly slice the green stalks.\\n2. Place 3 inches water in an 8-quart pot. Insert a collapsible steamer. Bring the water to a \\nboil and pile in the cauliflower greens, then the florets then add the kale, onion, garlic, \\nrosemary, and orange zest. Sprinkle with some pepper.\\n3. Steam for about 10 minutes, or until the cauliflower is almost falling apart. Drain in a \\ncolander and let stand for 5 minutes. Place everything into a food processor along with \u00bc \\nteaspoon salt, the oil and butter. Pur\u00e9e, then taste for additional seasoning, be it salt (up to \\nanother \u00bc teaspoon), rosemary, orange zest, or pepper.\\nPer Serving: Calories 130; Fat 9 g; Sat Fat 2 g; Protein 4 g; Carbs 11 g; Fiber 3 g; Cholesterol 5 mg; Sodium 170 mg. \\n*Tuscan kale is also known as lacinato kale, black kale, and dinosaur kale.\\n18Pomegranate-Cinnamon Tabbouleh\\nAdapted from How to Eat Weekends by Lynne Rosetto Kasper\\nMakes 6 servings\\nGRAIN\\n1\u00bd cups medium or coarsely ground bulgur wheat\\nDRESSING\\n1 large garlic clove, minced\\nGenerous \u00bc teaspoon ground cinnamon\\n3 tablespoons pomegranate molasses*\\n2 to 3 tablespoons water or dry white wine\\n\u00be teaspoon salt\\nFreshly ground black pepper\\n1/3 cup expeller-pressed canola or safflower oil\\nSALAD\\n2 Belgian endives or \u00bd medium head of radicchio, trimmed, cored, and coarsely chopped\\n1 medium fennel bulb, cored, quartered, and coarsely chopped, fronds reserved\\n\u00bd cup chopped fresh flat-leaf parsley\\n2 tightly packed tablespoons fresh mint, coarsely chopped\\n2 to 3 scallions (white parts only), thinly sliced\\n\u00bc cup shelled, salted pistachios, coarsely chopped\\nSeeds from 1 large pomegranate, white membrane removed\\nSalt and freshly ground black pepper\\nDIRECTIONS\\n1. Soak the bulgur: Place the bulgur in a bowl and add boiling water to cover by 2 inches. \\nSoak for 10 to 20 minutes, depending on the grind of the grain. Taste for tenderness, but \\nbe sure it\u2019s not mushy. Drain well, squeezing out as much extra moisture as possible by \\nwrapping the grain in a clean towel and wringing it out. If time allows, spread out the \\nbulgur on a fresh towel to help it dry a bit. T ransfer the bulgur to a large bowl.\\n2. Make the dressing: In a medium bowl, combine the garlic, cinnamon, pomegranate \\nmolasses, water, salt, and pepper to taste. Stir well. Add the oil in a slow stream while \\nwhisking until emulsified.\\n3. Make the salad: Toss into the bulgur the endive, fennel, parsley, mint, scallions, and \\npistachios. Gently fold in the pomegranate seeds and the dressing. Taste for seasoning and \\nadd up to another \u00bc teaspoon salt and pepper to taste.  Garnish with the fennel fronds, and \\nserve.\\nPer Serving: Calories 220; Fat 8 g; Sat Fat 0.5 g; Protein 6 g; Carbs 36 g; Fiber 8 g; Cholesterol 0 mg; Sodium 260 mg. \\n*Pomegranate molasses substitute: simmer 1 cup pomegranate juice and 1 tablespoon fresh lemon juice  until reduced to 3 tablespoons.\\n19KATE SHERWOOD\u2019S  \\nAUTUMN RECIPES \\nLentil, Apple &amp; Walnut Salad with  \\nCider Dressing\\nby Kate Sherwood\\nMakes 8 servings\\nINGREDIENTS\\n1\u00bd cups French lentils\\n3 cloves garlic\\n2 sprigs thyme\\n1 bay leaf\\n2 cups apple cider\\n2 tablespoons whole grain Dijon mustard\\n2 tablespoons cider vinegar\\n2 shallots, minced\\n3 tablespoons canola oil\\n\u00bd teaspoon kosher salt\\nFreshly ground black pepper\\n1 apple, diced\\n5 ounces baby spinach\\n\u00bd cup chopped walnuts\\nDIRECTIONS\\n1. In a medium pot, cover the lentils, garlic, thyme and bay leaf with water by 2 inches.  \\n2. Bring to a boil then reduce to a simmer.  Cook until tender but not mushy \u2013 start checking \\nthem at 15 minutes. \\n3. Drain, rinse under cold water and discard the garlic, thyme and bay leaf. \\n4. In a saut\u00e9 pan, boil the cider until reduced to 1/3 cup. Allow to the cider to cool then whisk \\nreduced cider together with the mustard, vinegar, shallots, and oil.  \\n5. Season the dressing with up to \u00bd teaspoon salt and pepper. Toss apples, lentils and spinach \\nin the dressing.  Arrange salad on a platter and garnish with the walnuts.  \\nPer Serving: Calories 260; Total Fat 10 g; Sat Fat 0.5 g; Protein 12 g; Carbs 32 g; Fiber 10 g; Cholesterol 0 mg; Sodium 240 mg. \\n\\n20Pearl Barley with Spinach Pesto \\nby Kate Sherwood \\nMakes 8 servings \\nINGREDIENTS\\n1\u00bd cups pearl barley\\n1 clove garlic\\n\u00bc cup pine nuts, toasted\\n\u00bd cup grated parmesan\\n4 cups baby spinach\\n\u00bc cup extra-virgin olive oil\\n\u00be teaspoon kosher salt\\n\u00bc teaspoon freshly ground black pepper\\n1 cup edamame\\nDIRECTIONS\\n1. Boil the barley in plenty of water until al dente (chewy but not raw in the center), about 30 \\nminutes. While the barley is cooking, make the pesto.  \\n2. Pulse the garlic, pine nuts, cheese, spinach, oil, salt and pepper in a food processor until \\nfinely chopped. \\n3. Reserve \u00bd cup cooking water.  \\n4. Toss the edamame into the pot with the barley then drain and return them to pot.  \\n5. Stir \u00bc cup of cooking water into the pesto.  \\n6. Stir the pesto into the barley and edamame.  Add more water if needed to loosen.  \\nPer Serving: Calories 260; Total Fat 12 g; Sat Fat 2.5 g; Protein 7 g; Carbs 32 g; Fiber 6 g; Cholesterol 5 mg; Sodium 280 mg. \\n21Yogurt Panna Cotta with Cranberry  \\nPear Sauce \\nby Kate Sherwood\\nMakes 8 servings\\nPANNA COTTA* INGREDIENTS\\n1 cup low-fat (1%) milk\\n\u00bc cup sugar\\n1 envelope plain powdered gelatin\\n2 tablespoons cold water\\n1 large container (16-18 ounces) fat-free Greek yogurt\\n1 teaspoon pure vanilla extract\\n1 recipe cranberry pear sauce (see below)\\nDIRECTIONS\\n1. In a large saucepan, heat the milk with the sugar over  \\nlow heat, stirring, until the sugar has dissolved,  \\nabout 3 minutes. Remove fromt he heat.\\n2. Meanwhile, in a small bowl, mix the gelatin with the water and let stand for 2 minutes. \\n3. Whisk the gelatin into the warm milk and let cool.\\n4. In a medium bowl, whisk together the yogurt and vanilla extract. Whisk in the milk. \\n5. Pour 1/3 cup of the mixture into each of 8 serving glasses. \\n6. Refrigerate until set, about 2 hours. Serve with the cranberry pear sauce.  \\nSAUCE INGREDIENTS\\n1 cup fresh or frozen cranberries\\n2 ripe pears, pealed, cored and diced\\n\u00bc cup sugar\\n1 cup water\\nDIRECTIONS\\n1. Combine all the ingredients in a sauce pan and bring to a boil. Reduce the heat and simmer \\nfor 20 minutes.  \\n2. T ransfer to a heat-proof bowl and cool to room temperature, about 1 hour.\\nPer Serving: Calories 120; Total Fat 0 g; Sat Fat 0 g; Protein 7 g; Carbs 32 g; Fiber 2 g; Cholesterol 0 mg; Sodium 40 mg. \\n*Frozen vanilla yogurt can be substituted for the panna cotta recipe (as pictured).\\n\\n22VEGETARIAN RECIPES FROM  \\nMARIE SIMMONS\\nCarrot, Sweet Potato &amp; Ginger Soup \\nAdapted from Fresh and Fast Vegetarian  by Marie Simmons\\nMakes about 10 cups\\nINGREDIENTS\\n2 tablespoons extra-virgin olive oil\\n1 pound carrots, cut into \u00bd-inch slices\\n1 pound sweet potatoes, scrubbed, skins left on, cut into \u00bd-inch cubes\\n1 bunch scallions (white and green parts), sliced\\n\u00bd cup chopped celery\\n1 garlic clove, grated\\n1 tablespoon chopped peeled fresh ginger\\n1 teaspoon coarse salt\\n4 tablespoons chopped fresh cilantro\\n1 tablespoon fresh lime juice\\n1 tablespoon finely chopped seeded jalape\u00f1o pepper, or to taste\\n6 ounces baby bok choy, stem ends trimmed, cut into \u00bd-inch slices\\nDIRECTIONS\\n1. Heat the oil in a soup pot until it is hot enough to sizzle a piece of vegetable. Add the \\ncarrots, sweet potatoes, scallions, celery, garlic, ginger, and \u00bd teaspoon salt. Cook, covered, \\nstirring occasionally, over medium-low heat until lightly browned and softened, about 10 \\nminutes. Add 6 cups water and 2 tablespoons of the cilantro and bring to a boil. Cover and \\ncook over medium heat until the vegetables are tender, 20 to 25 minutes.\\n2. Ladle out about 2 cups of the solid vegetables and set aside. Use an immersion blender to \\npuree the soup in the pot. If you don\u2019t have an immersion blender, let the soup cool slightly, \\ntransfer it to a blender or food processor, in batches if necessary, and puree until smooth. \\nReturn the soup to the pot.\\n3. Add the reserved vegetables, lime juice, and jalape\u00f1o. Bring the soup to a boil. Stir in the \\nbok choy and cook for 30 seconds. Taste and season with up 1/2 teaspoon salt. Ladle the \\nsoup into bowls and garnish with the remaining 2 tablespoons chopped cilantro.\\nPer  Serving (1 cup): Calories 90; Total Fat 3 g; Sat Fat 0 g; Protein 2 g; Carbs 15 g; Fiber 3 g; Cholesterol 0 mg; Sodium 270 mg. \\n \\n23Shredded Tuscan Kale, Tomato &amp;  \\nAvocado Salad\\nAdapted from Fresh and Fast Vegetarian  by Marie Simmons\\nMakes 4 servings\\nSALAD\\n1 small bunch (about 10 ounces) T uscan kale,* washed and dried\\n2 tablespoons fresh lime juice\\n1 tablespoon extra-virgin olive oil\\n1/8 teaspoon coarse salt\\nSALSA\\n1 avocado, halved, pitted, peeled and cut into \u00bc-inch dice\\n1 ripe tomato, cut into \u00bc-inch dice with seeds and juice\\n\u00bd cup diced (\u00bc inch) red onion\\n1 teaspoon finely chopped seeded jalape\u00f1o pepper, plus more to taste\\n1 small garlic clove, grated\\n1 tablespoon lime juice\\n1 tablespoon extra-virgin olive oil\\n\u00bc teaspoon coarse salt\\n\u00bc cup unsalted roasted pepitas (pumpkin seeds) or roasted sunflower seeds\\nDIRECTIONS\\n1. To prepare the kale, cut along both sides of the stem of each leaf with a sharp knife or pull \\nthe ruffled leaves away from the stems with your hands. Discard the stems. Gather a bunch \\nof the long kale leaves together on the cutting board and slice into thin (\u00b9\u20448-inch) crosswise \\nslices. You should have 4 to 6 cups lightly packed.\\n2. Combine the kale, lime juice, oil, and salt in a large bowl. Rub the ingredients together \\nwith your hands (as though giving the kale a massage) until the leaves wilt, 1 to 2 minutes. \\nSet aside.\\n3. To make the salsa: Combine the avocado, tomato, red onion, jalape\u00f1o, garlic, lime juice, \\noil, and salt and stir to blend.\\n4. Add the salsa to the kale and toss to combine. Sprinkle the salad with the pepitas. Serve at \\nroom temperature.\\nPer Serving: Calories 240; Total Fat 19 g; Sat Fat 3 g; Protein 6 g; Carbs 16 g; Fiber 6 g; Cholesterol 0 mg; Sodium 220 mg. \\n*Tuscan kale is also known as lacinato kale, black kale, and dinosaur kale.\\n24Curried Lentils with Walnuts, Spinach &amp; Cherry Tomatoes \\nAdapted from Fresh and Fast Vegetarian  by Marie Simmons\\nMakes 4 servings\\nINGREDIENTS\\n1 cup brown lentils\\n2 tablespoons extra-virgin olive oil\\n1 cup chopped onion\\n2 teaspoons curry powder\\n1 garlic clove, grated\\n2 bags (5\u20136 ounces each) baby spinach (8\u201310 cups packed), rinsed and drained\\n1 cup small cherry or grape tomatoes, stems removed\\n2 tablespoons finely chopped fresh mint\\n\u00bd cup chopped walnuts\\n\u00bd cup plain yogurt\\nDIRECTIONS\\n1. Bring a medium saucepan half full of water to a boil. Add the lentils and cook, uncovered, \\nuntil tender but not mushy, 18 to 20 minutes. Drain and set aside.\\n2. Heat the oil in a large skillet until hot enough to sizzle a piece of onion. Add the onion \\nand cook, stirring, until tender, about 5 minutes. Add the curry powder and garlic and \\ncook, stirring, for 1 minute. Add the cooked lentils, spinach, tomatoes and mint and cook, \\nstirring, until heated through, about 5 minutes.\\n3. Meanwhile, heat the walnuts in a small skillet over medium heat, stirring, until toasted, \\nabout 5 minutes. Sprinkle the walnuts over the lentils and serve with the yogurt to spoon \\nover the top.\\nPer Serving: Calories 400; Total Fat 17 g; Sat Fat 2 g; Protein 18 g; Carbs 47 g; Fiber 20 g; Cholesterol 0 mg; Sodium 150 mg. \\n \\n25Oven-Roasted Stuffed Portobello Mushrooms\\nAdapted from Fresh and Fast Vegetarian  by Marie Simmons\\nMakes 4 servings\\nINGREDIENTS\\n4 large Portobello mushrooms, wiped clean, stems removed and reserved\\n4 tablespoons extra-virgin olive oil\\n\u00bd cup chopped onion\\n1 cup coarse bread crumbs from lightly toasted whole wheat bread\\n2 tablespoons finely chopped fresh Italian parsley\\n2 tablespoons oil-packed sun-dried tomatoes, drained, blotted dry, and chopped\\n1 garlic clove, grated\\n\u00bc teaspoon coarse salt \\nFreshly ground black pepper\\nDIRECTIONS\\n1. Preheat the oven to 400\u00b0F . Finely chop the mushroom stems.\\n2. Meanwhile, heat 2 tablespoons of the oil in a medium skillet until it is hot enough to \\nsizzle a piece of onion. Add the onion and chopped mushroom stems and cook, stirring, \\nover medium heat until golden, about 5 minutes. Add the bread crumbs, parsley, sun-\\ndried tomatoes and garlic and cook, stirring, until the crumbs are heated through, about 2 \\nminutes. Sprinkle with salt and pepper to taste and set aside.\\n3. Brush the tops and bottoms of the mushroom caps with the remaining 2 tablespoons oil. \\nSprinkle on both sides with a pinch salt and a grinding of black pepper. Place on a baking \\nsheet, rounded sides up, add \u00bc cup water and roast for 10 minutes.\\n4. Remove the pan from the oven. T urn the caps over, fill with the crumb mixture, dividing it \\nevenly, and roast until browned and crisp, about 10 minutes more. T ransfer to a platter and \\nserve.\\nPer Serving: Calories 190; Total Fat 15 g; Sat Fat 2 g; Protein 3 g; Carbs 12 g; Fiber 2 g; Cholesterol 0 mg; Sodium 200 mg. \\n26ASIAN RECIPES FROM  \\nNINA SIMONDS\\nHot &amp; Sour Salmon with Greens\\nAdapted from A Spoonful of Ginger  by Nina Simonds\\nMakes 6 servings\\nINGREDIENTS\\n2\u00bd pounds baby bok choy or bok choy, stem ends and leaf  \\ntips trimmed\\n8 whole scallions, ends trimmed, cut into thin slices  \\non the diagonal\\n\u00bc cup fresh ginger cut into very thin julienne shreds\\n6 salmon steaks, about 6 ounces each\\n3 cups cooked brown rice\\nDRESSING\\n3 tablespoons reduced-sodium soy sauce\\n2 tablespoons Chinese black vinegar or balsamic vinegar\\n2 tablespoons sugar\\n1 tablespoon minced garlic\\nDIRECTIONS\\n1. T rim the tough outer leaves from the bok choy and discard. Rinse the stalks and leaves and \\ndrain.  Cut the stalks in half lengthwise.  Cut the halves diagonally into 2-inch sections.  In \\na bowl, toss the scallions and ginger with the bok choy sections.  Arrange on a heatproof \\nplatter. \\n2. Mix the ingredients of the dressing and pour into a serving bowl.\\n3. Preheat the oven to 450\u00b0F . Place the salmon steaks on top of the greens. Pour into a \\nroasting pan several inches of water and heat until boiling. Carefully place the platter of \\nsalmon and vegetables on top of a rack or steamer tray in the roasting pan.  Cover the top \\nof the pan tightly with aluminum foil.  Bake 7 to 9 minutes, or until the fish is cooked.  \\n4. Serve the salmon from the heat-proof platter or arrange the steamed vegetables and salmon \\non serving plates.  Spoon the dressing on top and serve with brown rice. \\nPer Serving: Calories 430; Total Fat 14 g; Sat Fat 2 g; Protein 44 g; Carbs 32 g; Fiber 4 g; Cholesterol 105 mg; Sodium 480 mg. \\n \\n\\n27Spicy Garlic Broccoli with Pine Nuts\\nAdapted from A Spoonful of Ginger  by Nina Simonds\\nMakes 6 servings\\nINGREDIENTS\\n1\u00bd pounds broccoli\\n\u00bc cup pine nuts\\n1\u00bd teaspoons canola or corn oil\\n1\u00bd teaspoons toasted sesame oil\\n1 teaspoon hot chili paste or \u00be teaspoon crushed dried chilies\\n2 tablespoons minced garlic\\n2\u00bd tablespoons rice wine or sake, mixed with 2 tablespoons water\\nSAUCE (MIXED TOGETHER IN A BOWL UNTIL THE SUGAR IS DISSOLVED)\\n1 tablespoon reduced sodium-soy sauce\\n1 teaspoon sugar\\nDIRECTIONS\\n1. T rim the ends of the broccoli, separate the florets, peel the outer skin of the stem and cut it \\non the diagonal into 1-inch lengths. \\n2. Toast the pine nuts until golden in a 300\u00b0F oven, turning them occasionally so that they \\ncook evenly for about 20 minutes. \\n3. Heat a wok or large skillet, add the oils, and heat until hot, about 20 seconds. Add the chili \\npaste or crushed chilies and garlic, and stir-fry, tossing with a slotted spoon over medium \\nheat until fragrant, about 15 seconds. T urn the heat to high. \\n4. Add the stem sections of the broccoli and stir-fry.  Pour in the rice wine and water and \\ncook, tossing, about 30 seconds, then cover and cook about 1\u00bd to 2 minutes, until the \\nstems are just tender. Add the florets and toss over high heat, cooking for about 1\u00bd minutes \\nor until just tender.  \\n5. Add the premixed sauce and toss lightly for 15 seconds. Add the toasted pine nuts and stir-\\nfry a few seconds to combine the ingredients. Scoop the ingredients into a serving bowl and \\nserve immediately. \\nPer Serving: Calories 90; Total Fat 6 g; Sat Fat 1 g; Protein 4 g; Carbs 8 g; Fiber 4 g; Cholesterol 0 mg; Sodium 125 mg. \\n28Rainbow Salad with Spicy Peanut Dressing\\nAdapted from A Spoonful of Ginger  by Nina Simonds\\nMakes 6 servings\\nINGREDIENTS\\n14 ounces firm tofu, cut into \u00bd inch slabs\\n\u00bd pound whole wheat spaghetti\\n1 teaspoon toasted sesame oil\\n2 cups grated carrots\\n1\u00bd cups grated cucumbers, seeds and skin removed\\n1\u00bd cups grated red cabbage\\n1 red bell pepper, cored, seeded, and sliced into thin strips\\n1 yellow pepper, cored seeded, and sliced into thin strips\\nSPICY PEANUT DRESSING\\n2 tablespoons minced fresh ginger\\n\u00bd tablespoon minced garlic\\n1 teaspoon hot chili paste, or more to taste\\n\u00bd cup smooth peanut butter\\n\u00bc cup reduced-sodium soy sauce\\n1 tablespoon sugar\\n2 tablespoons Chinese black vinegar or balsamic vinegar\\n3 tablespoons toasted sesame oil\\n\u00bc cup water\\nDIRECTIONS\\n1. Wrap the tofu slabs in paper towels or a cotton towel and place a heavy weight, such as a \\ncast-iron skillet, on top. Let stand for 30 minutes to press out the excess water, then cut the \\ntofu into matchstick-size shreds about 2 inches long. \\n2. Bring 3 quarts water to a boil, add the spaghetti, and cook until just tender. Drain in a \\ncolander, toss with the sesame oil, and arrange on a platter. \\n3. Arrange the carrots, cucumbers, bean sprouts, red and yellow pepper strips, and tofu in \\nmounds or separate concentric circles on the serving platter with the noodles. \\n4. To prepare the Spicy Peanut Dressing: In a food processor fitted with a steel blade or a \\nblender, chop the ginger and garlic until fine. Add the remaining ingredients in descending \\norder, ending with the water. Process until smooth. The sauce should have the consistency \\nof heavy cream. If it is too thick, add more water; if too thin, add more peanut butter. Pour \\nthe sauce into a serving container, and offer the vegetables and sauce to each diner to mix as \\ndesired. \\nPer Serving: Calories 430; Total Fat 21 g; Sat Fat 3.5 g; Protein 18 g; Carbs 46 g; Fiber 9 g; Cholesterol 0 mg; Sodium 530 mg. \\n&lt;/document_content&gt;\\n\\n&lt;question&gt;\\nwhat are the ingredients for Quick Tostados? \\n&lt;/question&gt;\"\n        }\n      ]\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": [\n        {\n          \"text\": \"&lt;thinking&gt;\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"maxTokens\": 5000\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/code_clarifier/example/","title":"Code Clarifier","text":"<p>Ask Nova to explain complex code in simple terms with examples.</p>"},{"location":"prompts/understanding/code_clarifier/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an expert {programming language} programmer who excels at explaining complex code in simple terms that anyone can understand.\nFollow these instructions:\n{enumerated instructions}\n</code></pre>"},{"location":"prompts/understanding/code_clarifier/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>## Code ##\n{code to be explained}\n</code></pre>"},{"location":"prompts/understanding/code_clarifier/example/#example","title":"Example","text":""},{"location":"prompts/understanding/code_clarifier/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert programmer who excels at explaining complex code in simple terms that anyone can understand.\nFollow these instructions:\n1. Read and understand the code provided in ## Code ##\n2. Write a plain language explanation of what the code does in ## Explanation ##. Use simple analogies and avoid technical jargon where possible.\n3. Break down the code into its key components in ## Components ##, explaining each part's role\n4. Provide a simple example of the code in action in ## Example ## using ```python``` code blocks\n</code></pre>"},{"location":"prompts/understanding/code_clarifier/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>## Code ##\ndef memoize(func):\n    cache = {}\n    def wrapper(*args, **kwargs):\n        key = str(args) + str(sorted(kwargs.items()))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n    return wrapper\n</code></pre>"},{"location":"prompts/understanding/code_clarifier/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/understanding/code_clarifier/example/#explanation","title":"Explanation","text":"<p>This code creates a special function called <code>memoize</code> that helps other functions remember their results. Imagine you have a friend who loves to solve puzzles but sometimes forgets the answers. You decide to write down the answers to puzzles they've already solved so they don't have to solve the same puzzle again. That's what this <code>memoize</code> function does for other functions.</p> <p>When you use <code>memoize</code> with a function, it keeps a record of the inputs and outputs. If the function is called again with the same inputs, it just looks up the saved result instead of doing all the work again. This saves time and makes the function faster.</p>"},{"location":"prompts/understanding/code_clarifier/example/#components","title":"Components","text":"<ol> <li> <p><code>def memoize(func):</code>: This line defines a new function named <code>memoize</code> that takes another function (<code>func</code>) as input. Think of <code>memoize</code> as a helper that will make <code>func</code> more efficient.</p> </li> <li> <p><code>cache = {}</code>: Inside <code>memoize</code>, we create an empty dictionary called <code>cache</code>. This dictionary will store the results of <code>func</code> for different inputs, like a notebook where you write down puzzle answers.</p> </li> <li> <p><code>def wrapper(*args, **kwargs):</code>: This line defines a new function inside <code>memoize</code> called <code>wrapper</code>. This <code>wrapper</code> function will be the one that actually gets called instead of <code>func</code>. It takes any number of arguments (<code>*args</code>) and keyword arguments (<code>**kwargs</code>).</p> </li> <li> <p><code>key = str(args) + str(sorted(kwargs.items()))</code>: Here, we create a unique key for the cache based on the inputs to the function. We convert the arguments to a string and sort the keyword arguments to ensure the key is consistent for the same inputs.</p> </li> <li> <p><code>if key not in cache:</code>: We check if the key (combination of inputs) is already in the cache. If it\u2019s not, that means we haven\u2019t solved this puzzle before.</p> </li> <li> <p><code>cache[key] = func(*args, **kwargs)</code>: If the key is not in the cache, we call the original function <code>func</code> with the given arguments and store the result in the cache.</p> </li> <li> <p><code>return cache[key]</code>: Finally, we return the result from the cache. If it was already there, we just look it up. If not, we stored it right before returning.</p> </li> </ol>"},{"location":"prompts/understanding/code_clarifier/example/#example_1","title":"Example","text":"<p>Let's see how this works with a simple example. Suppose we have a function that calculates the factorial of a number, and we want to make it more efficient using <code>memoize</code>.</p> <pre><code>def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Apply memoize to the factorial function\nmemoized_factorial = memoize(factorial)\n\n# Calculate factorial(5) for the first time\nprint(memoized_factorial(5))  # This will calculate and store the result\n\n# Calculate factorial(5) again\nprint(memoized_factorial(5))  # This will use the stored result\n</code></pre> <p>In this example, the first time we call <code>memoized_factorial(5)</code>, it calculates the result and stores it in the cache. The second time we call it with the same input, it just retrieves the result from the cache without doing the calculation again.</p>"},{"location":"prompts/understanding/code_clarifier/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert programmer who excels at explaining complex code in simple terms that anyone can understand.\n                            Follow these instructions:\n                            1. Read and understand the code provided in ## Code ##\n                            2. Write a plain language explanation of what the code does in ## Explanation ##. Use simple analogies and avoid technical jargon where possible.\n                            3. Break down the code into its key components in ## Components ##, explaining each part's role\n                            4. Provide a simple example of the code in action in ## Example ## using ```python``` code blocks\n                            \"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"## Code ##\n                                def memoize(func):\n                                    cache = {}\n                                    def wrapper(*args, **kwargs):\n                                        key = str(args) + str(sorted(kwargs.items()))\n                                        if key not in cache:\n                                            cache[key] = func(*args, **kwargs)\n                                        return cache[key]\n                                    return wrapper\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 2000\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert programmer who excels at explaining complex code in simple terms that anyone can understand.\\nFollow these instructions:\\n1. Read and understand the code provided in ## Code ##\\n2. Write a plain language explanation of what the code does in ## Explanation ##. Use simple analogies and avoid technical jargon where possible.\\n3. Break down the code into its key components in ## Components ##, explaining each part'\\''s role\\n4. Provide a simple example of the code in action in ## Example ## using ```python``` code blocks\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Code ##\\ndef memoize(func):\\n    cache = {}\\n    def wrapper(*args, **kwargs):\\n        key = str(args) + str(sorted(kwargs.items()))\\n        if key not in cache:\\n            cache[key] = func(*args, **kwargs)\\n        return cache[key]\\n    return wrapper\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert programmer who excels at explaining complex code in simple terms that anyone can understand.\\nFollow these instructions:\\n1. Read and understand the code provided in ## Code ##\\n2. Write a plain language explanation of what the code does in ## Explanation ##. Use simple analogies and avoid technical jargon where possible.\\n3. Break down the code into its key components in ## Components ##, explaining each part's role\\n4. Provide a simple example of the code in action in ## Example ## using ```python``` code blocks\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Code ##\\ndef memoize(func):\\n    cache = {}\\n    def wrapper(*args, **kwargs):\\n        key = str(args) + str(sorted(kwargs.items()))\\n        if key not in cache:\\n            cache[key] = func(*args, **kwargs)\\n        return cache[key]\\n    return wrapper\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/complexity_analyzer/example/","title":"Complexity Analyzer","text":"<p>Ask Nova to analyze the time and space complexity of algorithms.</p>"},{"location":"prompts/understanding/complexity_analyzer/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an expert {expert role description} who specializes in {description of task}.\n{enumerated instructions}\n</code></pre>"},{"location":"prompts/understanding/complexity_analyzer/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>## Code ##\n{code to be explained}\n</code></pre>"},{"location":"prompts/understanding/complexity_analyzer/example/#example","title":"Example","text":""},{"location":"prompts/understanding/complexity_analyzer/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert algorithm analyst who specializes in determining the time and space complexity of code.\nFollow these instructions:\n1. Read and understand the code provided in ## Code ##\n2. Analyze the time complexity and put your findings in ## Time Analysis ##:\n   - Overall Big O notation\n   - Breakdown of operations\n   - Best, average, and worst cases\n3. Analyze the space complexity in ## Space Analysis ##:\n   - Overall Big O notation\n   - Memory usage breakdown\n   - Any optimizations possible\n4. Provide recommendations and put your findings in ## Recommendations ## if any improvements are possible\n</code></pre>"},{"location":"prompts/understanding/complexity_analyzer/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>## Code ##\ndef find_pairs_with_sum(arr, target_sum):\n    pairs = []\n    seen = set()\n\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            pairs.append((min(num, complement), max(num, complement)))\n        seen.add(num)\n\n    return sorted(pairs)\n</code></pre>"},{"location":"prompts/understanding/complexity_analyzer/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/understanding/complexity_analyzer/example/#time-analysis","title":"Time Analysis","text":"<ul> <li>Overall Big O notation: O(n log n)</li> <li>Breakdown of operations:</li> <li>Iterating through the array: O(n)</li> <li>Checking if an element is in a set: O(1) on average</li> <li>Adding an element to a set: O(1) on average</li> <li>Sorting the list of pairs: O(n log n)</li> <li>Best, average, and worst cases:</li> <li>Best case: O(n log n) \u2013 When the array is small or already contains pairs that sum to the target.</li> <li>Average case: O(n log n) \u2013 The average scenario involves iterating through the array and performing constant-time operations for set lookups and insertions, followed by sorting.</li> <li>Worst case: O(n log n) \u2013 When no optimizations are possible and the final sorting step dominates the runtime.</li> </ul>"},{"location":"prompts/understanding/complexity_analyzer/example/#space-analysis","title":"Space Analysis","text":"<ul> <li>Overall Big O notation: O(n)</li> <li>Memory usage breakdown:</li> <li>The set <code>seen</code> requires O(n) space in the worst case, where all elements are unique.</li> <li>The list <code>pairs</code> requires O(n) space in the worst case, where every pair sums to the target.</li> <li>Sorting the list of pairs does not significantly increase space complexity beyond O(n) due to the nature of in-place sorting algorithms used by Python\u2019s <code>sorted()</code> function.</li> <li>Any optimizations possible:</li> <li>The space used by <code>seen</code> and <code>pairs</code> is necessary for the algorithm's functionality. However, if the order of pairs is not required, skipping the final sort could save O(n log n) time complexity but would not reduce space complexity.</li> </ul>"},{"location":"prompts/understanding/complexity_analyzer/example/#recommendations","title":"Recommendations","text":"<ul> <li>Avoiding the final sort: If the order of pairs is not crucial, removing the sorting step can improve time complexity to O(n).   <pre><code>def find_pairs_with_sum(arr, target_sum):\n    pairs = []\n    seen = set()\n\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            pairs.append((min(num, complement), max(num, complement)))\n        seen.add(num)\n\n    return pairs\n</code></pre></li> <li>This change will make the function run in O(n) time complexity while maintaining O(n) space complexity.</li> </ul>"},{"location":"prompts/understanding/complexity_analyzer/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert algorithm analyst who specializes in determining the time and space complexity of code.\n                                    Follow these instructions:\n                                    1. Read and understand the code provided in ## Code ##\n                                    2. Analyze the time complexity and put your findings in ## Time Analysis ##:\n                                    - Overall Big O notation\n                                    - Breakdown of operations\n                                    - Best, average, and worst cases\n                                    3. Analyze the space complexity in ## Space Analysis ##:\n                                    - Overall Big O notation\n                                    - Memory usage breakdown\n                                    - Any optimizations possible\n                                    4. Provide recommendations and put your findings in ## Recommendations ## if any improvements are possible\"\"\",\n                        }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"## Code ##\n                                def find_pairs_with_sum(arr, target_sum):\n                                    pairs = []\n                                    seen = set()\n\n                                    for num in arr:\n                                        complement = target_sum - num\n                                        if complement in seen:\n                                            pairs.append((min(num, complement), max(num, complement)))\n                                        seen.add(num)\n\n                                    return sorted(pairs)\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 2000\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert algorithm analyst who specializes in determining the time and space complexity of code.\\nFollow these instructions:\\n1. Read and understand the code provided in ## Code ##\\n2. Analyze the time complexity in ## Time Analysis ##:\\n   - Overall Big O notation\\n   - Breakdown of operations\\n   - Best, average, and worst cases\\n3. Analyze the space complexity in ## Space Analysis ##:\\n   - Overall Big O notation\\n   - Memory usage breakdown\\n   - Any optimizations possible\\n4. Provide recommendations in ## Recommendations ## if any improvements are possible\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Code ##\\ndef find_pairs_with_sum(arr, target_sum):\\n    pairs = []\\n    seen = set()\\n    \\n    for num in arr:\\n        complement = target_sum - num\\n        if complement in seen:\\n            pairs.append((min(num, complement), max(num, complement)))\\n        seen.add(num)\\n        \\n    return sorted(pairs)\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert algorithm analyst who specializes in determining the time and space complexity of code.\\nFollow these instructions:\\n1. Read and understand the code provided in ## Code ##\\n2. Analyze the time complexity in ## Time Analysis ##:\\n   - Overall Big O notation\\n   - Breakdown of operations\\n   - Best, average, and worst cases\\n3. Analyze the space complexity in ## Space Analysis ##:\\n   - Overall Big O notation\\n   - Memory usage breakdown\\n   - Any optimizations possible\\n4. Provide recommendations in ## Recommendations ## if any improvements are possible\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Code ##\\ndef find_pairs_with_sum(arr, target_sum):\\n    pairs = []\\n    seen = set()\\n    \\n    for num in arr:\\n        complement = target_sum - num\\n        if complement in seen:\\n            pairs.append((min(num, complement), max(num, complement)))\\n        seen.add(num)\\n        \\n    return sorted(pairs)\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/data_organizer/example/","title":"Data Organizer","text":"<p>Ask Nova to transform unstructured text into structured JSON data.</p>"},{"location":"prompts/understanding/data_organizer/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an expert data analyst who can extract structured information from unstructured text.\nFollow these instructions:\n1. Read and understand the unstructured text in ## Text ##\n2. Identify the key entities, attributes, and relationships in the text\n3. Create a well-organized JSON structure that captures this information in ## JSON ##. Only enter valid JSON here, without Markdown\n4. Add a brief explanation of your JSON structure design choices in ## Explanation ##\n</code></pre>"},{"location":"prompts/understanding/data_organizer/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>## Text ##\n{text to organize}\n</code></pre>"},{"location":"prompts/understanding/data_organizer/example/#example","title":"Example","text":""},{"location":"prompts/understanding/data_organizer/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert data analyst who can extract structured information from unstructured text.\nFollow these instructions:\n1. Read and understand the unstructured text in ## Text ##\n2. Identify the key entities, attributes, and relationships in the text\n3. Output a well-organized JSON structure that captures this information\n</code></pre>"},{"location":"prompts/understanding/data_organizer/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>## Text ##\nThe quarterly sales meeting was held on March 15, 2025. Sarah Johnson from the North region reported total sales of $1.2M, exceeding her target by 15%. The East region, managed by Robert Chen, achieved $950K in sales, which was 5% below target. Michael Patel from the West region reported $1.05M in sales, meeting exactly 100% of his target. The South region's representative, Lisa Garcia, was unable to attend, but her preliminary report indicates sales of approximately $880K, about 8% below the quarterly target.\n</code></pre>"},{"location":"prompts/understanding/data_organizer/example/#amazon-nova-pro-assistant-prefilled-response","title":"Amazon Nova Pro Assistant Prefilled Response","text":"<pre><code>\"```json\"\n</code></pre>"},{"location":"prompts/understanding/data_organizer/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p> <pre><code>{\n  \"quarterly_sales_meeting\": {\n    \"date\": \"March 15, 2025\",\n    \"regions\": [\n      {\n        \"name\": \"North\",\n        \"manager\": {\n          \"name\": \"Sarah Johnson\"\n        },\n        \"sales\": {\n          \"amount\": 1200000,\n          \"target_comparison\": {\n            \"percentage\": 115\n          }\n        }\n      },\n      {\n        \"name\": \"East\",\n        \"manager\": {\n          \"name\": \"Robert Chen\"\n        },\n        \"sales\": {\n          \"amount\": 950000,\n          \"target_comparison\": {\n            \"percentage\": 95\n          }\n        }\n      },\n      {\n        \"name\": \"West\",\n        \"manager\": {\n          \"name\": \"Michael Patel\"\n        },\n        \"sales\": {\n          \"amount\": 1050000,\n          \"target_comparison\": {\n            \"percentage\": 100\n          }\n        }\n      },\n      {\n        \"name\": \"South\",\n        \"manager\": {\n          \"name\": \"Lisa Garcia\"\n        },\n        \"sales\": {\n          \"amount\": 880000,\n          \"target_comparison\": {\n            \"percentage\": 92\n          },\n          \"attendance\": false,\n          \"report_status\": \"preliminary\"\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/data_organizer/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert data analyst who can extract structured information from unstructured text.\n    Follow these instructions:\n    1. Read and understand the unstructured text in ## Text ##\n    2. Identify the key entities, attributes, and relationships in the text\n    3. Output a well-organized JSON structure that captures this information\"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"## Text ## The quarterly sales meeting was held on March 15, 2025. Sarah Johnson from the North region reported total sales of $1.2M, exceeding her target by 15%. The East region, managed by Robert Chen, achieved $950K in sales, which was 5% below target. Michael Patel from the West region reported $1.05M in sales, meeting exactly 100% of his target. The South region's representative, Lisa Garcia, was unable to attend, but her preliminary report indicates sales of approximately $880K, about 8% below the quarterly target.\"\n                        }\n                    ]\n                },\n                {\n                    \"role\": \"assistant\",\n                    \"content\": [\n                        {\n                            \"text\": \"```json\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 512\n            }\n            )\n\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert data analyst who can extract structured information from unstructured text.\\nFollow these instructions:\\n1. Read and understand the unstructured text in ## Text ##\\n2. Identify the key entities, attributes, and relationships in the text\\n3. Create a well-organized JSON structure that captures this information in ## JSON ##\\n4. Add a brief explanation of your JSON structure design choices in ## Explanation ##\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Text ##\\nThe quarterly sales meeting was held on March 15, 2025. Sarah Johnson from the North region reported total sales of $1.2M, exceeding her target by 15%. The East region, managed by Robert Chen, achieved $950K in sales, which was 5% below target. Michael Patel from the West region reported $1.05M in sales, meeting exactly 100% of his target. The South region'\\''s representative, Lisa Garcia, was unable to attend, but her preliminary report indicates sales of approximately $880K, about 8% below the quarterly target.\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert data analyst who can extract structured information from unstructured text.\\nFollow these instructions:\\n1. Read and understand the unstructured text in ## Text ##\\n2. Identify the key entities, attributes, and relationships in the text\\n3. Create a well-organized JSON structure that captures this information in ## JSON ##\\n4. Add a brief explanation of your JSON structure design choices in ## Explanation ##\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Text ##\\nThe quarterly sales meeting was held on March 15, 2025. Sarah Johnson from the North region reported total sales of $1.2M, exceeding her target by 15%. The East region, managed by Robert Chen, achieved $950K in sales, which was 5% below target. Michael Patel from the West region reported $1.05M in sales, meeting exactly 100% of his target. The South region's representative, Lisa Garcia, was unable to attend, but her preliminary report indicates sales of approximately $880K, about 8% below the quarterly target.\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/explain_code/example/","title":"Explain Code","text":"<p>Ask Nova to explain code and use it in an example.</p>"},{"location":"prompts/understanding/explain_code/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an expert {programming language} programmer who can read code and explain what its doing in very basic terms.\nFollow these instructions:\n{enumerated instructions}\n</code></pre>"},{"location":"prompts/understanding/explain_code/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>## Code ##\n{code to be explained}\n</code></pre>"},{"location":"prompts/understanding/explain_code/example/#example","title":"Example","text":""},{"location":"prompts/understanding/explain_code/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert Python programmer who can read code and explain what its doing in very basic terms.\nFollow these instructions:\n1. Read and understand the code written in ## Code ##. Think step by step\n2. Put a 2-3 sentence summary of the code in ## Summary ##\n3. Write an example of how to use the code, using code. Put this example in ## Example ## and use ```python ``` to show the example.\n</code></pre>"},{"location":"prompts/understanding/explain_code/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>Here's the code:\n## Code ##\nimport time\nimport requests\nimport json\nimport os\nimport random\nimport logging\nfrom typing import Dict, Any, Optional, Union\n\nclass ApiPoller:\n    def __init__(\n        self,\n        endpoint_url: str,\n        output_file: str,\n        base_delay: float = 1.0,\n        max_delay: float = 60.0,\n        max_retries: int = 5,\n        jitter: bool = True,\n        timeout: int = 10,\n        headers: Optional[Dict[str, str]] = None\n    ):\n        self.endpoint_url = endpoint_url\n        self.output_file = output_file\n        self.base_delay = base_delay\n        self.max_delay = max_delay\n        self.max_retries = max_retries\n        self.jitter = jitter\n        self.timeout = timeout\n        self.headers = headers or {}\n\n        # Set up logging\n        logging.basicConfig(\n            level=logging.INFO,\n            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n        )\n        self.logger = logging.getLogger(__name__)\n\n    def _calculate_delay(self, attempt: int) -&gt; float:\n        delay = min(self.base_delay * (2 ** attempt), self.max_delay)\n        if self.jitter:\n            delay = delay * (0.5 + random.random())\n        return delay\n\n    def _save_response(self, data: Union[Dict[str, Any], str, bytes]) -&gt; None:\n        try:\n            # Create directory if it doesn't exist\n            os.makedirs(os.path.dirname(os.path.abspath(self.output_file)), exist_ok=True)\n\n            # Handle different response types\n            if isinstance(data, (dict, list)):\n                with open(self.output_file, 'w', encoding='utf-8') as f:\n                    json.dump(data, f, indent=2)\n            elif isinstance(data, str):\n                with open(self.output_file, 'w', encoding='utf-8') as f:\n                    f.write(data)\n            elif isinstance(data, bytes):\n                with open(self.output_file, 'wb') as f:\n                    f.write(data)\n\n            self.logger.info(f\"Response successfully saved to {self.output_file}\")\n        except Exception as e:\n            self.logger.error(f\"Failed to save response: {e}\")\n            raise\n\n    def poll(self, method: str = \"GET\", params: Optional[Dict[str, Any]] = None, \n            data: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n        attempt = 0\n        last_exception = None\n\n        while attempt &lt;= self.max_retries:\n            try:\n                self.logger.info(f\"Making {method} request to {self.endpoint_url} (attempt {attempt + 1}/{self.max_retries + 1})\")\n\n                response = requests.request(\n                    method=method,\n                    url=self.endpoint_url,\n                    params=params,\n                    json=data,\n                    headers=self.headers,\n                    timeout=self.timeout\n                )\n\n                response.raise_for_status()  # Raise an exception for 4XX/5XX responses\n\n                result = response.json() if 'application/json' in response.headers.get('Content-Type', '') else response.content\n\n                self.logger.info(f\"Request successful, status code: {response.status_code}\")\n                self._save_response(result)\n\n                return result if isinstance(result, dict) else {\"content\": result}\n\n            except requests.exceptions.RequestException as e:\n                last_exception = e\n                attempt += 1\n\n                if attempt &lt;= self.max_retries:\n                    delay = self._calculate_delay(attempt - 1)\n                    self.logger.warning(f\"Request failed: {e}. Retrying in {delay:.2f} seconds...\")\n                    time.sleep(delay)\n                else:\n                    self.logger.error(f\"Maximum retries reached. Last error: {e}\")\n                    raise\n\n        # This should not be reached but just in case\n        if last_exception:\n            raise last_exception\n        raise RuntimeError(\"Failed to poll API for unknown reasons\")\n</code></pre>"},{"location":"prompts/understanding/explain_code/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/understanding/explain_code/example/#summary","title":"Summary","text":"<p>This code defines a class <code>ApiPoller</code> that repeatedly polls an API endpoint with specified parameters and saves the response to a file. It includes retry logic with exponential backoff and optional jitter, logging, and different methods to handle various response types.</p>"},{"location":"prompts/understanding/explain_code/example/#example_1","title":"Example","text":"<pre><code># Example usage of the ApiPoller class\n\n# Initialize the ApiPoller with specific parameters\npoller = ApiPoller(\n    endpoint_url=\"https://api.example.com/data\",\n    output_file=\"output/response.json\",\n    base_delay=2.0,\n    max_delay=30.0,\n    max_retries=3,\n    jitter=True,\n    timeout=15,\n    headers={\"Authorization\": \"Bearer your_token\"}\n)\n\n# Poll the API with GET method and specific parameters\nresponse = poller.poll(method=\"GET\", params={\"key\": \"value\"})\n\n# The response will be saved to \"output/response.json\" and also returned\nprint(response)\n</code></pre>"},{"location":"prompts/understanding/explain_code/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert Python programmer who can read code and explain what its doing in very concise, basic terms.\n                        Follow these instructions:\n                        1. Read and understand the code written in ## Code ##. \n                        2. Think step by step and put a 2-3 sentence summary of the code in ## Summary ## in markdown format\n                        3. Write an example of how to use the code, using code. Put this example in ## Example ## and use ```python ``` to show the example.\"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"Here's the code: \n                                ## Code ## \n                                import time\n                                import requests\n                                import json\n                                import os\n                                import random\n                                import logging\n                                from typing import Dict, Any, Optional, Union\n\n                                class ApiPoller:\n                                    def __init__(\n                                        self,\n                                        endpoint_url: str,\n                                        output_file: str,\n                                        base_delay: float = 1.0,\n                                        max_delay: float = 60.0,\n                                        max_retries: int = 5,\n                                        jitter: bool = True,\n                                        timeout: int = 10,\n                                        headers: Optional[Dict[str, str]] = None\n                                    ):\n                                        self.endpoint_url = endpoint_url\n                                        self.output_file = output_file\n                                        self.base_delay = base_delay\n                                        self.max_delay = max_delay\n                                        self.max_retries = max_retries\n                                        self.jitter = jitter\n                                        self.timeout = timeout\n                                        self.headers = headers or {}\n\n                                        # Set up logging\n                                        logging.basicConfig(\n                                            level=logging.INFO,\n                                            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n                                        )\n                                        self.logger = logging.getLogger(__name__)\n\n                                    def _calculate_delay(self, attempt: int) -&gt; float:\n                                        delay = min(self.base_delay * (2 ** attempt), self.max_delay)\n                                        if self.jitter:\n                                            delay = delay * (0.5 + random.random())\n                                        return delay\n\n                                    def _save_response(self, data: Union[Dict[str, Any], str, bytes]) -&gt; None:\n                                        try:\n                                            # Create directory if it doesn't exist\n                                            os.makedirs(os.path.dirname(os.path.abspath(self.output_file)), exist_ok=True)\n\n                                            # Handle different response types\n                                            if isinstance(data, (dict, list)):\n                                                with open(self.output_file, 'w', encoding='utf-8') as f:\n                                                    json.dump(data, f, indent=2)\n                                            elif isinstance(data, str):\n                                                with open(self.output_file, 'w', encoding='utf-8') as f:\n                                                    f.write(data)\n                                            elif isinstance(data, bytes):\n                                                with open(self.output_file, 'wb') as f:\n                                                    f.write(data)\n\n                                            self.logger.info(f\"Response successfully saved to {self.output_file}\")\n                                        except Exception as e:\n                                            self.logger.error(f\"Failed to save response: {e}\")\n                                            raise\n\n                                    def poll(self, method: str = \"GET\", params: Optional[Dict[str, Any]] = None, \n                                            data: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n                                        attempt = 0\n                                        last_exception = None\n\n                                        while attempt &lt;= self.max_retries:\n                                            try:\n                                                self.logger.info(f\"Making {method} request to {self.endpoint_url} (attempt {attempt + 1}/{self.max_retries + 1})\")\n\n                                                response = requests.request(\n                                                    method=method,\n                                                    url=self.endpoint_url,\n                                                    params=params,\n                                                    json=data,\n                                                    headers=self.headers,\n                                                    timeout=self.timeout\n                                                )\n\n                                                response.raise_for_status()  # Raise an exception for 4XX/5XX responses\n\n                                                result = response.json() if 'application/json' in response.headers.get('Content-Type', '') else response.content\n\n                                                self.logger.info(f\"Request successful, status code: {response.status_code}\")\n                                                self._save_response(result)\n\n                                                return result if isinstance(result, dict) else {\"content\": result}\n\n                                            except requests.exceptions.RequestException as e:\n                                                last_exception = e\n                                                attempt += 1\n\n                                                if attempt &lt;= self.max_retries:\n                                                    delay = self._calculate_delay(attempt - 1)\n                                                    self.logger.warning(f\"Request failed: {e}. Retrying in {delay:.2f} seconds...\")\n                                                    time.sleep(delay)\n                                                else:\n                                                    self.logger.error(f\"Maximum retries reached. Last error: {e}\")\n                                                    raise\n\n                                        # This should not be reached but just in case\n                                        if last_exception:\n                                            raise last_exception\n                                        raise RuntimeError(\"Failed to poll API for unknown reasons\")\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 2000\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert Python programmer who can read code and explain what its doing in very basic terms.\\nFollow these instructions:\\n1. Read and understand the code written in ## Code ##. Think step by step\\n2. Put a 2-3 sentence summary of the code in ## Summary ##\\n3. Write an example of how to use the code, using code. Put this example in ## Example ## and use ```python ``` to show the example.\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"Here'\\''s the code:\\n## Code ##\\nimport time\\nimport requests\\nimport json\\nimport os\\nimport random\\nimport logging\\nfrom typing import Dict, Any, Optional, Union\\n\\nclass ApiPoller:\\n    def __init__(\\n        self,\\n        endpoint_url: str,\\n        output_file: str,\\n        base_delay: float = 1.0,\\n        max_delay: float = 60.0,\\n        max_retries: int = 5,\\n        jitter: bool = True,\\n        timeout: int = 10,\\n        headers: Optional[Dict[str, str]] = None\\n    ):\\n        self.endpoint_url = endpoint_url\\n        self.output_file = output_file\\n        self.base_delay = base_delay\\n        self.max_delay = max_delay\\n        self.max_retries = max_retries\\n        self.jitter = jitter\\n        self.timeout = timeout\\n        self.headers = headers or {}\\n        \\n        # Set up logging\\n        logging.basicConfig(\\n            level=logging.INFO,\\n            format='\\''%(asctime)s - %(name)s - %(levelname)s - %(message)s'\\''\\n        )\\n        self.logger = logging.getLogger(__name__)\\n    \\n    def _calculate_delay(self, attempt: int) -&gt; float:\\n        delay = min(self.base_delay * (2 ** attempt), self.max_delay)\\n        if self.jitter:\\n            delay = delay * (0.5 + random.random())\\n        return delay\\n    \\n    def _save_response(self, data: Union[Dict[str, Any], str, bytes]) -&gt; None:\\n        try:\\n            # Create directory if it doesn'\\''t exist\\n            os.makedirs(os.path.dirname(os.path.abspath(self.output_file)), exist_ok=True)\\n            \\n            # Handle different response types\\n            if isinstance(data, (dict, list)):\\n                with open(self.output_file, '\\''w'\\'', encoding='\\''utf-8'\\'') as f:\\n                    json.dump(data, f, indent=2)\\n            elif isinstance(data, str):\\n                with open(self.output_file, '\\''w'\\'', encoding='\\''utf-8'\\'') as f:\\n                    f.write(data)\\n            elif isinstance(data, bytes):\\n                with open(self.output_file, '\\''wb'\\'') as f:\\n                    f.write(data)\\n            \\n            self.logger.info(f\\\"Response successfully saved to {self.output_file}\\\")\\n        except Exception as e:\\n            self.logger.error(f\\\"Failed to save response: {e}\\\")\\n            raise\\n    \\n    def poll(self, method: str = \\\"GET\\\", params: Optional[Dict[str, Any]] = None, \\n            data: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\\n        attempt = 0\\n        last_exception = None\\n        \\n        while attempt &lt;= self.max_retries:\\n            try:\\n                self.logger.info(f\\\"Making {method} request to {self.endpoint_url} (attempt {attempt + 1}/{self.max_retries + 1})\\\")\\n                \\n                response = requests.request(\\n                    method=method,\\n                    url=self.endpoint_url,\\n                    params=params,\\n                    json=data,\\n                    headers=self.headers,\\n                    timeout=self.timeout\\n                )\\n                \\n                response.raise_for_status()  # Raise an exception for 4XX/5XX responses\\n                \\n                result = response.json() if '\\''application/json'\\'' in response.headers.get('\\''Content-Type'\\'', '\\''\\'\\'') else response.content\\n                \\n                self.logger.info(f\\\"Request successful, status code: {response.status_code}\\\")\\n                self._save_response(result)\\n                \\n                return result if isinstance(result, dict) else {\\\"content\\\": result}\\n                \\n            except requests.exceptions.RequestException as e:\\n                last_exception = e\\n                attempt += 1\\n                \\n                if attempt &lt;= self.max_retries:\\n                    delay = self._calculate_delay(attempt - 1)\\n                    self.logger.warning(f\\\"Request failed: {e}. Retrying in {delay:.2f} seconds...\\\")\\n                    time.sleep(delay)\\n                else:\\n                    self.logger.error(f\\\"Maximum retries reached. Last error: {e}\\\")\\n                    raise\\n        \\n        # This should not be reached but just in case\\n        if last_exception:\\n            raise last_exception\\n        raise RuntimeError(\\\"Failed to poll API for unknown reasons\\\")\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert Python programmer who can read code and explain what its doing in very basic terms.\\nFollow these instructions:\\n1. Read and understand the code written in ## Code ##. Think step by step\\n2. Put a 2-3 sentence summary of the code in ## Summary ##\\n3. Write an example of how to use the code, using code. Put this example in ## Example ## and use ```python ``` to show the example.\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"Here's the code:\\n## Code ##\\nimport time\\nimport requests\\nimport json\\nimport os\\nimport random\\nimport logging\\nfrom typing import Dict, Any, Optional, Union\\n\\nclass ApiPoller:\\n    def __init__(\\n        self,\\n        endpoint_url: str,\\n        output_file: str,\\n        base_delay: float = 1.0,\\n        max_delay: float = 60.0,\\n        max_retries: int = 5,\\n        jitter: bool = True,\\n        timeout: int = 10,\\n        headers: Optional[Dict[str, str]] = None\\n    ):\\n        self.endpoint_url = endpoint_url\\n        self.output_file = output_file\\n        self.base_delay = base_delay\\n        self.max_delay = max_delay\\n        self.max_retries = max_retries\\n        self.jitter = jitter\\n        self.timeout = timeout\\n        self.headers = headers or {}\\n        \\n        # Set up logging\\n        logging.basicConfig(\\n            level=logging.INFO,\\n            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\\n        )\\n        self.logger = logging.getLogger(__name__)\\n    \\n    def _calculate_delay(self, attempt: int) -&gt; float:\\n        delay = min(self.base_delay * (2 ** attempt), self.max_delay)\\n        if self.jitter:\\n            delay = delay * (0.5 + random.random())\\n        return delay\\n    \\n    def _save_response(self, data: Union[Dict[str, Any], str, bytes]) -&gt; None:\\n        try:\\n            # Create directory if it doesn't exist\\n            os.makedirs(os.path.dirname(os.path.abspath(self.output_file)), exist_ok=True)\\n            \\n            # Handle different response types\\n            if isinstance(data, (dict, list)):\\n                with open(self.output_file, 'w', encoding='utf-8') as f:\\n                    json.dump(data, f, indent=2)\\n            elif isinstance(data, str):\\n                with open(self.output_file, 'w', encoding='utf-8') as f:\\n                    f.write(data)\\n            elif isinstance(data, bytes):\\n                with open(self.output_file, 'wb') as f:\\n                    f.write(data)\\n            \\n            self.logger.info(f\\\"Response successfully saved to {self.output_file}\\\")\\n        except Exception as e:\\n            self.logger.error(f\\\"Failed to save response: {e}\\\")\\n            raise\\n    \\n    def poll(self, method: str = \\\"GET\\\", params: Optional[Dict[str, Any]] = None, \\n            data: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\\n        attempt = 0\\n        last_exception = None\\n        \\n        while attempt &lt;= self.max_retries:\\n            try:\\n                self.logger.info(f\\\"Making {method} request to {self.endpoint_url} (attempt {attempt + 1}/{self.max_retries + 1})\\\")\\n                \\n                response = requests.request(\\n                    method=method,\\n                    url=self.endpoint_url,\\n                    params=params,\\n                    json=data,\\n                    headers=self.headers,\\n                    timeout=self.timeout\\n                )\\n                \\n                response.raise_for_status()  # Raise an exception for 4XX/5XX responses\\n                \\n                result = response.json() if 'application/json' in response.headers.get('Content-Type', '') else response.content\\n                \\n                self.logger.info(f\\\"Request successful, status code: {response.status_code}\\\")\\n                self._save_response(result)\\n                \\n                return result if isinstance(result, dict) else {\\\"content\\\": result}\\n                \\n            except requests.exceptions.RequestException as e:\\n                last_exception = e\\n                attempt += 1\\n                \\n                if attempt &lt;= self.max_retries:\\n                    delay = self._calculate_delay(attempt - 1)\\n                    self.logger.warning(f\\\"Request failed: {e}. Retrying in {delay:.2f} seconds...\\\")\\n                    time.sleep(delay)\\n                else:\\n                    self.logger.error(f\\\"Maximum retries reached. Last error: {e}\\\")\\n                    raise\\n        \\n        # This should not be reached but just in case\\n        if last_exception:\\n            raise last_exception\\n        raise RuntimeError(\\\"Failed to poll API for unknown reasons\\\")\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/git_helper/example/","title":"Git Helper","text":"<p>Ask Nova to suggest appropriate Git commands for version control tasks.</p>"},{"location":"prompts/understanding/git_helper/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an expert {user description} who can {description of task}.\nFollow these instructions:\n{enumerated instructions}\n</code></pre>"},{"location":"prompts/understanding/git_helper/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>### Task ###\n{description of task}\n</code></pre>"},{"location":"prompts/understanding/git_helper/example/#example","title":"Example","text":""},{"location":"prompts/understanding/git_helper/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert Git user who can translate natural language descriptions into precise Git commands.\nFollow these instructions:\n1. Read and understand the version control task in ### Task ###\n2. Analyze the requirements and context in ### Analysis ### and think step by step:\n    - Required Git operations\n    - Any potential risks or considerations\n    - Alternative approaches if applicable\n3. Provide the Git commands in ### Commands ### using ```bash``` code blocks\n4. Add explanations for each command in ### Explanation ###\n</code></pre>"},{"location":"prompts/understanding/git_helper/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>### Task ###\nI accidentally committed some sensitive credentials to my main branch in my last commit, but haven't pushed yet. I need to:\n1. Remove the sensitive data from the commit\n2. Keep all other changes from that commit\n3. Make sure the credentials are ignored in future commits\nThe sensitive file is at 'config/credentials.json'.\n</code></pre>"},{"location":"prompts/understanding/git_helper/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p>"},{"location":"prompts/understanding/git_helper/example/#analysis","title":"Analysis","text":"<p>To address this task, we need to perform the following steps:</p> <ol> <li>Remove the sensitive data from the commit:</li> <li> <p>We need to remove the <code>config/credentials.json</code> file from the last commit while keeping other changes intact. This can be done using <code>git rm --cached</code>.</p> </li> <li> <p>Amend the last commit:</p> </li> <li> <p>After removing the sensitive file, we need to amend the last commit to reflect this change. This can be done using <code>git commit --amend</code>.</p> </li> <li> <p>Ensure the credentials are ignored in future commits:</p> </li> <li> <p>We need to add <code>config/credentials.json</code> to <code>.gitignore</code> to prevent it from being tracked in future commits.</p> </li> <li> <p>Potential risks and considerations:</p> </li> <li>Amending a commit that hasn\u2019t been pushed is safe, but if the commit had been pushed, amending it would require force-pushing, which can be risky if others are working on the same branch.</li> <li> <p>Ensure that the <code>.gitignore</code> file is committed so that the ignore rule is shared with other collaborators.</p> </li> <li> <p>Alternative approaches:</p> </li> <li>Another approach could be to use <code>git reset</code> to undo the commit, make the changes, and then re-commit. However, <code>git commit --amend</code> is more straightforward for this specific scenario.</li> </ol>"},{"location":"prompts/understanding/git_helper/example/#commands","title":"Commands","text":"<pre><code># Step 1: Remove the sensitive file from the last commit\ngit rm --cached config/credentials.json\n\n# Step 2: Amend the last commit\ngit commit --amend --no-edit\n\n# Step 3: Add the sensitive file to .gitignore\necho \"config/credentials.json\" &gt;&gt; .gitignore\n\n# Step 4: Commit the .gitignore changes\ngit add .gitignore\ngit commit -m \"Add config/credentials.json to .gitignore\"\n</code></pre>"},{"location":"prompts/understanding/git_helper/example/#explanation","title":"Explanation","text":"<ul> <li><code>git rm --cached config/credentials.json</code>: This command removes the <code>config/credentials.json</code> file from the staging area but keeps it in the working directory. This ensures that the file is no longer tracked by Git but remains on your local filesystem.</li> <li><code>git commit --amend --no-edit</code>: This amends the last commit to remove the <code>config/credentials.json</code> file. The <code>--no-edit</code> flag keeps the original commit message unchanged.</li> <li><code>echo \"config/credentials.json\" &gt;&gt; .gitignore</code>: This appends the <code>config/credentials.json</code> file to the <code>.gitignore</code> file, ensuring it is ignored in future commits.</li> <li><code>git add .gitignore</code>: This stages the updated <code>.gitignore</code> file.</li> <li><code>git commit -m \"Add config/credentials.json to .gitignore\"</code>: This commits the changes to the <code>.gitignore</code> file with a descriptive message.</li> </ul>"},{"location":"prompts/understanding/git_helper/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json \n\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert Git user who can translate natural language descriptions into precise Git commands.\n                            Follow these instructions:\n                            1. Read and understand the version control task in ### Task ###\n                            2. Analyze the requirements and the scenario, think step by step, and put your thoughts in ### Analysis ### in markdown formatting. Consider the following:\n                               - Required Git operations\n                               - Any potential risks or considerations\n                               - Alternative approaches if applicable\n                            3. Provide the Git commands in ### Commands ### using ```bash``` code blocks\n                            4. Add explanations for each command in ### Explanation ### in markdown formatting.\n                            \"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"### Task ###\n                                I accidentally committed some sensitive credentials to my main branch in my last commit, but haven't pushed yet. I need to:\n                                1. Remove the sensitive data from the commit\n                                2. Keep all other changes from that commit\n                                3. Make sure the credentials are ignored in future commits\n                                The sensitive file is at 'config/credentials.json'.\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 2000\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert Git user who can translate natural language descriptions into precise Git commands.\\nFollow these instructions:\\n1. Read and understand the version control task in ## Task ##\\n2. Analyze the requirements and context in ## Analysis ##:\\n   - Required Git operations\\n   - Any potential risks or considerations\\n   - Alternative approaches if applicable\\n3. Provide the Git commands in ## Commands ## using ```bash``` code blocks\\n4. Add explanations for each command in ## Explanation ##\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Task ##\\nI accidentally committed some sensitive credentials to my main branch in my last commit, but haven'\\''t pushed yet. I need to:\\n1. Remove the sensitive data from the commit\\n2. Keep all other changes from that commit\\n3. Make sure the credentials are ignored in future commits\\nThe sensitive file is at '\\''config/credentials.json'\\''.\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert Git user who can translate natural language descriptions into precise Git commands.\\nFollow these instructions:\\n1. Read and understand the version control task in ## Task ##\\n2. Analyze the requirements and context in ## Analysis ##:\\n   - Required Git operations\\n   - Any potential risks or considerations\\n   - Alternative approaches if applicable\\n3. Provide the Git commands in ## Commands ## using ```bash``` code blocks\\n4. Add explanations for each command in ## Explanation ##\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Task ##\\nI accidentally committed some sensitive credentials to my main branch in my last commit, but haven't pushed yet. I need to:\\n1. Remove the sensitive data from the commit\\n2. Keep all other changes from that commit\\n3. Make sure the credentials are ignored in future commits\\nThe sensitive file is at 'config/credentials.json'.\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/sql_generation/example/","title":"SQL Generation","text":"<p>Ask Nova to generate SQL queries from natural language descriptions.</p>"},{"location":"prompts/understanding/sql_generation/example/#system-prompt-template","title":"System Prompt Template","text":"<pre><code>You are an expert {user description} who can {description of task}.\nFollow these instructions:\n{enumerated instructions}\n</code></pre>"},{"location":"prompts/understanding/sql_generation/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>{DDL for database tables}\n</code></pre>"},{"location":"prompts/understanding/sql_generation/example/#example","title":"Example","text":""},{"location":"prompts/understanding/sql_generation/example/#amazon-nova-pro-system-prompt","title":"Amazon Nova Pro System Prompt","text":"<pre><code>You are an expert SQL developer who can answer a natural language question using a SQL query.\nFollow these instructions:\n1. Analyze the DDL in the &lt;schema&gt; section and understand the relationships between tables.\n2. Read and understand the natural language question in &lt;question&gt;. \n3. Think step by step about the tables and relationships involved, what the query needs to do, and put your thoughts in &lt;thinking&gt;\n4. Write the SQL query that answers the question, and put it in ```sql``` code blocks\n5. Add any helpful comments to explain key parts of the query under ### Notes ###\n</code></pre>"},{"location":"prompts/understanding/sql_generation/example/#amazon-nova-pro-user-prompt","title":"Amazon Nova Pro User Prompt","text":"<pre><code>&lt;schema&gt;\n    CREATE TABLE customers (\n        customer_id SERIAL PRIMARY KEY,\n        customer_name VARCHAR(100) NOT NULL,\n        email VARCHAR(100) UNIQUE NOT NULL,\n        phone VARCHAR(20),\n        address VARCHAR(200),\n        city VARCHAR(50),\n        state VARCHAR(50),\n        postal_code VARCHAR(20),\n        country VARCHAR(50) DEFAULT 'USA',\n        date_registered TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),\n        credit_limit DECIMAL(12, 2) DEFAULT 5000.00,\n        loyalty_points INTEGER DEFAULT 0,\n        last_login_date TIMESTAMP,\n        marketing_opt_in BOOLEAN DEFAULT TRUE\n    );\n\n    CREATE TABLE orders (\n        order_id SERIAL PRIMARY KEY,\n        customer_id INTEGER NOT NULL REFERENCES customers(customer_id),\n        order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        amount DECIMAL(12, 2) NOT NULL,\n        status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'shipped', 'delivered', 'cancelled', 'returned')),\n        payment_method VARCHAR(50),\n        shipping_address VARCHAR(200),\n        shipping_city VARCHAR(50),\n        shipping_state VARCHAR(50),\n        shipping_postal_code VARCHAR(20),\n        shipping_country VARCHAR(50) DEFAULT 'USA',\n        tracking_number VARCHAR(100),\n        notes TEXT,\n        tax_amount DECIMAL(12, 2) DEFAULT 0.00,\n        shipping_amount DECIMAL(12, 2) DEFAULT 0.00,\n        discount_amount DECIMAL(12, 2) DEFAULT 0.00,\n        coupon_code VARCHAR(50),\n        sales_rep_id INTEGER,\n        CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE RESTRICT\n    );\n\n    CREATE TABLE order_items (\n        item_id SERIAL PRIMARY KEY,\n        order_id INTEGER NOT NULL REFERENCES orders(order_id),\n        product_id INTEGER NOT NULL,\n        quantity INTEGER NOT NULL DEFAULT 1,\n        unit_price DECIMAL(12, 2) NOT NULL,\n        discount_percent DECIMAL(5, 2) DEFAULT 0.00,\n        subtotal DECIMAL(12, 2) GENERATED ALWAYS AS (quantity * unit_price * (1 - discount_percent/100)) STORED,\n        CONSTRAINT fk_order FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE\n    );\n\n    CREATE INDEX idx_orders_customer_id ON orders(customer_id);\n    CREATE INDEX idx_orders_order_date ON orders(order_date);\n    CREATE INDEX idx_orders_amount ON orders(amount);\n    CREATE INDEX idx_order_items_order_id ON order_items(order_id);\n    CREATE INDEX idx_order_items_product_id ON order_items(product_id);\n&lt;/schema&gt;\n&lt;question&gt;Show me all customers who have made purchases over $1000 in the last 30 days, \nalong with their total spend and number of orders. Sort by total spend descending.&lt;/question&gt;\n</code></pre>"},{"location":"prompts/understanding/sql_generation/example/#amazon-nova-pro-sample-response","title":"Amazon Nova Pro Sample Response","text":"<p>Response</p> <p> To answer this question, I need to: 1. Identify customers who have made purchases over $1000 in the last 30 days. 2. Calculate the total spend and number of orders for each of these customers. 3. Sort the results by total spend in descending order. <p>Steps: 1. Use the <code>orders</code> table to filter orders made in the last 30 days and where the amount is greater than $1000. 2. Join the <code>customers</code> table to get customer details. 3. Group by <code>customer_id</code> to calculate the total spend (<code>SUM(amount)</code>) and count the number of orders (<code>COUNT(order_id)</code>). 4. Sort the results by total spend in descending order. </p> <pre><code>SELECT \n    c.customer_id,\n    c.customer_name,\n    SUM(o.amount) AS total_spend,\n    COUNT(o.order_id) AS number_of_orders\nFROM \n    customers c\nJOIN \n    orders o ON c.customer_id = o.customer_id\nWHERE \n    o.order_date &gt;= CURRENT_DATE - INTERVAL '30 days'\n    AND o.amount &gt; 1000\nGROUP BY \n    c.customer_id\nORDER BY \n    total_spend DESC;\n</code></pre>"},{"location":"prompts/understanding/sql_generation/example/#notes","title":"Notes","text":"<ul> <li>The <code>WHERE</code> clause filters orders made in the last 30 days and with an amount greater than $1000.</li> <li>The <code>JOIN</code> clause connects the <code>customers</code> and <code>orders</code> tables using the <code>customer_id</code>.</li> <li>The <code>GROUP BY</code> clause groups the results by <code>customer_id</code> to calculate aggregates.</li> <li>The <code>ORDER BY</code> clause sorts the results by <code>total_spend</code> in descending order.</li> </ul>"},{"location":"prompts/understanding/sql_generation/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-pro-v1:0',\n                system = [\n                    {\n                        \"text\": \"\"\"You are an expert SQL developer who can answer a natural language question using a SQL query.\n                            Follow these instructions:\n                            1. Analyze the DDL in the &lt;schema&gt; section and understand the relationships between tables.\n                            2. Read and understand the natural language question in &lt;question&gt;. \n                            3. Think step by step about the tables and relationships involved, what the query needs to do, and put your thoughts in &lt;thinking&gt;\n                            4. Write the SQL query that answers the question, and put it in ```sql``` code blocks\n                            5. Add any helpful comments to explain key parts of the query under ### Notes ### \n                            \"\"\"\n                    }\n                ],\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"&lt;schema&gt;\n                                CREATE TABLE customers (\n                                    customer_id SERIAL PRIMARY KEY,\n                                    customer_name VARCHAR(100) NOT NULL,\n                                    email VARCHAR(100) UNIQUE NOT NULL,\n                                    phone VARCHAR(20),\n                                    address VARCHAR(200),\n                                    city VARCHAR(50),\n                                    state VARCHAR(50),\n                                    postal_code VARCHAR(20),\n                                    country VARCHAR(50) DEFAULT 'USA',\n                                    date_registered TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                                    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),\n                                    credit_limit DECIMAL(12, 2) DEFAULT 5000.00,\n                                    loyalty_points INTEGER DEFAULT 0,\n                                    last_login_date TIMESTAMP,\n                                    marketing_opt_in BOOLEAN DEFAULT TRUE\n                                );\n\n                                CREATE TABLE orders (\n                                    order_id SERIAL PRIMARY KEY,\n                                    customer_id INTEGER NOT NULL REFERENCES customers(customer_id),\n                                    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                                    amount DECIMAL(12, 2) NOT NULL,\n                                    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'shipped', 'delivered', 'cancelled', 'returned')),\n                                    payment_method VARCHAR(50),\n                                    shipping_address VARCHAR(200),\n                                    shipping_city VARCHAR(50),\n                                    shipping_state VARCHAR(50),\n                                    shipping_postal_code VARCHAR(20),\n                                    shipping_country VARCHAR(50) DEFAULT 'USA',\n                                    tracking_number VARCHAR(100),\n                                    notes TEXT,\n                                    tax_amount DECIMAL(12, 2) DEFAULT 0.00,\n                                    shipping_amount DECIMAL(12, 2) DEFAULT 0.00,\n                                    discount_amount DECIMAL(12, 2) DEFAULT 0.00,\n                                    coupon_code VARCHAR(50),\n                                    sales_rep_id INTEGER,\n                                    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE RESTRICT\n                                );\n\n                                CREATE TABLE order_items (\n                                    item_id SERIAL PRIMARY KEY,\n                                    order_id INTEGER NOT NULL REFERENCES orders(order_id),\n                                    product_id INTEGER NOT NULL,\n                                    quantity INTEGER NOT NULL DEFAULT 1,\n                                    unit_price DECIMAL(12, 2) NOT NULL,\n                                    discount_percent DECIMAL(5, 2) DEFAULT 0.00,\n                                    subtotal DECIMAL(12, 2) GENERATED ALWAYS AS (quantity * unit_price * (1 - discount_percent/100)) STORED,\n                                    CONSTRAINT fk_order FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE\n                                );\n\n                                CREATE INDEX idx_orders_customer_id ON orders(customer_id);\n                                CREATE INDEX idx_orders_order_date ON orders(order_date);\n                                CREATE INDEX idx_orders_amount ON orders(amount);\n                                CREATE INDEX idx_order_items_order_id ON order_items(order_id);\n                                CREATE INDEX idx_order_items_product_id ON order_items(product_id);\n                            &lt;/schema&gt;\n                            &lt;question&gt;Show me all customers who have made purchases over $1000 in the last 30 days, \n                            along with their total spend and number of orders. Sort by total spend descending.&lt;/question&gt;\"\"\"\n                        }\n                    ]\n                }\n            ],\n            inferenceConfig={\n                \"temperature\": 0.1,\n                \"topP\": .99,\n                \"maxTokens\": 512\n            }\n            )\n\nprint(json.dumps(response, indent=2))\n</code></pre> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-pro-v1:0\" \\\n  --system '[\n    {\n      \"text\": \"You are an expert SQL developer who can convert natural language descriptions into precise SQL queries.\\nFollow these instructions:\\n1. Read and understand the natural language request in ## Request ##. Think step by step about the tables and relationships involved.\\n2. Put a 2-3 sentence explanation of what the query needs to do in ## Summary ##\\n3. Write the SQL query that accomplishes this task in ## Query ## using ```sql``` code blocks\\n4. Add helpful comments to explain key parts of the query\"\n    }\n  ]' \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Request ##\\nShow me all customers who have made purchases over $1000 in the last 30 days, along with their total spend and number of orders. Sort by total spend descending.\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-pro-v1:0\",\n  \"system\": [\n    {\n      \"text\": \"You are an expert SQL developer who can convert natural language descriptions into precise SQL queries.\\nFollow these instructions:\\n1. Read and understand the natural language request in ## Request ##. Think step by step about the tables and relationships involved.\\n2. Put a 2-3 sentence explanation of what the query needs to do in ## Summary ##\\n3. Write the SQL query that accomplishes this task in ## Query ## using ```sql``` code blocks\\n4. Add helpful comments to explain key parts of the query\"\n    }\n  ],\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"## Request ##\\nShow me all customers who have made purchases over $1000 in the last 30 days, along with their total spend and number of orders. Sort by total spend descending.\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.1,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"},{"location":"prompts/understanding/structured_json/example/","title":"Structured JSON Output","text":"<p>Output well-formatted JSON. Here we're letting the model come up with its own data, but the same prompt would work with RAG contents as well. We've incorporate a pre-filled response to the model to ensure we get json back, as described in our documentation.</p>"},{"location":"prompts/understanding/structured_json/example/#user-prompt-template","title":"User Prompt Template","text":"<pre><code>{Decription of desired output}.\nYou MUST answer in JSON format only. \nPlease follow the output schema below.\n\nOutput Schema:\n{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}\n</code></pre>"},{"location":"prompts/understanding/structured_json/example/#example","title":"Example","text":""},{"location":"prompts/understanding/structured_json/example/#amazon-nova-lite-user-prompt","title":"Amazon Nova Lite User Prompt","text":"<pre><code>Provide 5 examples of the best selling full-frame cameras in past three years.\nFollow the Output Schema as described below.\nOutput Schema:\n{\n\"name\" : &lt;string, the name of product&gt;,\n\"brand\" : &lt;string, the name of product&gt;,\n\"price\" : &lt;integer price&gt;,\n\"summary\": &lt;string, the product summary&gt;\n}\nOnly Respond in Valid JSON, without Markdown\n</code></pre>"},{"location":"prompts/understanding/structured_json/example/#amazon-nova-lite-assistant-prefilled-response","title":"Amazon Nova Lite Assistant Prefilled Response","text":"<pre><code>\"```json\"\n</code></pre>"},{"location":"prompts/understanding/structured_json/example/#amazon-nova-lite-sample-response","title":"Amazon Nova Lite Sample Response","text":"<p>Response</p> <p><pre><code>[\n  {\n    \"name\": \"Canon EOS R5\",\n    \"brand\": \"Canon\",\n    \"price\": \"$3,899\",\n    \"summary\": \"The Canon EOS R5 is a high-end full-frame mirrorless camera known for its 45MP sensor, 8K video recording, and advanced autofocus capabilities.\"\n  },\n  {\n    \"name\": \"Sony Alpha A7R IV\",\n    \"brand\": \"Sony\",\n    \"price\": \"$3,499\",\n    \"summary\": \"The Sony Alpha A7R IV is a top-tier full-frame mirrorless camera featuring a 61MP sensor, 8K video, and excellent low-light performance.\"\n  },\n  {\n    \"name\": \"Nikon Z7 II\",\n    \"brand\": \"Nikon\",\n    \"price\": \"$2,999\",\n    \"summary\": \"The Nikon Z7 II is a professional full-frame mirrorless camera with a 45.7MP sensor, dual EXPEED 6 processors, and excellent image quality.\"\n  },\n  {\n    \"name\": \"Canon EOS R6\",\n    \"brand\": \"Canon\",\n    \"price\": \"$2,499\",\n    \"summary\": \"The Canon EOS R6 is a versatile full-frame mirrorless camera with a 20.1MP sensor, capable of 20fps shooting, and 4K video recording.\"\n  },\n  {\n    \"name\": \"Sony Alpha A7 III\",\n    \"brand\": \"Sony\",\n    \"price\": \"$1,999\",\n    \"summary\": \"The Sony Alpha A7 III is a popular full-frame mirrorless camera featuring a 24.2MP sensor, fast autofocus, and 10fps continuous shooting.\"\n  }\n]\n</code></pre> ```</p>"},{"location":"prompts/understanding/structured_json/example/#api-request","title":"API Request","text":"pythonAWS CLIjson <pre><code>import boto3\nimport json\n\nbedrock_runtime = boto3.client(\n            service_name=\"bedrock-runtime\",\n            region_name=\"us-west-2\"\n        )\n\n\nresponse = bedrock_runtime.converse(\n                modelId='us.amazon.nova-lite-v1:0',\n                messages = [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"text\": \"\"\"Provide 5 examples of the best selling full-frame cameras in past three years.\n\nYou MUST answer in JSON format only. Please follow the output schema below.\n\n**Output Schema:**\n```json\n[\n  {\n    \"name\": \"string, the name of the camera\",\n    \"brand\": \"string, the brand name\",\n    \"price\": \"integer or string with price\",\n    \"summary\": \"string, brief product description\"\n  }\n]\n</code></pre> <p>DO NOT provide any preamble text. Return ONLY the JSON object.\"\"\"                         }                     ]                 },                 {                     \"role\": \"assistant\",                     \"content\": [                         {                             \"text\": \"<code>json\"                         }                     ]                 }             ],             inferenceConfig={                 \"temperature\": 0.1,                 \"topP\": .99,                 \"maxTokens\": 1000,                 \"stopSequences\": [\"</code>\"]             }             )</p> <p>print(json.dumps(response, indent=2)) ```</p> <pre><code>aws bedrock-runtime converse \\\n  --model-id \"us.amazon.nova-lite-v1:0\" \\\n  --messages '[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"Provide 5 examples of the best selling full-frame cameras in past three years.\\nFollow the Output Schema as described below:\\nOutput Schema:\\n{\\n\\\"name\\\" : &lt;string, the name of product&gt;,\\n\\\"brand\\\" : &lt;string, the name of product&gt;,\\n\\\"price\\\" : &lt;integer price&gt;,\\n\\\"summary\\\": &lt;string, the product summary&gt;\\n}\\nOnly Respond in Valid JSON, without Markdown\"\n        }\n      ]\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": [\n        {\n          \"text\": \"```json\"\n        }\n      ]\n    }\n  ]' \\\n  --inference-config '{\n    \"temperature\": 0.7,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }' \\\n  --region us-west-2\n</code></pre> <pre><code>{\n  \"modelId\": \"us.amazon.nova-lite-v1:0\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"text\": \"Provide 5 examples of the best selling full-frame cameras in past three years.\\nFollow the Output Schema as described below:\\nOutput Schema:\\n{\\n\\\"name\\\" : &lt;string, the name of product&gt;,\\n\\\"brand\\\" : &lt;string, the name of product&gt;,\\n\\\"price\\\" : &lt;integer price&gt;,\\n\\\"summary\\\": &lt;string, the product summary&gt;\\n}\\nOnly Respond in Valid JSON, without Markdown\"\n        }\n      ]\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": [\n        {\n          \"text\": \"```json\"\n        }\n      ]\n    }\n  ],\n  \"inferenceConfig\": {\n    \"temperature\": 0.7,\n    \"topP\": 0.99,\n    \"maxTokens\": 512\n  }\n}\n</code></pre>"}]}